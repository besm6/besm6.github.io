$OT(3)
$SB
$CO
$TYPE ROM
$CP
$MOD86 

MONITOR:DO;





DECLARE

	INT$VECTOR(5)		POINTER;

DECLARE

	MONITOR$STACKPTR	WORD,

	MONITOR$STACKBASE	WORD;

DECLARE

	COPYRIGHT(*)		BYTE	DATA('(C) 1978 INTEL CORP');

DECLARE

	BRK1$FLAG		BYTE,

	BRK1$SAVE		BYTE,

	CHAR			BYTE,

	CHECK$SUM		BYTE,

	I			BYTE,

	END$OFF			WORD,

	WORD$MODE		BYTE,

	LAST$COMMAND		BYTE;

DECLARE

	TRUE			LITERALLY	'0FFH',

	FALSE			LITERALLY	'000H',

	BREAK$INST		LITERALLY	'0CCH',

	STEP$TRAP		LITERALLY	'0100H',

	USER$INIT$SP		LITERALLY	'0100H',

	GO$COMMAND		LITERALLY	'2',

	SS$COMMAND		LITERALLY	'3',

	STANDARD$LEN		LITERALLY	'16',

	MAX$DELAY		LITERALLY	'10000';



DECLARE

	KB$SIGNON(*)		BYTE

				DATA

					(5BH,86H,00H,7DH,7FH,00H,00H),

	SIO$BREAK$MSG(*)	BYTE

				DATA

					('BR ',0),

	ASCII(*)		BYTE

				DATA	('0123456789ABCDEF'),

	SIO$SIGNON(*)		BYTE

				DATA

					(0DH,0AH,'SDK-86 MONITOR, V1.2',0),

	SIO$CMND(*)		BYTE

				DATA

					('SXGNMDIORW');



DECLARE

	SIO$STAT$PORT		LITERALLY	'0D3H',

	SIO$DATA$PORT		LITERALLY	'0D1H',

	CTC$STAT$PORT		LITERALLY	'0DFH',

	CTC$DATA$PORT		LITERALLY	'0DDH',

	CTC$8253$MODE		LITERALLY	'0B6H',

	CTC$8253$LCT		LITERALLY	'0B6H',

	CTC$8253$HCT		LITERALLY	'0B0H',

	SIO$8251$RESET		LITERALLY	'065H',

	SIO$8251$MODE		LITERALLY	'0CFH',

	SIO$8251$CMND		LITERALLY	'025H',

	SIO$8251$DTR$ON		LITERALLY	'027H',

	SIO$DSRDY		LITERALLY	'80H',

	SIO$RXRDY		LITERALLY	'02H',

	SIO$TXRDY		LITERALLY	'01H';



DECLARE

	ASCR			LITERALLY	'0DH',

	ASLF			LITERALLY	'0AH',

	ASBL			LITERALLY	'20H';



DECLARE

	MEMORY$ARG1$PTR		POINTER,

	ARG1	STRUCTURE	(OFF WORD, SEG WORD)

		AT (@MEMORY$ARG1$PTR),

	MEMORY$ARG1 BASED MEMORY$ARG1$PTR BYTE,

	MEMORY$WORD$ARG1 BASED MEMORY$ARG1$PTR WORD,



	MEMORY$ARG3$PTR		POINTER,

	ARG3	STRUCTURE	(OFF WORD, SEG WORD)

		AT (@MEMORY$ARG3$PTR),

	MEMORY$ARG3 BASED MEMORY$ARG3$PTR BYTE,



	MEMORY$BRK1$PTR		POINTER,

	BRK1	STRUCTURE	(OFF WORD, SEG WORD)

		AT (@MEMORY$BRK1$PTR),

	MEMORY$BRK1 BASED MEMORY$BRK1$PTR BYTE,



	MEMORY$CSIP$PTR		POINTER,

	CSIP	STRUCTURE	(OFF WORD, SEG WORD)

		AT (@MEMORY$CSIP$PTR),

	MEMORY$CSIP BASED MEMORY$CSIP$PTR BYTE,



	MEMORY$USER$STACK$PTR	POINTER,

	USERSTACK STRUCTURE	(OFF WORD, SEG WORD)

    AT (@MEMORY$USERSTACK$PTR),

	MEMORY$USERSTACK BASED MEMORY$USERSTACK$PTR WORD;



DECLARE 

	REG(*)		BYTE DATA

	    ('AXBXCXDXSPBPSIDICSDSSSESIPFL'),

	REG$INDEX	WORD,

	REG$SAV(14)	WORD,

	REG$ORD(*)	BYTE DATA

	   (7,6,1,3,2,0,9,11,12,8,13),

	SP		LITERALLY 'REG$SAV( 4)',

	BP		LITERALLY 'REG$SAV( 5)',

	CS		LITERALLY 'REG$SAV( 8)',

	DS		LITERALLY 'REG$SAV( 9)',

	SS		LITERALLY 'REG$SAV(10)',

	ES		LITERALLY 'REG$SAV(11)',

 	IP		LITERALLY 'REG$SAV(12)',

	FL		LITERALLY 'REG$SAV(13)';



DECLARE

	START$ADDR LITERALLY '00A8H',

	BOOT1(*)   BYTE AT (0FFFF0H) DATA (0EAH),

	BOOT2(*)   WORD AT (0FFFF1H) DATA (START$ADDR),

	BOOT3(*)   WORD AT (0FFFF3H) DATA (0FF00H);



DECLARE

	BOOT4(*)	WORD DATA (0E990H,START$ADDR-4);



DECLARE

	BLOCK$8089	WORD	AT(0FFFF6H) DATA (00001H),

	BLOCK$8089$PTR  POINTER;



DECLARE

	F	LITERALLY '0FFH',

	FILL1(*) BYTE AT (0FFFDBH) DATA (F,F,F,F,F),

	FILL2(*) BYTE AT (0FFFE0H) DATA (F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F),

	FILL3(*) BYTE AT  (0FFFF5H) DATA (F),

	FILL4(*) BYTE AT (0FFFFCH) DATA (F,F,F,F);

SIO$CHAR$RDY:

	PROCEDURE BYTE;

	IF (INPUT(SIO$STAT$PORT) AND SIO$RXRDY)=0 THEN RETURN FALSE;

	RETURN TRUE;

	END;

SIO$CHECK$CONTROL$CHAR:

	PROCEDURE;

	CHAR = INPUT(SIO$DATA$PORT) AND 07FH;

	IF CHAR=13H THEN

	   DO WHILE CHAR<>11H;



	     IF SIO$CHAR$RDY THEN

		DO;

		CHAR = INPUT(SIO$DATA$PORT) AND 07FH;

		IF CHAR=03H THEN GOTO ERROR;

		END;

            END;

	ELSE IF CHAR = 03H THEN GOTO ERROR;

	END SIO$CHECK$CONTROL$CHAR;



SIO$OUT$CHAR:

	PROCEDURE(C);

		DECLARE C BYTE;

		IF SIO$CHAR$RDY THEN CALL SIO$CHECK$CONTROL$CHAR;

		DO WHILE (INPUT(SIO$STAT$PORT) AND SIO$TXRDY)=0;END;

		OUTPUT(SIO$DATA$PORT) =C;

	END;

SIO$GET$CHAR:

PROCEDURE;

	DO WHILE (INPUT(SIO$STAT$PORT) AND SIO$RXRDY)=0;END;

	CHAR = INPUT(SIO$DATA$PORT) AND 07FH;

	IF CHAR>=ASBL THEN CALL SIO$OUT$CHAR(CHAR);

END;

SIO$OUT$BYTE:

PROCEDURE(B);

	DECLARE B BYTE;

	CALL SIO$OUT$CHAR(ASCII(SHR(B,4) AND 0FH));

	CALL SIO$OUT$CHAR(ASCII(B AND 0FH));

	CHECK$SUM = CHECK$SUM - B;

END;



SIO$OUT$WORD:

PROCEDURE(W);

	DECLARE W WORD;

	CALL SIO$OUT$BYTE(HIGH(W));

	CALL SIO$OUT$BYTE(LOW(W));

END;



SIO$OUT$BLANK:

PROCEDURE;

	CALL SIO$OUT$CHAR(ASBL);

END;



SIO$OUT$STRING:

PROCEDURE(PTR);

	DECLARE PTR POINTER, STR BASED PTR(1) BYTE;

	I = 0;

	DO WHILE STR(I) <> 0;

		CALL SIO$OUT$CHAR(STR(I));

		I = I + 1;

	END;

END;



SIO$OUT$HEADER:

PROCEDURE(LENGTH,LOAD$ADDR,REC$TYPE);

	DECLARE (LENGTH,REC$TYPE) BYTE, LOAD$ADDR WORD;

	CALL SIO$OUT$CHAR(':');

	CHECK$SUM = 0;

	CALL SIO$OUT$BYTE(LENGTH);

	CALL SIO$OUT$WORD(LOAD$ADDR);

	CALL SIO$OUT$BYTE(REC$TYPE);

END;



SIO$8251$SETTLING$DELAY:

PROCEDURE;

	I = SHR(0FFH,0FFH);

END;



SIO$VALID$HEX:

PROCEDURE(H) BYTE;

	DECLARE H BYTE;

	DO I = 0 TO LAST(ASCII);

		IF H = ASCII(I) THEN RETURN TRUE;

	END;

	RETURN FALSE;

END;



SIO$HEX:

PROCEDURE(C) WORD;

	DECLARE C BYTE;

	IF C <= '9' THEN RETURN DOUBLE(C-30H);

	ELSE RETURN DOUBLE(C-37H);

END;



SIO$VALID$REG$FIRST:

PROCEDURE BYTE;

	DO I = 0 TO 26 BY 2;

		IF CHAR = REG(I) THEN RETURN TRUE;

	END;

	RETURN FALSE;

END;



SIO$VALID$REG:

PROCEDURE(C1,C2) BYTE;

	DECLARE (C1,C2) BYTE;

	DO REG$INDEX = 0 TO 13;

		IF C1=REG(REG$INDEX*2) AND C2=REG(REG$INDEX*2+1) THEN

			RETURN TRUE;

	END;

	RETURN FALSE;

END;



SIO$CRLF:

PROCEDURE;

	CALL SIO$OUT$CHAR(ASCR);

	CALL SIO$OUT$CHAR(ASLF);

END;



SIO$TEST$WORD$MODE:

PROCEDURE;

	WORD$MODE = FALSE;

	CALL SIO$GET$CHAR;

	IF CHAR = 'W' THEN

	DO;

		WORD$MODE = TRUE;

		CALL SIO$GET$CHAR;

	END;

	IF CHAR = ASBL THEN

		CALL SIO$GET$CHAR;

END;



SIO$SCAN$BLANK:

PROCEDURE;

	CALL SIO$GET$CHAR;

	IF CHAR = ASBL THEN

		CALL SIO$GET$CHAR;

END;



SIO$GET$WORD:

PROCEDURE WORD;

	DECLARE (SAVE,W) WORD, (OPER,T) BYTE;

	OPER = '+';

	W = 0;

	DO WHILE TRUE;

		T = CHAR;

		SAVE = 0;

		IF SIO$VALID$REG$FIRST THEN

		DO;

			CALL SIO$GET$CHAR;

			IF SIO$VALID$REG(T,CHAR) THEN

			DO;

				SAVE = REG$SAV(REG$INDEX);

				CALL SIO$GET$CHAR;

				GOTO EVAL;

			END;

			ELSE

				SAVE = SIO$HEX(T);

		END;

		IF NOT(SIO$VALID$HEX(T)) THEN GOTO ERROR;

		DO WHILE SIO$VALID$HEX(CHAR);

			SAVE = SHL(SAVE,4) + SIO$HEX(CHAR);

			CALL SIO$GET$CHAR;

		END;



EVAL:		IF OPER = '+' THEN

			W = W + SAVE;

		ELSE

			W = W - SAVE;

		IF CHAR = ASCR OR CHAR = ':' OR CHAR = ',' THEN

			RETURN W;

		IF CHAR = '+' OR CHAR = '-' THEN

			OPER = CHAR;

		ELSE GOTO ERROR;

		CALL SIO$GET$CHAR;

	END;

END;



SIO$GET$ADDR:

PROCEDURE(PTR,DEFAULT$BASE);

	DECLARE PTR POINTER, DEFAULT$BASE WORD,

		ARG BASED PTR STRUCTURE (OFF WORD, SEG WORD);

	ARG.SEG = DEFAULT$BASE;

	ARG.OFF = SIO$GET$WORD;

	IF CHAR = ':' THEN

	DO;

		CALL SIO$GET$CHAR;

		ARG.SEG = ARG.OFF;

		ARG.OFF = SIO$GET$WORD;

		IF CHAR = ':' THEN GOTO ERROR;

	END;

END;



SIO$UPDATE$IP:

PROCEDURE;

	CALL SIO$OUT$BLANK;

	CALL SIO$OUT$WORD(IP);

	CSIP.SEG = CS;

	CSIP.OFF = IP;

	CALL SIO$OUT$CHAR('-');

	CALL SIO$OUT$BLANK;

	CALL SIO$OUT$BYTE(MEMORY$CSIP);

	CALL SIO$OUT$BLANK;

	CALL SIO$GET$CHAR;

	IF CHAR<>',' AND CHAR<>ASCR THEN CALL SIO$GET$ADDR(@CSIP,CS);

END;



SIO$READ$CHAR:

PROCEDURE BYTE;

	DECLARE DELAY WORD;

LOOP:

	OUTPUT(SIO$STAT$PORT) = SIO$8251$DTR$ON;

	DELAY = 0;

	DO WHILE (INPUT(SIO$STAT$PORT) AND SIO$DSRDY) = 0;

		DELAY = DELAY + 1;

		IF DELAY >= MAX$DELAY THEN

		DO;

			OUTPUT(SIO$STAT$PORT) = SIO$8251$CMND;

			GOTO ERROR;

		END;

	END;

	OUTPUT(SIO$STAT$PORT) = SIO$8251$CMND;

	DO WHILE (INPUT(SIO$STAT$PORT) AND SIO$RXRDY)=0; END;

	CALL SIO$CHECK$CONTROL$CHAR;

	IF CHAR = 11H THEN GOTO LOOP;

	RETURN CHAR;

END;



SIO$READ$BYTE:

PROCEDURE BYTE;

	DECLARE T BYTE;

	T = LOW(SIO$HEX(SIO$READ$CHAR));

	T = SHL(T,4) + LOW(SIO$HEX(SIO$READ$CHAR));

	CHECK$SUM = CHECK$SUM + T;

	RETURN T;

END;



SIO$READ$WORD:

PROCEDURE WORD;

	DECLARE T BYTE;

	T = SIO$READ$BYTE;

	RETURN SHL(DOUBLE(T),8) + DOUBLE(SIO$READ$BYTE);

END;



SAVE$REGISTERS:

PROCEDURE;

	BP = MEMORY$USERSTACK;

	USERSTACK.OFF = USERSTACK.OFF + 4;

	DO I = 0 TO 10;

		REG$SAV(REG$ORD(I)) = MEMORY$USERSTACK;

		USERSTACK.OFF = USERSTACK.OFF + 2;

	END;

	SS = USERSTACK.SEG;

	SP = USERSTACK.OFF;

END;



RESTORE$EXECUTE:

PROCEDURE;

	DECLARE RESTORE$EXECUTE$CODE(*) BYTE DATA

	(08BH,0ECH,

	 08BH,046H,002H,

	 08BH,05EH,004H,

	 08EH,0D0H,

	 08BH,0E3H,

	 05DH,

	 05FH,

	 05EH,

	 05BH,

	 05AH,

	 059H,

	 058H,

	 01FH,

	 007H,

	 0CFH),

	RESTORE$EXECUTE$CODE$PTR WORD DATA (.RESTORE$EXECUTE$CODE);



	USERSTACK.SEG = SS;

	USERSTACK.OFF = SP;

	DO I = 0 TO 10;

		USERSTACK.OFF = USERSTACK.OFF - 2;

		MEMORY$USERSTACK = REG$SAV(REG$ORD(10-I));

	END;

	USERSTACK.OFF = USERSTACK.OFF - 2;

	MEMORY$USERSTACK = BP;

	CALL RESTORE$EXECUTE$CODE$PTR(USERSTACK.OFF,USERSTACK.SEG);

END;



INTERRUPT1$ENTRY:

PROCEDURE INTERRUPT 1;

	USERSTACK.OFF = STACKPTR;

	USERSTACK.SEG =  STACKBASE;

	STACKPTR = MONITOR$STACKPTR;

	STACKBASE = MONITOR$STACKBASE;

	CALL SAVE$REGISTERS;

	FL = FL AND (NOT STEP$TRAP);

	IF LAST$COMMAND <> SS$COMMAND THEN

		CALL RESTORE$EXECUTE;

	CALL SIO$CRLF;

	CALL SIO$UPDATE$IP;

	IF CHAR = ',' THEN

	DO;

		IP = CSIP.OFF;

		CS = CSIP.SEG;

		FL = FL OR STEP$TRAP;

		CALL RESTORE$EXECUTE;

	END;

	IF CHAR <> ASCR THEN GOTO ERROR;

	GOTO NEXT$COMMAND;

END;



INTERRUPT3$ENTRY:

PROCEDURE INTERRUPT 3;

	USERSTACK.OFF = STACKPTR;

	USERSTACK.SEG = STACKBASE;

	STACKPTR = MONITOR$STACKPTR;

	STACKBASE = MONITOR$STACKBASE;

	CALL SAVE$REGISTERS;

	CALL SIO$CRLF;

	GOTO AFTER$INTERRUPT;

END;



INIT$INT$VECTOR:

PROCEDURE(INT$VECTOR$PTR,INT$ROUTINE$OFFSET);

	DECLARE INT$VECTOR$PTR POINTER, INT$ROUTINE$OFFSET WORD,

		VECTOR BASED INT$VECTOR$PTR STRUCTURE (OFF WORD, SEG WORD),

	CORRECTION LITERALLY '19H',

	INIT$INT$VECTOR$CODE(*) BYTE DATA

	(055H,

	 08BH,0ECH,

	 08CH,0C8H,

	 0C4H,05EH,004H,

	 026H,089H,007H,

 	 05DH,

	 0C2H,004H,000H),

	INIT$INT$VECTOR$CODE$PTR WORD DATA(.INIT$INT$VECTOR$CODE);



	CALL INIT$INT$VECTOR$CODE$PTR(@VECTOR.SEG);

	VECTOR.OFF = INT$ROUTINE$OFFSET - CORRECTION;

END;



SIO$GO:

PROCEDURE;

	CALL SIO$UPDATE$IP;

	IF CHAR = ',' THEN

	DO;

		CALL SIO$GET$CHAR;

		CALL SIO$GET$ADDR(@BRK1,CSIP.SEG);

		IF CHAR <> ASCR THEN GOTO ERROR;

		BRK1$SAVE = MEMORY$BRK1;

		MEMORY$BRK1 = BREAK$INST;

		IF MEMORY$BRK1 <> BREAK$INST THEN GOTO ERROR;

		BRK1$FLAG = TRUE;

	END;

	ELSE

		IF CHAR <> ASCR THEN GOTO ERROR;

	CALL SIO$CRLF;

	IP = CSIP.OFF;

	CS = CSIP.SEG;

	FL = FL AND (NOT STEP$TRAP);

	CALL RESTORE$EXECUTE;

END;



SIO$SINGLE$STEP:

PROCEDURE;

	CALL SIO$UPDATE$IP;

	IF CHAR <> ',' THEN GOTO ERROR;

	IP = CSIP.OFF;

	CS = CSIP.SEG;

	FL = FL OR STEP$TRAP;

	CALL RESTORE$EXECUTE;

END;



SIO$EXAM$MEM:

PROCEDURE;

	DECLARE W WORD;

	CALL SIO$TEST$WORD$MODE;

	CALL SIO$GET$ADDR(@ARG1,CS);

	IF CHAR <> ',' THEN GOTO ERROR;

	DO WHILE TRUE;

		CALL SIO$OUT$BLANK;

		IF WORD$MODE THEN

			CALL SIO$OUT$WORD(MEMORY$WORD$ARG1);

		ELSE

			CALL SIO$OUT$BYTE(MEMORY$ARG1);

		CALL SIO$OUT$CHAR('-');

		CALL SIO$OUT$BLANK;

		CALL SIO$GET$CHAR;

		IF CHAR = ASCR THEN RETURN;

		IF CHAR <> ',' THEN

		DO;

			W = SIO$GET$WORD;

			IF (CHAR<>',') AND (CHAR<>ASCR) THEN GOTO ERROR;

			IF WORD$MODE THEN

			DO;

				MEMORY$WORD$ARG1 = W;

				IF MEMORY$WORD$ARG1<>W THEN GOTO ERROR;

			END;

			ELSE

			DO;

				MEMORY$ARG1 = LOW(W);

				IF MEMORY$ARG1<>LOW(W) THEN GOTO ERROR;

			END;

		END;

		IF CHAR = ASCR THEN RETURN;

		IF WORD$MODE THEN

			ARG1.OFF = ARG1.OFF + 2;

		ELSE

			ARG1.OFF = ARG1.OFF + 1;

		CALL SIO$CRLF;

		CALL SIO$OUT$WORD(ARG1.OFF);

	END;

END;



SIO$EXAM$REG:

PROCEDURE;

	DECLARE (T,I) BYTE, SAVE WORD;

	CALL SIO$SCAN$BLANK;

	IF CHAR = ASCR THEN

	DO;

		CALL SIO$CRLF;

		DO I = 0 TO 13;

			CALL SIO$OUT$BLANK;

			CALL SIO$OUT$CHAR(REG(I*2));

			CALL SIO$OUT$CHAR(REG(I*2+1));

			CALL SIO$OUT$CHAR('=');

			CALL SIO$OUT$WORD(REG$SAV(I));

			IF I = 6 THEN CALL SIO$CRLF;

		END;

		RETURN;

	END;

	IF NOT(SIO$VALID$REG$FIRST) THEN GOTO ERROR;

	T = CHAR;

	CALL SIO$GET$CHAR;

	IF NOT(SIO$VALID$REG(T,CHAR)) THEN GOTO ERROR;

	I = REG$INDEX;

	DO WHILE TRUE;

		CALL SIO$OUT$CHAR('=');

		CALL SIO$OUT$WORD(REG$SAV(I));

		CALL SIO$OUT$CHAR('-');

		CALL SIO$OUT$BLANK;

		CALL SIO$GET$CHAR;

		IF CHAR <> ',' AND CHAR <> ASCR THEN

		DO;

			SAVE = SIO$GET$WORD;

			IF (CHAR<>',') AND (CHAR<>ASCR) THEN GOTO ERROR;

			REG$SAV(I) = SAVE;

		END;

		IF CHAR = ASCR OR I = 13 THEN RETURN;

		I = I + 1;

		CALL SIO$CRLF;

		CALL SIO$OUT$CHAR(REG(I*2));

		CALL SIO$OUT$CHAR(REG(I*2+1));

	END;

END;



SIO$MOVE:

PROCEDURE;

	CALL SIO$SCAN$BLANK;

	CALL SIO$GET$ADDR(@ARG1,CS);

	IF CHAR <> ',' THEN GOTO ERROR;

	CALL SIO$GET$CHAR;

	END$OFF = SIO$GET$WORD;

	IF END$OFF < ARG1.OFF THEN GOTO ERROR;

	IF CHAR <> ',' THEN GOTO ERROR;

	CALL SIO$GET$CHAR;

	CALL SIO$GET$ADDR(@ARG3,CS);

	IF CHAR <> ASCR THEN GOTO ERROR;

	CALL SIO$CRLF;

LOOP:

	MEMORY$ARG3 = MEMORY$ARG1;

	IF MEMORY$ARG3 <> MEMORY$ARG1 THEN GOTO ERROR;

	IF ARG1.OFF = END$OFF THEN RETURN;

	ARG1.OFF = ARG1.OFF + 1;

	ARG3.OFF = ARG3.OFF + 1;

	GOTO LOOP;

END;



SIO$DISPLAY:

PROCEDURE;

	DECLARE T BYTE;

	CALL SIO$TEST$WORD$MODE;

	CALL SIO$GET$ADDR(@ARG1,CS);

	IF CHAR = ASCR THEN

		END$OFF = ARG1.OFF;

	ELSE

	DO;

		IF CHAR <> ',' THEN GOTO ERROR;

		CALL SIO$GET$CHAR;

		END$OFF = SIO$GET$WORD;

		IF END$OFF < ARG1.OFF THEN GOTO ERROR;

		IF CHAR <> ASCR THEN GOTO ERROR;

	END;

NEWLINE:

	CALL SIO$CRLF;

	CALL SIO$OUT$WORD(ARG1.OFF);

LOOP:	CALL SIO$OUT$BLANK;

	IF WORD$MODE THEN

	DO;

		CALL SIO$OUT$WORD(MEMORY$WORD$ARG1);

		IF ARG1.OFF = END$OFF THEN RETURN;

		ARG1.OFF = ARG1.OFF + 1;

	END;

	ELSE

		CALL SIO$OUT$BYTE(MEMORY$ARG1);

	IF ARG1.OFF >= END$OFF THEN RETURN;

	ARG1.OFF = ARG1.OFF + 1;

	T = ARG1.OFF AND 000FH;

	IF T=0 OR (WORD$MODE AND T=1) THEN GOTO NEWLINE;

	GOTO LOOP;

END;



SIO$INPUT:

PROCEDURE;

	DECLARE PORT WORD;

	CALL SIO$TEST$WORD$MODE;

	PORT = SIO$GET$WORD;

LOOP:

	IF CHAR <>',' THEN GOTO ERROR;

	CALL SIO$CRLF;

	IF WORD$MODE THEN

		CALL SIO$OUT$WORD(INWORD(PORT));

	ELSE

		CALL SIO$OUT$BYTE(INPUT(PORT));

	CALL SIO$GET$CHAR;

	IF CHAR = ASCR THEN RETURN;

	GOTO LOOP;

END;



SIO$OUTPUT:

PROCEDURE;

	DECLARE (DATUM,PORT) WORD;

	CALL SIO$TEST$WORD$MODE;

	PORT = SIO$GET$WORD;

	IF CHAR <> ',' THEN GOTO ERROR;

	CALL SIO$GET$CHAR;

LOOP:

	DATUM = SIO$GET$WORD;

	IF CHAR = ':' THEN GOTO ERROR;

	IF WORD$MODE THEN

		OUTWORD(PORT) = DATUM;

	ELSE

		OUTPUT(PORT) = LOW(DATUM);

	IF CHAR = ',' THEN

	DO;

		CALL SIO$CRLF;

		CALL SIO$OUT$CHAR('-');

		CALL SIO$OUT$BLANK;

		CALL SIO$GET$CHAR;

		IF CHAR <> ASCR THEN GOTO LOOP;

	END;

END;



SIO$WRITE:

PROCEDURE;

	DECLARE (START$REC,MODE$8086) BYTE, (LEN,INDEX) WORD;

	CALL SIO$GET$CHAR;

	MODE$8086 =TRUE;

	IF CHAR = 'X' THEN

	DO;

		MODE$8086 = FALSE;

		CALL SIO$GET$CHAR;

	END;

	IF CHAR = ASBL THEN CALL SIO$GET$CHAR;

	CALL SIO$GET$ADDR(@ARG1,CS);

	IF CHAR <> ',' THEN GOTO ERROR;

	CALL SIO$GET$CHAR;

	END$OFF = SIO$GET$WORD;

	IF END$OFF <> ARG1.OFF THEN GOTO ERROR;

	IF CHAR <> ASCR THEN

	DO;

		START$REC = TRUE;

		CALL SIO$GET$CHAR;

		CALL SIO$GET$ADDR(@ARG3,CS);

	END;

	ELSE

	DO;

		START$REC = FALSE;

		ARG3.OFF = 0;

	END;

	IF CHAR <> ASCR THEN GOTO ERROR;

	CALL SIO$CRLF;

	DO I = 1 TO 60;

		CALL SIO$OUT$CHAR(0);

	END;

	CALL SIO$CRLF;

	IF MODE$8086 THEN

	DO;

		IF START$REC THEN

		DO;

			CALL SIO$OUT$HEADER(04,0,03);

			CALL SIO$OUT$WORD(ARG3.SEG);

			CALL SIO$OUT$WORD(ARG3.OFF);

			CALL SIO$OUT$BYTE(CHECK$SUM);

			CALL SIO$CRLF;

			ARG3.OFF = 0;

		END;

		CALL SIO$OUT$HEADER(02,0,02);

		CALL SIO$OUT$WORD(ARG1.SEG);

		CALL SIO$OUT$BYTE(CHECK$SUM);

		CALL SIO$CRLF;

	END;



	LEN = STANDARD$LEN;

LOOP:	INDEX = END$OFF - ARG1.OFF;

	IF INDEX<>STANDARD$LEN THEN LEN = INDEX + 1;

	CALL SIO$OUT$HEADER(LEN,ARG1.OFF,00);

	DO I = 1 TO LEN;

		CALL SIO$OUT$BYTE(MEMORY$ARG1);

		ARG1.OFF = ARG1.OFF + 1;

	END;

	CALL SIO$OUT$BYTE(CHECK$SUM);

	CALL SIO$CRLF;

	IF END$OFF <> ARG1.OFF-1 THEN GOTO LOOP;

	CALL SIO$OUT$HEADER(00,ARG3.OFF,01);

	CALL SIO$OUT$BYTE(CHECK$SUM);

	CALL SIO$CRLF;

	DO I = 0 TO 60;

		CALL SIO$OUT$CHAR(0);

	END;

END;



SIO$READ:

PROCEDURE;

	DECLARE BIAS WORD, (REC$TYPE,LEN,I,T) BYTE, OFFSET WORD;

	BIAS = 0;

	ARG1.SEG = 0;

	CALL SIO$SCAN$BLANK;

	IF CHAR <> ASCR THEN BIAS = SIO$GET$WORD;

	IF CHAR <> ASCR THEN GOTO ERROR;

	CALL SIO$CRLF;

LOOP:

	DO WHILE SIO$READ$CHAR <> ':'; END;

	CHECK$SUM = 0;

	LEN = SIO$READ$BYTE;

	OFFSET = SIO$READ$WORD;

	ARG1.OFF = OFFSET + BIAS;

	REC$TYPE = SIO$READ$BYTE;

	IF REC$TYPE = 03 THEN

	DO;

		CS = SIO$READ$WORD;

		IP = SIO$READ$WORD;

	END;

	IF REC$TYPE = 02 THEN

		ARG1.SEG = SIO$READ$WORD;

	IF REC$TYPE = 01 THEN

		IF OFFSET <> 0 THEN IP = OFFSET;

	IF REC$TYPE = 00 THEN

	DO I = 1 TO LEN;

		T,MEMORY$ARG1 = SIO$READ$BYTE;

		IF MEMORY$ARG1 <> T THEN GOTO ERROR;

		ARG1.OFF = ARG1.OFF + 1;

	END;

	T = SIO$READ$BYTE;

	IF CHECK$SUM <> 0 THEN GOTO ERROR;

	IF REC$TYPE <> 01 AND LEN <> 0 THEN GOTO LOOP;

	CALL SIO$OUT$CHAR(0);

	CALL SIO$OUT$CHAR(0);

END;





/************************************************************



	     HIA BEJINNT DISS MEHN - PROJRAMM



************************************************************/





	DISABLE;

	OUTPUT(CTC$STAT$PORT) = CTC$8253$MODE;

	OUTPUT(CTC$DATA$PORT) = CTC$8253$LCT;

	OUTPUT(CTC$DATA$PORT) = CTC$8253$HCT;



	OUTPUT(SIO$STAT$PORT) = SIO$8251$RESET;

	CALL SIO$8251$SETTLING$DELAY;

	OUTPUT(SIO$STAT$PORT) = 25H;

	CALL SIO$8251SETTLING$DELAY;

	OUTPUT(SIO$STAT$PORT) = SIO$8251$RESET;

	CALL SIO$8251$SETTLING$DELAY;

	OUTPUT(SIO$STAT$PORT) = SIO$8251$MODE;

	CALL SIO$8251$SETTLING$DELAY;

	OUTPUT(SIO$STAT$PORT) = SIO$8251$CMND;

	CALL SIO$8251$SETTLING$DELAY;

	CALL SIO$OUT$STRING(@SIO$SIGNON);



	CS,SS,DS,ES,FL,IP = 0;

	SP = USER$INIT$SP;



	CALL INIT$INT$VECTOR(@INT$VECTOR(1),.INTERRUPT1$ENTRY);

	CALL INIT$INT$VECTOR(@INT$VECTOR(2),.INTERRUPT3$ENTRY);

	CALL INIT$INT$VECTOR(@INT$VECTOR(3),.INTERRUPT3$ENTRY);



	BRK1$FLAG = FALSE;

	MONITOR$STACKPTR = STACKPTR;

	MONITOR$STACKBASE = STACKBASE;





NEXT$COMMAND:

	CALL SIO$CRLF;

	CALL SIO$OUT$CHAR(0);

	CALL SIO$OUT$CHAR('.');

	CALL SIO$GET$CHAR;

	DO I = 0 TO LAST(SIO$CMND);

		IF CHAR = SIO$CMND(I) THEN GOTO DISPATCH;

	END;

	GOTO ERROR;



DISPATCH:

	LAST$COMMAND = I;

	DO CASE I;

		CALL SIO$EXAM$MEM;

		CALL SIO$EXAM$REG;

		CALL SIO$GO;

		CALL SIO$SINGLE$STEP;

		CALL SIO$MOVE;

		CALL SIO$DISPLAY;



		CALL SIO$INPUT;



		CALL SIO$OUTPUT;



		CALL SIO$READ;


		CALL SIO$WRITE;

	END;

	GOTO NEXT$COMMAND;

ERROR:



	CALL SIO$OUT$CHAR('#');



	GOTO NEXT$COMMAND;



AFTER$INTERRUPT:

	IF BRK1$FLAG THEN

	DO;

		MEMORY$BRK1 = BRK1$SAVE;

		BRK1$FLAG = FALSE;

		IF ((IP-1) AND 000FH) = (BRK1.OFF AND 000FH) AND

			(SHR(IP-1,4)+CS) = (SHR(BRK1.OFF,4)+BRK1.SEG) THEN

		DO;

			IP = IP - 1;

			CALL SIO$OUT$STRING(@SIO$BREAK$MSG);

		END;

	END;

	CALL SIO$OUT$CHAR('@');

	CALL SIO$OUT$WORD(CS);

	CALL SIO$OUT$CHAR(':');

	CALL SIO$OUT$WORD(IP);

	GOTO NEXT$COMMAND;



END MONITOR;



EOF







