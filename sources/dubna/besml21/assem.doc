*CALL ASPID*D:MACROS
#СК $ $СПБ ^
$МАКРО ПР $А0$КПБ$СГ16$ЛА8 $КОНМАК
$МАКРО С $А0$БС1$А0 $КОНМАК
$МАКРО ПЕРО $А0$КПБ$СГ15$ВС2$БС1$ЛА3 $КОНМАК
$МАКРО ПАР $А0$БС5$СГ0$ВС10$А6$ПБ $КОНМАК
$МАКРО ПОД $А0$БС3$КПБ $КОНМАК
$МАКРО ПН $А0$БС1$ВС1$СГ8$ЛА5$ПБ $КОНМАК
$ОНСЦ
$НА _
$БС4
$НА $Б __А.Л._ДАВЫДОВ
$А0
$БС2
$Б
$К
 
  ЖЖЖ   ЖЖЖ   ЖЖЖ  ЖЖЖЖ  Ж   Ж ЖЖЖЖЖ   ЖЖЖ ЖЖЖЖ  ЖЖЖЖ
 Ж   Ж Ж   Ж Ж   Ж Ж     ЖЖ ЖЖ Ж      Ж  Ж Ж     Ж   Ж
 Ж   Ж Ж     Ж     Ж     Ж Ж Ж Ж      Ж  Ж Ж     Ж   Ж
 Ж   Ж Ж     Ж     ЖЖЖ   Ж Ж Ж ЖЖЖЖ   Ж  Ж ЖЖЖ   ЖЖЖЖ
 ЖЖЖЖЖ Ж     Ж     Ж     Ж   Ж Ж   Ж  Ж  Ж Ж     Ж
 Ж   Ж Ж   Ж Ж   Ж Ж     Ж   Ж Ж   Ж  Ж  Ж Ж     Ж
 Ж   Ж  ЖЖЖ   ЖЖЖ  ЖЖЖЖЖ Ж   Ж ЖЖЖЖ  Ж   Ж ЖЖЖЖЖ Ж
 
 
 
 
     Ж   Ж Ж  Ж  ЖЖЖЖЖ        ЖЖЖ   ЖЖЖ   ЖЖЖ    Ж
     ЖЖ ЖЖ Ж Ж   Ж           Ж   Ж Ж     Ж   Ж  ЖЖ
     Ж Ж Ж ЖЖЖ   ЖЖЖЖ   ЖЖЖ   ЖЖЖ  ЖЖЖЖ  Ж   Ж   Ж
     Ж   Ж Ж  Ж  Ж   Ж       Ж   Ж Ж   Ж Ж   Ж   Ж
     Ж   Ж Ж   Ж ЖЖЖЖ         ЖЖЖ   ЖЖЖ   ЖЖЖ   ЖЖЖ
 
$КК_
$БС27
$А0 $Ц МОСКВА 1988
$Г
$ГГ
$НА _
$НСЦ3
$Г СОДЕРЖАНИЕ.
$ГГ
$К
 1. ВВЕДЕНИЕ .  .  .  .  .  .  .  .  .  .  .  .  .  .   5
 
 2. ЭЛЕМЕНТАРНЫЕ КОНСТРУКЦИИ   .  .  .  .  .  .  .  .   7
 
 3. СИНТАКСИС ЯЗЫКА. КОМАНДЫ. ВХОДНОЙ ЯЗЫК .  .  .  .  10
    3.1 КОММЕНТАРНЫЕ СТРОКИ .  .  .  .  .  .  .  .  .  10
    3.2 ОПЕРАТОРЫ  .  .  .  .  .  .  .  .  .  .  .  .  10
    3.3 ПОЛЯ ОПЕРАТОРА - КОМАНДЫ  .  .  .  .  .  .  .  11
    3.4 ЛИТЕРАЛЫ   .  .  .  .  .  .  .  .  .  .  .  .  13
    3.5 ЛОКАЛЬНЫЕ МЕТКИ  .  .  .  .  .  .  .  .  .  .  15
    3.6 ВХОДНОЙ ЯЗЫК  .  .  .  .  .  .  .  .  .  .  .  15
 
 4. ПСЕВДОИНСТРУКЦИИ  .  .  .  .  .  .  .  .  .  .  .  17
    4.1 ЗАГОЛОВОК, ВХОДЫ И ВНЕШНИЕ ПОДПРОГРАММЫ  .  .  17
    4.2 ОПИСАНИЯ ^С^О^М^М^О^N-БЛОКОВ .  .  .  .  .  .  .  .  18
    4.3 ФОРМИРОВАНИЕ ПЕРЕМЕННЫХ И КОНСТАНТ .  .  .  .  19
    4.4 ЭКВИВАЛЕНТНОСТИ  .  .  .  .  .  .  .  .  .  .  24
    4.5 РЕЗЕРВИРОВАНИЕ ПАМЯТИ  .  .  .  .  .  .  .  .  25
    4.6 ИНСТРУКЦИЯ ^В^L^О^С^К .  .  .  .  .  .  .  .  .  .  26
    4.7 ИНСТРУКЦИИ ^С^А^L^L И ^Е^J^М^Р    .  .  .  .  .  .  .  27
 
 5. ФОРМИРОВАНИЕ НАЧАЛЬНОГО СОСТОЯНИЯ ^С^О^М^М^О^N-БЛОКОВ    29
    5.1 НЕПОСРЕДСТВЕННАЯ РАССЫЛКА ДАННЫХ   .  .  .  .  29
    5.2 ПОДПРОГРАММА - ^В^L^О^С^К ^D^А^Т^А    .  .  .  .  .  .  30
 
 6. СТРУКТУРА ПОДПРОГРАММЫ  .  .  .  .  .  .  .  .  .  32
    6.1 СТРУКТУРА ТЕКСТА ПОДПРОГРАММЫ   .  .  .  .  .  32
    6.2 СТРУКТУРА ЗАГРУЖЕННОЙ ПОДПРОГРАММЫ    .  .  .  33
 
 7. РАСПРЕДЕЛЕНИЕ ПАМЯТИ В ПРОГРАММЕ .  .  .  .  .  .  35
    7.1 ОБЛАСТИ ПАМЯТИ   .  .  .  .  .  .  .  .  .  .  35
    7.2 ПОРЯДОК РАСПОЛОЖЕНИЯ ПОДПРОГРАММ
        И ^С^О^М^М^О^N-БЛОКОВ  .  .  .  .  .  .  .  .  .  .  36
 
 8. ОБЩЕСИСТЕМНЫЕ СОГЛАШЕНИЯ   .  .  .  .  .  .  .  .  38
    8.1 МЕЖПРОГРАММНЫЙ ИНТЕРФЕЙС  .  .  .  .  .  .  .  38
    8.2 ИСПОЛЬЗОВАНИЕ ИНДЕКСНЫХ РЕГИСТРОВ  .  .  .  .  39
    8.3 ДИНАМИЧЕСКИЕ ПЕРЕМЕННЫЕ   .  .  .  .  .  .  .  40
    8.4 ИСПОЛЬЗОВАНИЕ МАГАЗИНА    .  .  .  .  .  .  .  41
 
 9. ДИАГНОСТИЧЕСКИЕ СООБЩЕНИЯ  .  .  .  .  .  .  .  .  42
 
10. РЕАЛИЗАЦИЯ ТРАНСЛЯТОРА  .  .  .  .  .  .  .  .  .  43
 
11. СПИСОК ЛИТЕРАТУРЫ .  .  .  .  .  .  .  .  .  .  .  44
 
 
$КК_
$ОНСЦ
$Г
$ГГ
$НА _
$НСЦ5
$Г 1. ВВЕДЕНИЕ
$ГГ
$НА $Б АССЕМБЛЕР $М ПРЕДНАЗНАЧЕН ДЛЯ $Б ЭВМ МКБ-8601, $М
СОЗДАВАЕМОЙ В ^О^И^Я^И В РАМКАХ ПРОЕКТА $Б RETRO-86.$М
ТРАНСЛЯТОР НАПИСАН НА АВТОКОДЕ $Б MADLEN-3
[1,2,3] ЭВМ БЭСМ-6, $М
ЧТО И ОПРЕДЕЛЯЕТ ОБЛАСТЬ ЕГО ПРИМЕНЕНИЯ: ОН МОЖЕТ
РАБОТАТЬ КАК НА $Б БЭСМ-6,$М В КАЧЕСТВЕ КРОСС-АССЕМБЛЕРА [4],
ТАК И НЕПОСРЕДСТВЕННО НА НОВОЙ МАШИНЕ В РЕЖИМЕ ЭМУЛЯЦИИ
$Б БЭСМ-6.$М
$НА ПРЕЖДЕ ЧЕМ ПРИСТУПИТЬ К ИЗЛОЖЕНИЮ ЯЗЫКА
АССЕМБЛЕРА, НЕОБХОДИМО СКАЗАТЬ НЕСКОЛЬКО СЛОВ О СТРУКТУРЕ
ПРОГРАММЫ ПОЛЬЗОВАТЕЛЯ С ТОЧКИ ЗРЕНИЯ МОНИТОРНОЙ СИСТЕМЫ
НОВОЙ МАШИНЫ И О ПУТИ ПРЕОБРАЗОВАНИЯ ПРОГРАММЫ
ОТ ТЕКСТОВОГО ПРЕДСТАВЛЕНИЯ ДО ЗАГРУЖАЕМОГО В ПАМЯТЬ ЭВМ КОДА.
$НА ПРОГРАММА СОСТОИТ, ВООБЩЕ ГОВОРЯ, ИЗ НЕСКОЛЬКИХ НЕЗАВИСИМО
ТРАНСЛИРУЕМЫХ ПОДПРОГРАММ. РЕЗУЛЬТАТОМ РАБОТЫ ТРАНСЛЯТОРА
ЯВЛЯЕТСЯ ОБ'ЕКТНЫЙ МОДУЛЬ ПОДПРОГРАММЫ.
ПОДРОБНО СТРУКТУРА ОБ'ЕКТНОГО МОДУЛЯ ОПИСЫВАЕТСЯ В ПРИЛОЖЕНИИ ^А,
ЗДЕСЬ-ЖЕ ОТМЕТИМ ЛИШЬ, ЧТО ОН СОДЕРЖИТ:
$ПЕРН _-_МАШИННЫЙ КОД ПОДПРОГРАММЫ, АДРЕСА В КОТОРОМ НЕ
СФОРМИРОВАНЫ ОКОНЧАТЕЛЬНО;
$ПЕРН _-_ИМЕНА ВНЕШНИХ ОБ'ЕКТОВ: ПОДПРОГРАММ, К КОТОРЫМ МОГУТ
БЫТЬ ОБРАЩЕНИЯ И ОБЩИХ С ДРУГИМИ ПОДПРОГРАММАМИ
^С^О^М^М^О^N-БЛОКОВ ПАМЯТИ, К КОТОРЫМ ВОЗМОЖЕН ДОСТУП ИЗ
ДАННОЙ ПОДПРОГРАММЫ;
$ПЕРН  _-_ИНФОРМАЦИЮ ДЛЯ ОКОНЧАТЕЛЬНОЙ НАСТРОЙКИ АДРЕСОВ В МАШИННОМ
КОДЕ ПОДПРОГРАММЫ.
$НА ИЗГОТОВЛЕНИЕМ ИЗ ЭТИХ ОТДЕЛЬНЫХ ОБ'ЕКТНЫХ МОДУЛЕЙ ЕДИНОЙ
ПРОГРАММЫ И ЗАГРУЗКОЙ ЕЕ НЕПОСРЕДСТВЕННО В ПАМЯТЬ ^Э^В^М
ЗАНИМАЕТСЯ ^З^А^Г^Р^У^З^Ч^И^К, А САМ ЭТОТ ПРОЦЕСС БУДЕТ
В ДАЛЬНЕЙШЕМ НАЗЫВАТЬСЯ ^З^А^Г^Р^У^З^К^О^Й. ПО ОКОНЧАНИИ
СВОЕЙ РАБОТЫ ЗАГРУЗЧИК, КАК ПРАВИЛО,
ПЕРЕДАЕТ УПРАВЛЕНИЕ НА НАЧАЛО ТОЛЬКО ЧТО
ЗАГРУЖЕННОЙ ПРОГРАММЫ - НА НАЧАЛО ЕЕ ГОЛОВНОЙ ПОДПРОГРАММЫ.
$НА ИЗ ТАКОЙ СХЕМЫ СЛЕДУЕТ, В ЧАСТНОСТИ, ЧТО
ОТДЕЛЬНЫЕ ПОДПРОГРАММЫ В ПРОГРАММЕ МОГУТ БЫТЬ НАПИСАНЫ
НА РАЗНЫХ ЯЗЫКАХ ПРОГРАММИРОВАНИЯ, ПРИ УСЛОВИИ
СОБЛЮДЕНИЯ СОГЛАШЕНИЙ О СВЯЗЯХ МЕЖДУ ПОДПРОГРАММАМИ.
СОБЛЮДЕНИЕ ЭТИХ СОГЛАШЕНИЙ ВОЗЛОЖЕНО НА ТРАНСЛЯТОР, ЕСЛИ РЕЧЬ ИДЕТ
О ЯЗЫКЕ ВЫСОКОГО УРОВНЯ, ИЛИ НА ПРОГРАММИСТА, ЕСЛИ РЕЧЬ ИДЕТ ОБ
АССЕМБЛЕРЕ.
$НА ПЕРЕЙДЕМ ТЕПЕРЬ К САМОМУ ЯЗЫКУ АССЕМБЛЕРА.
$НА В НЕКОТОРОМ СМЫСЛЕ ЕГО МОЖНО СЧИТАТЬ ДАЛЬНЕЙШИМ
РАЗВИТИЕМ АВТОКОДА $Б MADLEN-3,$М ЗАРЕКОМЕНДОВАВШЕГО
СЕБЯ КАК УДОБНЫЙ, НАГЛЯДНЫЙ И ЭФФЕКТИВНЫЙ АВТОКОД.
ПРИ РАЗРАБОТКЕ НОВОГО ЯЗЫКА СТАВИЛИСЬ СЛЕДУЮЩИЕ ЗАДАЧИ:
$ПЕРН _-_СОЗДАТЬ АССЕМБЛЕР, ГАРМОНИЧНО УЧИТЫВАЮЩИЙ СПЕЦИФИКУ
НОВОЙ МАШИНЫ;
$ПЕРН _-_СДЕЛАТЬ ПЕРЕХОД НА НОВЫЙ ЯЗЫК ПРОГРАММИРОВАНИЯ
ДЛЯ ЧЕЛОВЕКА, ЗНАЮЩЕГО $Б MADLEN,$М  КАК МОЖНО БОЛЕЕ ПРОСТЫМ,
Т.Е. СОБЛЮСТИ ТРАДИЦИИ, СЛОЖИВШИЕСЯ В ^М^А^D^L^Е^N'Е;
$ПЕРН _-_УСТРАНИТЬ, НАСКОЛЬКО ВОЗМОЖНО, НЕДОСТАТКИ, ПРИСУЩИЕ
^М^А^D^L^Е^N'У.
$НА В СВЯЗИ С ЭТИМ В $Б АССЕМБЛЕРЕ $М ИСПОЛЬЗОВАНО
МАДЛЕНОВСКОЕ РАСПОЛОЖЕНИЕ ПОЛЕЙ КОМАНДЫ В ОПЕРАТОРЕ
(МЕТКА, МОДИФИКАТОР, КОД ОПЕРАЦИИ (^К^О^П), АДРЕСНАЯ
ЧАСТЬ, КОММЕНТАРИЙ) И, ГДЕ ЭТО ВОЗМОЖНО, СОХРАНЕНА
МНЕМОНИКА КОМАНД И ПСЕВДОИНСТРУКЦИЙ.
$НА ВМЕСТЕ С ТЕМ ДЛЯ БОЛЬШЕЙ НАГЛЯДНОСТИ ВВЕДЕНО
ЖЕСТКОЕ РАЗДЕЛЕНИЕ ПОДПРОГРАММЫ НА ГРУППЫ: ВХОДЫ,
ВНЕШНИЕ ИМЕНА,  ПЕРЕМЕННЫЕ, КОНСТАНТЫ,
РАССЫЛКИ ДАННЫХ, КОМАНДЫ. ОПИСАНИЯ ПЕРЕМЕННЫХ И КОНСТАНТ
СЛЕДУЮТ ПО ТЕКСТУ ПОДПРОГРАММЫ ДО КОМАНД,
ХОТЯ И РАСПОЛАГАЮТСЯ В ПАМЯТИ (ПОСЛЕ ЗАГРУЗКИ) ЛИБО ПОСЛЕ КОМАНД
(КОНСТАНТЫ), ЛИБО В СПЕЦИАЛЬНОЙ ОБЛАСТИ ПАМЯТИ (ПЕРЕМЕННЫЕ).
ВВЕДЕН МЕХАНИЗМ СТАТИЧЕСКОГО КОНТРОЛЯ СВЯЗЕЙ МЕЖДУ ПОДПРОГРАММАМИ,
ПОЯВИЛОСЬ ПОНЯТИЕ НЕИНИЦИАЛИЗИРОВАННОЙ ПЕРЕМЕННОЙ.
$НА В $Б АССЕМБЛЕРЕ $М ИСПОЛЬЗОВАНЫ ТРИ СИСТЕМЫ СЧИСЛЕНИЯ:
ШЕСТНАДЦАТИРИЧНАЯ, ДЕСЯТИЧНАЯ И ВОСЬМЕРИЧНАЯ, ПРИЧЕМ ВОСЬМЕРИЧНАЯ
ОСТАВЛЕНА КАК ВСПОМОГАТЕЛЬНАЯ.
$НА КОРЕННЫЕ ИЗМЕНЕНИЯ ПРЕТЕРПЕЛ ОБ'ЕКТНЫЙ МОДУЛЬ ПОДПРОГРАММЫ.
ЕГО СТРУКТУРА ТАКОВА, ЧТО ЗАГРУЗКА ОСУЩЕСТВЛЯЕТСЯ ЗА ОДИН ПРОХОД
ПО ОБ'ЕКТНОМУ МОДУЛЮ, ПРИ ЭТОМ СРАЗУ ОСУЩЕСТВЛЯЕТСЯ НАСТРОЙКА
АДРЕСОВ ПРОГРАММЫ.
$Г 2. ЭЛЕМЕНТАРНЫЕ КОНСТРУКЦИИ
$ГГ
$НА
В АССЕМБЛЕРЕ ИСПОЛЬЗУЮТСЯ СЛЕДУЮЩИЕ ЭЛЕМЕНТАРНЫЕ КОНСТРУКЦИИ:
$ПЕР - <ЧИСЛО>
$ПЕР - <ЧИСЛО СО ЗНАКОМ>
$ПЕР - <ИМЯ>
$ПЕР - <ТЕРМ>
$ПЕР - <ЗНАК ОПЕРАЦИИ>
$ПЕР - <ВЫРАЖЕНИЕ>
$ПЕР - <СТРОКА>
$ПЕР - <СПИСОК>
$НА _
$НА КОНСТРУКЦИЯ
$ПЕРН <ЧИСЛО> ДЕЛИТСЯ НА ТРИ ТИПА:
$ПЕРН <ДЕСЯТИЧНОЕ ЧИСЛО> - ПОСЛЕДОВАТЕЛЬНОСТЬ ДЕСЯТИЧНЫХ ЦИФР.
$ПЕР ПРИМЕРЫ:  28 ,  455 , 4096
$ПЕРН <ШЕСТНАДЦАТИРИЧНОЕ ЧИСЛО> - ПОСЛЕДОВАТЕЛЬНОСТЬ ШЕСТНАДЦАТИРИЧНЫХ
ЦИФР, КОТОРАЯ ПРЕДВАРЯЕТСЯ СИМВОЛОМ "@".
$ПЕР ПРИМЕРЫ:  @7F08 ,  @15
$ПЕРН <ВОСЬМЕРИЧНОЕ ЧИСЛО> - ПОСЛЕДОВАТЕЛЬНОСТЬ ВОСЬМЕРИЧНЫХ
ЦИФР, КОТОРАЯ ПРЕДВАРЯЕТСЯ СИМВОЛОМ "#".
$ПЕР ПРИМЕРЫ: #77 ,  #5252
$ПЕРН <ЧИСЛО СО ЗНАКОМ> - ЧИСЛО, КОТОРОМУ ПРЕДШЕСТВУЕТ ЗНАК
"+" ИЛИ "-". ЗНАК "+" МОЖЕТ БЫТЬ ОПУЩЕН.
$ПЕРН <ИМЯ> - ПОСЛЕДОВАТЕЛЬНОСТЬ ИЗ БУКВ И ЦИФР
ДЛИНОЙ ОТ ОДНОГО ДО ВОСЬМИ СИМВОЛОВ,
НАЧИНАЮЩАЯСЯ С БУКВЫ.
СИМВОЛ $СНП % _ $СНП _ (ПОДЧЕРК) СЧИТАЕТСЯ
БУКВОЙ.
ИМЯ, СОСТОЯЩЕЕ ИЗ ОДНОГО ТОЛЬКО СИМВОЛА "*",
ЯВЛЯЕТСЯ СПЕЦИАЛЬНЫМ ИМЕНЕМ. ЕГО СМЫСЛ ОГОВАРИВАЕТСЯ НИЖЕ.
$ПЕРН <ТЕРМ> - ЧИСЛО, ИМЯ ИЛИ СПЕЦИАЛЬНОЕ ИМЯ "*".
$ССБ %
$ПЕРН <ЗНАК ОПЕРАЦИИ> - СИМВОЛЫ +__-__*__/__>>__<<__&
$ССБ &
$ПЕРН <ВЫРАЖЕНИЕ> - ПОСЛЕДОВАТЕЛЬНОСТЬ ТЕРМОВ,
ОТДЕЛЕННЫХ ДРУГ ОТ ДРУГА ЗНАКАМИ ОПЕРАЦИЙ.
$ПЕР ПРИМЕРЫ:
$ПЕР А-В+1
$А0 -5
$А0 320*N>>10
$ПЕРН <СТРОКА> - ПОСЛЕДОВАТЕЛЬНОСТЬ СИМВОЛОВ.
$ПЕРН <СПИСОК> - ПОСЛЕДОВАТЕЛЬНОСТЬ <ЭЛЕМЕНТОВ СПИСКА>
, ОТДЕЛЕННЫХ ДРУГ ОТ ДРУГА ЗАПЯТЫМИ.  СТРУКТУРА
<ЭЛЕМЕНТА СПИСКА> ОГОВАРИВАЕТСЯ ОСОБО ВО ВСЕХ
СЛУЧАЯХ ИСПОЛЬЗОВАНИЯ КОНСТРУКЦИИ <СПИСОК>.
$НА _
$НА КАЖДОМУ <ИМЕНИ> СТАВИТСЯ В СООТВЕТСТВИЕ НЕКОТОРОЕ
<ЗНАЧЕНИЕ ИМЕНИ>. ВСЕ ЭТИ ЗНАЧЕНИЯ МОЖНО РАЗБИТЬ НА
ТРИ ТИПА:
$ПЕРН _-_^А^Б^С^О^Л^Ю^Т^Н^Ы^Й АДРЕС. ЕГО ЗНАЧЕНИЕ НЕ ЗАВИСИТ
ОТ РАСПОЛОЖЕНИЯ ПОДПРОГРАММЫ В ПАМЯТИ МАШИНЫ.
АБСОЛЮТНЫЙ АДРЕС ЯВНО ОПРЕДЕЛЯЕТСЯ  ПРИ ТРАНСЛЯЦИИ
ПРОГРАММЫ.
$ПЕРН _-_^О^Т^Н^О^С^И^Т^Е^Л^Ь^Н^Ы^Й АДРЕС. ЕГО ЗНАЧЕНИЕМ ЯВЛЯЕТСЯ
$Б СМЕЩЕНИЕ $М
ОТ НАЧАЛА ОБЛАСТИ КОМАНД ИЛИ ОБЛАСТИ ПЕРЕМЕННЫХ ПОДПРОГРАММЫ.
ПОДРОБНО ОБ ЭТИХ ОБЛАСТЯХ ГОВОРИТСЯ В ГЛАВЕ 7. ПОКА ОТМЕТИМ ЛИШЬ,
ЧТО ВЕЛИЧИНА СМЕЩЕНИЯ И САМА ОБЛАСТЬ (КОНСТАНТЫ ИЛИ ПЕРЕМЕННЫЕ)
ОПРЕДЕЛЯЮТСЯ ПРИ ТРАНСЛЯЦИИ, А АДРЕС __Н_А_Ч_А_Л_А__ ОБЛАСТИ
СТАНОВИТСЯ ИЗВЕСТЕН ТОЛЬКО ПРИ ЗАГРУЗКЕ ПРОГРАММЫ В ПАМЯТЬ.
ИНЫМИ СЛОВАМИ, ОТНОСИТЕЛЬНЫЙ АДРЕС - ЭТО СУММА ДВУХ КОМПОНЕНТ:
$Б АДРЕСА НАЧАЛА $М ОБЛАСТИ (ОН СТАНОВИТСЯ ИЗВЕСТЕН ПРИ ЗАГРУЗКЕ)
 _И_ $Б СМЕЩЕНИЯ,$М ВЕЛИЧИНА КОТОРОГО ИЗВЕСТНА УЖЕ ПРИ ТРАНСЛЯЦИИ.
ИЗ ЭТОГО СЛЕДУЕТ, В ЧАСТНОСТИ, ЧТО РАЗНОСТЬ ДВУХ
ОТНОСИТЕЛЬНЫХ АДРЕСОВ
ИЗ ОДНОЙ ОБЛАСТИ ЕСТЬ АБСОЛЮТНЫЙ АДРЕС.
$ПЕРН _-_^В^Н^Е^Ш^Н^И^Й АДРЕС. ЕГО ЗНАЧЕНИЕ
НЕИЗВЕСТНО НА ЭТАПЕ ТРАНСЛЯЦИИ И ОПРЕДЕЛЯЕТСЯ ЛИШЬ
ПРИ ЗАГРУЗКЕ.
$НА _
$НА ЗНАЧЕНИЕМ $Б СПЕЦИАЛЬНОГО ИМЕНИ "*"$М ЯВЛЯЕТСЯ
ОТНОСИТЕЛЬНЫЙ АДРЕС КОМАНДЫ, В КОТОРОЙ ЭТО ИМЯ ИСПОЛЬЗОВАНО.
$НА ВЫРАЖЕНИЕ ВЫЧИСЛЯЕТСЯ СТРОГО СЛЕВА НАПРАВО,
ПРИОРИТЕТ ВСЕХ ОПЕРАЦИЙ ОДИНАКОВ (!).
$НА ДОПУСТИМЫЕ ОПЕРАЦИИ:
$ПЕРН +__СЛОЖЕНИЕ
$ПЕРН -__ВЫЧИТАНИЕ
$ПЕРН *__УМНОЖЕНИЕ
$ПЕРН /__ДЕЛЕНИЕ
$ПЕРН >>_ЛОГИЧЕСКИЙ СДВИГ ВПРАВО.
ЗНАЧЕНИЕ СЛЕДУЮЩЕГО ОПЕРАНДА ОПРЕДЕЛЯЕТ
ВЕЛИЧИНУ СДВИГА
$ПЕРН <<_ЛОГИЧЕСКИЙ СДВИГ ВЛЕВО. ЗНАЧЕНИЕ
СЛЕДУЮЩЕГО ОПЕРАНДА ОПРЕДЕЛЯЕТ ЕЛИЧИНУ СДВИГА.
$ССБ %
$ПЕРН &__ПОРАЗРЯДНОЕ ЛОГИЧЕСКОЕ УМНОЖЕНИЕ.
$ССБ &
$Г 3. СИНТАКСИС ЯЗЫКА. КОМАНДЫ. ВХОДНОЙ ЯЗЫК.
$ГГ
$ПАР 3.1 КОММЕНТАРНЫЕ СТРОКИ.
$ПОД
$НА КОММЕНТАРНАЯ СТРОКА НАЧИНАЕТСЯ СИМВОЛОМ
";", КОТОРОМУ МОГУТ ПРЕДШЕСТВОВАТЬ ОДИН ИЛИ НЕСКОЛЬКО
ПРОБЕЛОВ.
КОММЕНТАРНАЯ СТРОКА ПЕРЕНОСИТСЯ В ЛИСТИНГ ПРОГРАММЫ БЕЗ
КАКИХ-ЛИБО ПРЕОБРАЗОВАНИЙ. СИМВОЛ "*", СЛЕДУЮЩИЙ НЕПОСРЕДСТВЕННО
ЗА ";", ЯВЛЯЕТСЯ ПРИЗНАКОМ ГЛОБАЛЬНОГО КОММЕНТАРИЯ -
ТАКИЕ СТРОКИ ЗАПИСЫВАЮТСЯ В ОБ'ЕКТНЫЙ МОДУЛЬ
ПОДПРОГРАММЫ, В ГРУППУ $Б 'КОММЕНТАРИЙ',$М ЕСЛИ
ОНИ РАСПОЛОЖЕНЫ В ЗАГОЛОВКЕ ПОДПРОГРАММЫ (ДО
ПЕВОГО ОТЛИЧНОГО ОТ ^Е^N^Т^R^У ОПЕРАТОРА).
$НА _
$НА $Б ___ПРИМЕРЫ:
$А0 _
$А0 ;
$А0 ;___________ПОИСК МАКСИМУМА
$А0 ;
$А0 ;*________FUNCTION ISYM(N)
$ПАР 3.2 ОПЕРАТОРЫ.
$ПОД
$НА ОПЕРАТОРЫ НАЧИНАЮТСЯ С СИМВОЛА, ОТЛИЧНОГО ОТ ";".
ПЕРЕЧИСЛИМ ПОЛЯ ОПЕРАТОРА В ПОРЯДКЕ ИХ СЛЕДОВАНИЯ (СЛЕВА НАПРАВО):
$ПЕРН _-_ПОЛЕ МЕТКИ
$ПЕРН _-_ПОЛЕ МОДИФИКАТОРА  (ИНДЕКС-РЕГИСТРА)
$ПЕРН _-_ПОЛЕ КОП
$ПЕРН _-_ПОЛЕ АДРЕСА (АДРЕСНАЯ ЧАСТЬ)
$ПЕРН _-_ПОЛЕ КОММЕНТАРИЯ
$НА _
$НА ПОЛЕ КОММЕНТАРИЯ В ОПЕРАТОРЕ НАЧИНАЕТСЯ СИМВОЛОМ ";".
ЭТО ЕДИНСТВЕННОЕ ПОЛЕ, НАЗНАЧЕНИЕ КОТОРОГО НЕ МЕНЯЕТСЯ В
ЗАВИСИМОСТИ ОТ ТИПА ИНСТРУКЦИИ. ЛЮБОЙ ОПЕРАТОР
МОЖЕТ СОДЕРЖАТЬ КОММЕНТАРИЙ, ПОЭТОМУ В ДАЛЬНЕЙШЕМ В ДАННОМ
ОПИСАНИИ ЯЗЫКА ЭТО ПОЛЕ ОПЕРАТОРА НЕ УПОМИНАЕТСЯ.
$НА _
$НА ОПРЕДЕЛЯЮЩИМ ЯВЛЯЕТСЯ ПОЛЕ КОДА ОПЕРАЦИИ (^К^О^П).
ОНО СОДЕРЖИТ $Б МНЕМОКОД ОПЕРАЦИИ $М (В ДАЛЬНЕЙШЕМ -
$Б МНЕМОКОД).$М
ВСЕ МНЕМОКОДЫ МОЖНО РАЗДЕЛИТЬ НА ДВЕ БОЛЬШИЕ ГРУППЫ -
$Б КОМАНДЫ &И ПСЕДОИНСТРУКЦИИ.$М МНЕМОКОДЫ КОМАНД
ПРИВЕДЕНЫ В ОПИСАНИИ СИСТЕМЫ КОМАНД.
ПСЕВДОИНСТРУКЦИИ ОПИСАНЫ В ГЛАВЕ 4.
$НА НАЗНАЧЕНИЕ ПОЛЕЙ МЕТКИ, МОДИФИКАТОРА И АДРЕСА В ОПЕРАТОРЕ ЗАВИСИТ
ОТ МНЕМОКОДА. КАЖДАЯ ПСЕВДОИНСТРУКЦИЯ ПО-СВОЕМУ ИСПОЛЬЗУЕТ ЭТИ ПОЛЯ,
ПОЭТОМУ ИХ НАЗНАЧЕНИЕ ОПИСАНО В ГЛАВЕ 4 ОТДЕЛЬНО ДЛЯ КАЖДОЙ
ПСЕВДОИНСТРУКЦИИ.
$ПАР 3.3 ПОЛЯ ОПЕРАТОРА - КОМАНДЫ.
$ПОД
$НА ЛЮБАЯ КОМАНДА ^М^К^Б-8601 СОСТОИТ ИЗ ТРЕХ ЧАСТЕЙ:
МОДИФИКАТОРА, КОДА ОПЕРАЦИИ И АДРЕСА. ЗАДАЧА
$Б АССЕМБЛЕРА $М ПРИ ГЕНЕРАЦИИ КОМАНДЫ -
ПОЛУЧЕНИЕ ЗНАЧЕНИЙ МОДИФИКАТОРА, КОП И АДРЕСА И ЗАПИСЬ ИХ В
ОЧЕРЕДНУЮ ПОЛОВИНУ ОЧЕРЕДНОГО КОМАНДНОГО СЛОВА
ОБ'ЕКТНОГО МОДУЛЯ ТРАНСЛИРУЕМОЙ ПОДПРОГРАММЫ.
$ПАР 3.3.1 ПОЛЕ МЕТКИ.
$НА ЛЮБАЯ КОМАНДА ПОДПРОГРАММЫ МОЖЕТ БЫТЬ
ПОМЕЧЕНА. ЭТО ОЗНАЧАЕТ, ВО-ПЕРВЫХ, ЧТО ТРАНСЛЯТОР ПОМЕЩАЕТ
ЕЕ В ЛЕВУЮ ПОЛОВИНУ КОМАНДНОГО СЛОВА И
СНАБЖАЕТ ЭТО СЛОВО ПРИЗНАКОМ РАЗРЕШЕНИЯ ПЕРЕДАЧИ
УПРАВЛЕНИЯ НА НЕГО (В ТЕГЕ), И ВО-ВТОРЫХ - ЧТО
АДРЕСУ ДАННОЙ КОМАНДЫ СТАВИТСЯ В СООТВЕТСТВИЕ
НЕКОТОРОЕ ИМЯ ДЛЯ ССЫЛКИ НА НЕЕ.
$НА
ПОЛЕ МЕТКИ МОЖЕТ БЫТЬ ПУСТЫМ - ЭТО ОЗНАЧАЕТ, ЧТО НА ДАННУЮ
КОМАНДУ  УПРАВЛЕНИЕ МОЖЕТ
БЫТЬ ПЕРЕДАНО ТОЛЬКО "СВЕРХУ", ОТ ПРЕДЫДУЩЕЙ КОМАНДЫ.
ЕСЛИ ПОЛЕ МЕТКИ НЕ ПУСТО, ТО ОНО ОБЯЗАТЕЛЬНО СОДЕРЖИТ
ПРИЗНАК ПОМЕЧЕННОСТИ КОМАНДЫ - СИМВОЛ ":".
$НА ПЕРЕД ДВОЕТОЧИЕМ В ПОЛЕ МЕТКИ МОЖЕТ БЫТЬ УКАЗАНО ИМЯ,
НАЗЫВАЕМОЕ В ДАЛЬНЕЙШЕМ <МЕТКОЙ КОМАНДЫ> ИЛИ ПРОСТО
<МЕТКОЙ>. ЗНАЧЕНИЕМ МЕТКИ ЯВЛЯЕТСЯ ОТНОСИТЕЛЬНЫЙ АДРЕС
ПОМЕЧЕННОЙ ЕЮ КОМАНДЫ. АССЕМБЛЕР ВСЕГДА ПОМЕЩАЕТ ПОМЕЧЕННУЮ
КОМАНДУ В ЛЕВУЮ ПОЛОВИНУ ОЧЕРЕДНОГО КОМАНДНОГО СЛОВА.
ЕСЛИ ПРИ ЭТОМ ОКАЗЫВАЕТСЯ, ЧТО ПРАВАЯ КОМАНДА ПРЕДЫДУЩЕГО
СЛОВА НЕ СФОРМИРОВАНА - ТУДА ЗАПИСЫВАЕТСЯ КОМАНДА
^U^Т^С С НУЛЕВЫМИ ЗНАЧЕНИЯМИ АДРЕСА И МОДИФИКАТОРА.
$НА МЕТКА КОМАНДЫ МОЖЕТ БЫТЬ ИСПОЛЬЗОВАНА В АДРЕСНОЙ ЧАСТИ
ДРУГИХ КОМАНД ПОДПРОГРАММЫ - КАК ПРАВИЛО, В КАЧЕСТВЕ
АДРЕСА ПЕРЕДАЧИ УПРАВЛЕНИЯ.
$НА В $Б АССЕМБЛЕРЕ $М ДОПУСКАЕТСЯ ОПЕРАТОР С ПУСТЫМИ
ПОЛЯМИ ^К^О^П, МОДИФИКАТОРА И АДРЕСА И НЕПУСТЫМ
ПОЛЕМ МЕТКИ. ТАКОЙ ОПЕРАТОР ПОМЕЧАЕТ СЛЕДУЮЩУЮ
ЗА НИМ КОМАНДУ ЛИБО ПЕРЕМЕННУЮ ИЛИ КОНСТАНТУ,
ТО ЕСТЬ В ЗНАЧИТЕЛЬНОЙ СТЕПЕНИ
ЯВЛЯЕТСЯ АНАЛОГОМ ФОРТРАННОГО $Б CONTINUE.$М
$ПАР 3.3.2 ПОЛЕ МОДИФИКАТОРА.
$ПОД
$НА УЖЕ ИЗ НАЗВАНИЯ ВИДНО, ЧТО
ПОЛЕ МОДИФИКАТОРА СОДЕРЖИТ НОМЕР
МОДИФИКАТОРА (ИНДЕКС-РЕГИСТРА), ИСПОЛЬЗУЕМОГО В ДАННОЙ
КОМАНДЕ.
ЭТОТ НОМЕР МОЖЕТ БЫТЬ ЗАДАН ЛИБО ЧИСЛОМ, ЛИБО ИМЕНЕМ.
ПРИ ЭТОМ ИМЕЮТСЯ СЛЕДУЮЩИЕ ОГРАНИЧЕНИЯ:
$ПЕРН _-_ПОЛЕ МОДИФИКАТОРА В ОПЕРАТОРЕ ИМЕЕТ ДЛИНУ НЕ БОЛЕЕ
ДВУХ СИМВОЛОВ.
$ПЕРН _-_ЧИСЛО ЛИБО ЗНАЧЕНИЕ ИМЕНИ В ПОЛЕ МОДИФИКАТОРА ДОЛЖНО
ЛЕЖАТЬ В ПРЕДЕЛАХ ОТ 0 ДО 15.
$НА ДРУГИМИ СЛОВАМИ, ЕСЛИ В ПОЛЕ МОДИФИКАТОРА УКАЗАНО ЧИСЛО,
ТО ОНО МОЖЕТ БЫТЬ ЛИБО ДЕСЯТИЧНЫМ ОТ 0 ДО 15, ЛИБО
ШЕСТНАДЦАТИРИЧНЫМ ОТ @0 ДО @F, ЛИБО ВОСЬМИРИЧНЫМ ОТ #0 ДО #7.
ЕСЛИ-ЖЕ В ПОЛЕ МОДИФИКАТОРА
УКАЗАНО ИМЯ, ТО САМО ОНО ДОЛЖНО БЫТЬ ОДНО- ИЛИ
ДВУХ-СИМВОЛЬНЫМ, А ЕГО ЗНАЧЕНИЕМ ДОЛЖЕН БЫТЬ АБСОЛЮТНЫЙ АДРЕС
В ДИАПАЗОНЕ ОТ 0 ДО 15.
$НА ПУСТОЕ ПОЛЕ МОДИФИКАТОРА ЭКВИВАЛЕНТНО ЗАДАНИЮ НУЛЕВОГО
ИНДЕКС-РЕГИСТРА.
$ПАР 3.3.3 ПОЛЕ АДРЕСА.
$ПОД
$НА $Б ПОЛЕ АДРЕСА &И&Л&И АДРЕСНАЯ ЧАСТЬ $М ОПЕРАТОРА
СОДЕРЖИТ ОДНУ ИЗ УКАЗАННЫХ НИЖЕ КОНСТРУКЦИЙ, ЗНАЧЕНИЕ
КОТОРОЙ ЗАПИСЫВАЕТСЯ В ПОЛЕ АДРЕСА ГЕНЕРИРУЕМОЙ
КОМАНДЫ. ЭТО ЗНАЧЕНИЕ МЫ БУДЕМ НАЗЫВАЕТЬ ЗНАЧЕНИЕМ
АДРЕСНОЙ ЧАСТИ. КОНСТРУКЦИИ, РАЗРЕШЕННЫЕ В ПОЛЕ АДРЕСА КОМАНДЫ,
ТАКОВЫ:
$ПЕРН _-_^П^У^С^Т^О. У ГЕНЕРИРУЕМОЙ КОМАНДЫ ФОРМИРУЕТСЯ НУЛЕВОЙ
АДРЕС;
$ПЕРН _-_^Ч^И^С^Л^О$Б СО ЗНАКОМ.$М ДОПУСТИМЫЙ ДИАПАЗОН - ОТ
-2**19 ДО +2**19-1 (ОТ -524288 ДО +524287);
$ПЕРН _-_^И^М^Я;
$ПЕРН _-_^В^Ы^Р^А^Ж^Е^Н^И^Е;
$ПЕРН _-_^Л^И^Т^Е^Р^А^Л (СМ. &П.3.4)
$НА ОСОБЫМ СЛУЧАЕМ ЯВЛЯЕТСЯ АДРЕСНАЯ ЧАСТЬ КОМАНД,
АДРЕСУЮЩИХ ЧАСТЬ СЛОВА (ПОЛУСЛОВО, 16-РАЗРЯДНЫЙ ФРАГМЕНТ,
БАЙТ, БИТ). ЛИТЕРАЛЫ В ЭТИХ КОМАНДАХ ЗАПРЕЩЕНЫ.
$НА ПРОБЕЛЫ В АДРЕСНОЙ ЧАСТИ ОПЕРАТОРА ИГНОРИРУЮТСЯ,
ЕСЛИ ОНИ НЕ ВХОДЯТ В ТЕКСТОВУЮ СТРОКУ, ЗАКЛЮЧЕННУЮ В КАВЫЧКИ.
$ПАР 3.3.4 ПРИМЕРЫ ОПЕРАТОРОВ - КОМАНД
$ПОД
$НА В КАЧЕСТВЕ ПРИМЕРА ОПЕРАТОРОВ-КОМАНД ПРИВЕДЕН ФРАГМЕНТ
ЛИСТИНГА ПРОГРАММЫ НА $Б АССЕМБЛЕРЕ.
$НА _
$ВС6 $Б
$К
            14 VТМ   -5      ;СЧ.
   L01     :@D ХТА   Р+5
            14 АТХ   WSS+5
            14 VLM   L01
   ENDL01  :
            М5 VТМ   =I@F000 0000
               ХТА   ="PROGRAM";ИМЯ
               АТХ   NАМЕ
            14 VТМ   ="ASSEMBLER''S"
                   , " TEST'#41'"
               ITS   14      ;ASSEMBLER'S TEST!
$КК_
$ПАР 3.4 ЛИТЕРАЛЫ
$ПОД
$НА КОНСТРУКЦИЯ $Б ЛИТЕРАЛ $М В АДРЕСНОЙ ЧАСТИ КОМАНД
ПОЗВОЛЯЕТ ОПРЕДЕЛЯТЬ КОНСТАНТЫ ПО МЕСТУ
ИХ ИСПОЛЬЗОВАНИЯ В ПРОГРАММЕ. ЛИТЕРАЛ ПО СУТИ
ЯВЛЯЕТСЯ ОПИСАНИЕМ КОНСТАНТЫ. ТРАНСЛЯТОР ПО ЭТОМУ
ОПИСАНИЮ ГЕНЕРИРУЕТ КОНСТАНТУ И ПОМЕЩАЕТ ЕЕ В КОНЕЦ ПОДПРОГРАММЫ,
А ОТНОСИТЕЛЬНЫЙ АДРЕС ЭТОЙ КОНСТАНТЫ ЗАПИСЫВАЕТСЯ В АДРЕСНУЮ ЧАСТЬ
ГЕНЕРИРУЕМОЙ КОМАНДЫ.
$НА ЕСЛИ ЛИТЕРАЛЫ,
УКАЗАННЫЕ В ДВУХ РАЗЛИЧНЫХ КОМАНДАХ,
ПРИВОДЯТ В РЕЗУЛЬТАТЕ ТРАНСЛЯЦИИ К ОДИНАКОВЫМ КОНСТАНТАМ,
ТО ДЛЯ ОПРЕДЕЛЯЕМЫХ ИМИ КОНСТАНТ БУДЕТ ОТВЕДЕНО
ОДНО И ТО ЖЕ МЕСТО В ПАМЯТИ.
$НА ПЕРЕЧИСЛИМ ВОЗМОЖНЫЕ КОНСТРУКЦИИ ЛИТЕРАЛОВ:
$ПЕРН 1) =U<ВЫРАЖЕНИЕ>
$ПЕРН 2) =Н<ШЕСТНАДЦАТИРИЧНОЕ ЧИСЛО>
$ПЕРН 3) =I<ЧИСЛО СО ЗНАКОМ>
$А0 =<ЧИСЛО СО ЗНАКОМ>
$ПЕРН 4)_=R<ВЕЩЕСТВЕННОЕ_ЧИСЛО>_______________(*)
$ПЕРН 5)_=D<ЧИСЛО_ДВОЙНОЙ_ТОЧНОСТИ>___________(*)
$ПЕРН 6) ="<СТРОКА>"
$ПЕРН 7) =Z"<СТРОКА>"
$НА В ПЕРВОМ СЛУЧАЕ ГЕНЕРИРУЕТСЯ ЦЕЛАЯ КОНСТАНТА,
СОДЕРЖАЩАЯ ЗНАЧЕНИЕ ВЫРАЖЕНИЯ (ВЫРАЖЕНИЕ
ДОЛЖНО ИМЕТЬ АБСОЛЮТНОЕ ЗНАЧЕНИЕ).
ВО ВТОРОМ СЛУЧАЕ ГЕНЕРИРУЕТСЯ КОНСТАНТА ТИПА
^Н^Е^Х, В ТРЕТЬЕМ СЛУЧАЕ
ОПРЕДЕЛЯЕТСЯ КОНСТАНТА ТИПА ^I^N^Т, В ЧЕТВЕРТОМ -
^R^Е^А^L, В ПЯТОМ - ^D^R^Е^А^L.
В ШЕСТОМ И СЕДЬМОМ СЛУЧАЯХ ГЕНЕРИРУЮТСЯ ТЕКСТОВЫЕ
КОНСТАНТЫ ТИПА $Б CHAR &И CHARZ $М СООТВЕТСТВЕННО.
ПРИ ЭТОМ ДАЛЕЕ В ТЕКСТЕ ПОДПРОГРАММЫ
МОГУТ СЛЕДОВАТЬ НЕСКОЛЬКО
ПСЕВДОИСТРУКЦИЙ
$А0 _
$А0 $Б _____________,_$М "<СТРОКА>"
$А0 _
СОДЕРЖАЩИХ ПРОДОЛЖЕНИЕ ТЕКСТОВОЙ КОНСТАНТЫ.
$НА _
$НА ПСЕВДОИНСТРУКЦИИ $Б НЕХ, ОСТ, INT, REAL, DREAL, CHAR , CHARZ
$М ОПИСАНЫ В ГЛАВЕ 4.
$НА _
$НА $Б ___________ПРИМЕРЫ:
$А0 _
$А0 ____=H0FF__________________=R1.Е-6
$А0 ____=U_В-С___;LONG_________=D3.14159265
$А0 ____=I-5___________________="MEMORY О''КЕУ'#41'"
$А0 ____=-@150_________________=Z"ОШ. НАБОР!"
$А0 ____=R3.14_________________="ASSEMBLER 1.0"
$ПАР 3.5 ЛОКАЛЬНЫЕ МЕТКИ.
$ПОД
$НА АППАРАТ ЛОКАЛЬНЫХ МЕТОК ДАЕТ
ВОЗМОЖНОСТЬ МНОГОКРАТНО ИСПОЛЬЗОВАТЬ
ОДНО И ТО ЖЕ ИМЯ В КАЧЕСТВЕ МЕТКИ
РАЗЛИЧНЫХ КОМАНД ПОДПРОГРАММЫ, ЧТО
УПРОЩАЕТ РАБОТУ МАКРОГЕНЕРАТОРОВ ИСХОДНОГО
ТЕКСТА И, КРОМЕ ТОГО, ИЗБАВЛЯЕТ ОТ НЕОБХОДИМОСТИ
ВЫДУМЫВАНИЯ УНИКАЛЬНОГО ИМЕНИ МЕТКИ ПО КАЖДОМУ
"МЕЛКОМУ" ПОВОДУ.  ВМЕСТЕ С ТЕМ ЧРЕЗМЕРНОЕ
УВЛЕЧЕНИЕ ЛОКАЛЬНЫМИ МЕТКАМИ МОЖЕТ ПРИВЕСТИ К
ПОТЕРЕ "ЧИТАБЕЛЬНОСТИ" ПРОГРАММ.
$НА $Б ЛОКАЛЬНОЙ $М СЧИТАЕТСЯ ЛЮБАЯ
МЕТКА, НАЧИНАЮЩАЯСЯ С СИМВОЛА $ТАБ1 _ (ПОДЧЕРК).
ЗНАЧЕНИЕМ ЛОКАЛЬНОЙ МЕТКИ ПРИ ПЕРВОМ ЕЕ ИСПОЛЬЗОВАНИИ
ЯВЛЯЕТСЯ АДРЕС ПЕРВОГО ОПИСАНИЯ ЭТОЙ МЕТКИ, ПРИ ВТОРОМ
ИСПОЛЬЗОВАНИИ - АДРЕС ВТОРОГО ОПИСАНИЯ И Т.&Д.
$ПАР 3.6 ВХОДНОЙ ЯЗЫК.
$ПОД
$НА ПОД ВХОДНЫМ ЯЗЫКОМ $Б АССЕМБЛЕРА $М МЫ БУДЕМ ПОНИМАТЬ
НАБОР ПРАВИЛ ОФОРМЛЕНИЯ ИСХОДНОГО ТЕКСТА ПОДПРОГРАММЫ.
$НА ВХОДНОЙ ЯЗЫК $Б АССЕМБЛЕРА $М РАЗРАБОТАН С УЧЕТОМ
НЕОБХОДИМОСТИ ОБЕСПЕЧИТЬ МАКСИМАЛЬНУЮ ЛАКОНИЧНОСТЬ
ИСХОДНОГО ТЕКСТА ПРИ ВЫСОКОЙ СКОРОСТИ СИНТАКСИЧЕСКОГО
АНАЛИЗА ДАЖЕ В УЩЕРБ НАГЛЯДНОСТИ ИСХОДНОГО ТЕКСТА:
НАГЛЯДНОСТЬ ПРОГРАММЫ БУДЕТ ОБЕСПЕЧЕНА В ЕЕ ЛИСТИНГЕ.
$НА НИЖЕ ПРИВОДЯТСЯ ПРАВИЛА, ОПРЕДЕЛЯЮЩИЕ ВХОДНОЙ
ЯЗЫК АССЕМБЛЕРА.
$ПЕРН _-_КАЖДЫЙ ОПЕРАТОР ЗАНИМАЕТ 1-72 ПОЗИЦИИ СТРОКИ
ИСХОДНОГО ТЕКСТА. СТРОКИ-ПРОДОЛЖЕНИЯ ОФОРМЛЯЮТСЯ С ПОМОЩЬЮ
СПЕЦИАЛЬНОЙ ПСЕВДОИНСТРУКЦИИ.
$ПЕРН _-_КОММЕНТАРНАЯ СТРОКА НАЧИНАЕТСЯ С СИМВОЛА ";", ПЕРЕД
КОТОРЫМ МОГУТ БЫТЬ ОДИН ИЛИ НЕСКОЛЬКО ПРОБЕЛОВ.
КОММЕНТАРНАЯ СТРОКА НЕ ЯВЛЯЕТСЯ ОПЕРАТОРОМ.
$ПЕРН _-_ЛЮБОЙ ОПЕРАТОР АССЕМБЛЕРА СОДЕРЖИТ ПЯТЬ ПОЛЕЙ,
КОТОРЫЕ СЛЕДУЮТ ОДНО ЗА ДРУГИМ В ЖЕСТКОЙ ПОСЛЕДОВАТЕЛЬНОСТИ,
СЛЕВА НАПРАВО.
ЕСЛИ КАКОЕ-ЛИБО ПОЛЕ ОПЕРАТОРА ПУСТО, ТО В
ИСХОДНОМ ТЕКСТЕ ОПЕРАТОРА ОНО ПРОСТО НЕ УПОМИНАЕТСЯ.
ПОСЛЕДОВАТЕЛЬНОСТЬ ПОЛЕЙ ОПЕРАТОРА СЛЕДУЮЩАЯ:
$ПЕР _-_ПОЛЕ МЕТКИ
$ПЕР _-_ПОЛЕ МОДИФИКАТОРА
$ПЕР _-_ПОЛЕ КОП
$ПЕР _-_ПОЛЕ АДРЕСА
$ПЕР _-_КОММЕНТАРИЙ
$ПЕР ЕСЛИ ПОЛЕ ^К^О^П ПУСТО, ТО ПОЛЯ МОДИФИКАТОРА И
АДРЕСА ТАКЖЕ ДОЛЖНЫ БЫТЬ ПУСТЫМИ.
$ПЕРН _-_ОПЕРАТОР НАЧИНАЕТСЯ С ПЕРВОЙ ПОЗИЦИИ СТРОКИ
ИСХОДНОГО ТЕКСТА.
В НАЧАЛЕ ЛЮБОГО ПОЛЯ ОПЕРАТОРА МОЖЕТ СЛЕДОВАТЬ ГРУППА
ПРОБЕЛОВ. ЭТИ ПРОБЕЛЫ ИГНОРИРУЮТСЯ ТРАНСЛЯТОРОМ И НЕ
ОКАЗЫВАЮТ ВЛИЯНИЯ НА ВИД ОПЕРАТОРА В ЛИСТИНГЕ (КРОМЕ
ПОЛЯ КОММЕНТАРИЯ).
$ПЕРН _-_НЕПУСТОЕ $Б ПОЛЕ МЕТКИ$М ЗАКАНЧИВАЕТСЯ ДВОЕТОЧИЕМ.
$ПЕРН _-_^П^О^Л^Е $Б МОДИФИКАТОРА $М ЗАНИМАЕТ НЕ БОЛЕЕ ДВУХ СИМВОЛОВ
И ОТДЕЛЯЕТСЯ ОТ ПОЛЯ ^К^О^П ПРОБЕЛОМ.
ЕСЛИ $Б ПОЛЕ МОДИФИКАТОРА $М СОДЕРЖИТ ДЕСЯТИЧНОЕ ЧИСЛО,
ТО ЭТОТ РАЗДЕЛЯЮЩИЙ ПРОБЕЛ МОЖЕТ БЫТЬ ОПУЩЕН.
$ПЕРН _-_^П^О^Л^Е$Б АДРЕСА$М ОТДЕЛЯЕТСЯ ОТ ПОЛЯ ^К^О^П
ПРОБЕЛОМ. ЕСЛИ $Б ПОЛЕ АДРЕСА $М НАЧИНАЕТСЯ С ОДНОГО
ИЗ СИМВОЛОВ
$А0 _
$ССБ %
$А0 +_-_@_#_=_"_(_/_*_
$ССБ &
$А0 ,___ТО ЭТОТ РАЗДЕЛЯЮЩИЙ ПРОБЕЛ МОЖЕТ БЫТЬ ОПУЩЕН.
$ПЕРН _-_^К^О^М^М^Е^Н^Т^А^Р^И^Й НАЧИНАЕТСЯ СИМВОЛОМ ";".
$НА _
$НА В КАЧЕСТВЕ ПРИМЕРА ПРИВЕДЕМ ВХОДНОЙ ТЕКСТ
ФРАГМЕНТА ПРОГРАММЫ, ИСПОЛЬЗОВАННОГО В П 3.3.4:
$А0$Б $ВС5 $К
 
   14VTM-5;СЧ.
   L01:@D ХТА    Р+5
   14АТХ WSS+5
   14 VLM L01
   ENDL01:
   М5 VТМ=I@F000 0000
   ХТА="PROGRAM";ИМЯ
   АТХ NАМЕ
   14VTM="ASSEMBLER''S"
   ," TEST'#41'"
   ITS 14;ASSEMBLER'S TEST!
 
$КК_
$Г 4. ПСЕВДОИНСТРУКЦИИ
$ГГ
$ПАР 4.1 ЗАГОЛОВОК, ВХОДЫ И ВНЕШНИЕ ПОДПРОГРАММЫ.
$ПОД
$НА ИНСТРУКЦИИ
$НА _
$А0 _____<ИМЯ>:__^N^А^М^Е__<ТИП>/<ПАРАМ>
$А0 _
$А0 _____<ИМЯ>:__^Е^N^Т^R^У_<ТИП>/<ПАРАМ>
$А0 _
$А0 _____<ИМЯ>:__^S^U^В^Р__<ТИП>/<ПАРАМ>
$А0 _
$А0 _
$А0 СЛУЖАТ ДЛЯ ОРГАНИЗАЦИИ СВЯЗИ МЕЖДУ ПОДПРОГРАММАМИ.
$НА ЛЮБАЯ ПОДПРОГРАММА НАЧИНАЕТСЯ ИНСТРУКЦИЕЙ
_^N^А^М^Е_._ <ИМЯ>, УКАЗАННОЕ В ПОЛЕ МЕТКИ, ЯВЛЯЕТСЯ
ИМЕНЕМ ЭТОЙ ПОДПРОГРАММЫ ИЛИ, ЧТО ОДНО И ТО ЖЕ,
ИМЕНЕМ ГОЛОВНОГО ВХОДА В НЕЕ.
ИНСТРУКЦИЯ _^N^А^М^Е_ ВСТРЕЧАЕТСЯ В ПОДПРОГРАММЕ РОВНО
ОДИН РАЗ.
$НА _
$НА ИНСТРУКЦИЯ _^Е^N^Т^R^У_ ОБЕСПЕЧИВАЕТ СВЯЗЬ ВНЕШНИХ
ПОДПРОГРАММ С ВНУТРЕННЕЙ МЕТКОЙ ДАННОЙ ПОДПРОГРАММЫ.
<ИМЯ>, УКАЗАННОЕ В ИНСТРУКЦИИ _^Е^N^Т^R^У_,_
ДОЛЖНО ЕЩЕ РАЗ ВСТРЕТИТЬСЯ В ДАННОЙ ПОДПРОГРАММЕ В КАЧЕСТВЕ
МЕТКИ КОМАНДЫ. ЭТА КОМАНДА И ЯВЛЯЕТСЯ ТОЧКОЙ ВХОДА В ПОДПРОГРАММУ
ПО УКАЗАННОМУ <ИМЕНИ>.
$НА _
$НА ИНСТРУКЦИЯ _^S^U^В^Р_
СЛУЖИТ ДЛЯ ОПИСАНИЯ ВНЕШНИХ ПОДПРОГРАММ.
ПОСЛЕ ТАКОГО ОПИСАНИЯ ЗНАЧЕНИЕМ <ИМЕНИ> СТАНОВИТСЯ
АДРЕС ОДНОИМЕННОГО ВХОДА ВО ВНЕШНЕЙ ПОДПРОГРАММЕ
(ОН ОПРЕДЕЛЯЕТСЯ ВО ВРЕМЯ ЗАГРУЗКИ ПРОГРАММЫ).
$НА _
$НА ФРАГМЕНТЫ _<ТИП>_ И _<ПАРАМ>_ В АДРЕСНОЙ ЧАСТИ
ИНСТРУКЦИЙ  $Б  _NАМЕ, ENTRY &И SUBP_$М ОБЕСПЕЧИВАЮТ
СТАТИЧЕСКИЙ КОНТРОЛЬ
СВЯЗЕЙ МЕЖДУ ПОДПРОГРАММАМИ В ПРОГРАММЕ И ПОЗВОЛЯЮТ
ДАВАТЬ НЕКОТОРЫЕ УКАЗАНИЯ ЗАГРУЗЧИКУ.
$НА <ТИП> - ЭТО ДВА СИМВОЛА, ОПРЕДЕЛЯЮЩИЕ ТИП
ПРОГРАММНОГО ИНТЕРФЕЙСА $Б (SUBROUTINE, FUNCTION $М И Т.&П).
$М
ПОДРОБНО ВОЗМОЖНЫЕ ТИПЫ ПРОГРАММНЫХ ИНТЕРФЕЙСОВ
ОПИСЫВАЮТСЯ В ГЛАВЕ 8.
$НА <ПАРАМ> - ФРАГМЕНТ, ОПРЕДЕЛЯЮЩИЙ КОЛИЧЕСТВО
ПАРАМЕТРОВ ПОДПРОГРАММЫ (ВХОДА).
МОЖЕТ ИМЕТЬ ОДНУ ИЗ СЛЕДУЮЩИХ СТРУКТУР:
$ПЕРН <ПУСТО> - ПОДПРОГРАММА (ВХОД) БЕЗ
ПАРАМЕТРОВ.  В ЭТОМ СЛУЧАЕ СИМВОЛ "/"
МОЖЕТ БЫТЬ ОПУЩЕН.
$ПЕРН <ЧИСЛО> - ЧИСЛО ЗАДАЕТ КОЛИЧЕСТВО
ЗАПИСЕЙ В МАГАЗИН, ВЫПОЛНЯЕМЫХ ПРИ ПЕРЕДАЧЕ ФАКТИЧЕСКИХ
ПАРАМЕТРОВ ПОДПРОГРАММЫ. ОБЫЧНО РАВНЯЕТСЯ КОЛИЧЕСТВУ
ПАРАМЕТРОВ (СМ. &П.8.1).
МОЖЕТ ПРИНИМАТЬ ЗНАЧЕНИЯ ОТ 0 ДО 254.
$ПЕРН *_______- ПОДПРОГРАММА (ВХОД) С ПЕРЕМЕННЫМ ЧИСЛОМ
ПАРАМЕТРОВ.
$НА _$Б $К
 
            ПРИМЕРЫ:
            --------
 
  PROGRAM :  NАМЕ  МР      ;ГОЛОВНАЯ ПРОГРАММА
  MULT    :  ENTRY SР/3    ;SUBROUTINE MULT(А,В,С)
  DCOS    :  SUBP  DF/1    ;DOUBLE PRECISION
                            FUNCTION DCOS(R)
  МАХ     :  NАМЕ  SР/*
 
$КК_
$ПАР 4.2 ОПИСАНИЯ _COMMON - БЛОКОВ.
$ПОД
$НА ^С^О^М^М^О^N-БЛОК - ЭТО ОБЩАЯ ДЛЯ НЕСКОЛЬКИХ
ПОДПРОГРАММ ОБЛАСТЬ ПАМЯТИ ПЕРЕМЕННЫХ. ДЛЯ ОПИСАНИЯ
^С^О^М^М^О^N-БЛОКА СЛУЖАТ ИНСТРУКЦИИ
$А0 _
$А0 _____<ИМЯ>:__^L^С^В__<^В-СПИСОК>
$А0 _
$А0 _____<ИМЯ>:__^Р^С^В__<^В-СПИСОК>
$А0 _
$А0 _____<ИМЯ>:__^С^С^В__<^В-СПИСОК>
$А0 _
$НА _
$НА ИНСТРУКЦИИ  _^L^С^В_ И _^Р^С^В_ РАЗЛИЧАЮТСЯ ТОЛЬКО
СПОСОБОМ
РАЗМЕЩЕНИЯ В ПАМЯТИ: ПРИ ИСПОЛЬЗОВАНИИ ИНСТРУКЦИИ ^Р^С^В
^С^О^М^М^О^N-БЛОК РАЗМЕЩАЕТСЯ С НАЧАЛА ЛИСТА ПАМЯТИ, А ПРИ
ИСПОЛЬЗОВАНИИ ИНСТРУКЦИИ ^L^С^В - С ПРОИЗВОЛЬНОЙ ЯЧЕЙКИ
ПАМЯТИ.
$НА ИНСТРУКЦИЯ ^С^С^В ОПИСЫВАЕТ КОНСТАНТНЫЙ
^С^О^М^М^О^N-БЛОК. ОНА АНАЛОГИЧНА ИНСТРУКЦИИ
LСВ, НО ОПИСЫВАЕМЫЙ ЕЮ БЛОК РАЗМЕЩАЕТСЯ В ОБЛАСТИ
КОНСТАНТ, БЛАГОДАРЯ ЧЕМУ ЗАПИСЬ В НЕГО ВО ВРЕМЯ
РАБОТЫ ПРОГРАММЫ БЛОКИРОВАНА.
СОДЕРЖИМОЕ КОНСТАНТНОГО ^С^О^М^М^О^N-БЛОКА МОЖЕТ БЫТЬ
СФОРМИРОВАНО ЛИБО РАССЫЛКОЙ ДАННЫХ, ЛИБО СООТВЕТСТВУЮЩЕЙ
ПОДПРОГРАММОЙ $Б BLOCK DАТА $М (СМ.&ГЛ.5).
$НА _ $Б
$К
             ПРИМЕРЫ:
             -------
 
  А       :  LСВ  (256)     ;COMMON/А/А(256),LD(3),Х
                , LD(3),Х
  PAGE    :  РСВ  (1024)
  В       :  РСВ
 
$КК_
$ПАР 4.3 ФОРМИРОВАНИЕ ПЕРЕМЕННЫХ И КОНСТАНТ.
$ПОД
$НА ДЛЯ ФОРМИРОВАНИЯ КОНСТАНТ И НАЧАЛЬНЫХ ЗНАЧЕНИЙ
ПЕРЕМЕННЫХ ИСПОЛЬЗУЮТСЯ ИНСТРУКЦИИ $А0
$Б $К
  НЕХ, INT, INTH, INTQ, INTB, REAL, DREAL,
  CHAR, CHARZ.
 
$КК_
$НА ЛЮБАЯ ИЗ ЭТИХ ИНСТРУКЦИЙ ФОРМИРУЕТ ОДНО ИЛИ
НЕСКОЛЬКО МАШИННЫХ СЛОВ.
АДРЕСНАЯ ЧАСТЬ ПЕРЕЧИСЛЕННЫХ ИНСТРУКЦИЙ, КРОМЕ
$Б CHAR &И CHARZ,$М ПРЕДСТАВЛЯЕТ СОБОЙ СПИСОК,
КАЖДЫЙ ЭЛЕМЕНТ КОТОРОГО  ОПРЕДЕЛЯЕТ ОЧЕРЕДНОЙ
ФРАГМЕНТ, ФОРМИРУЕМЫЙ ИНСТРУКЦИЕЙ. В ЗАВИСИМОСТИ
ОТ МНЕМОКОДА КАЖДЫЙ ТАКОЙ ФРАГМЕНТ ОПИСЫВАЕТ
ЛИБО ОДНО МАШИННОЕ СЛОВО $Б (НЕХ, INT, REAL)$М ,
ЛИБО ЧАСТЬ СЛОВА $Б   (INTH, INTQ, INTB),$М
ЛИБО ДВА СЛОВА ($Б DREAL $М ).
СЛОВА (ЧАСТИ СЛОВ), СФОРМИРОВАННЫЕ ПО ЭТИМ ФРАГМЕНТАМ,
РАСПОЛАГАЮТСЯ В ПАМЯТИ В ПОРЯДКЕ ВОЗРАСТАНИЯ АДРЕСОВ.
$НА ЕСЛИ СПИСОК НЕ УМЕЩАЕТСЯ В ОДНОЙ СТРОКЕ,
ОН МОЖЕТ БЫТЬ ПРОДОЛЖЕН НА СЛЕДУЮЩИХ СТРОКАХ.
 СТРОКА СЧИТАЕТСЯ ПРОДОЛЖЕНИЕМ ПРЕДЫДУЩЕЙ
ИНСТРУКЦИИ, ЕСЛИ ПЕРВЫЙ ОТЛИЧНЫЙ ОТ ПРОБЕЛА СИМВОЛ
В НЕЙ - ЗАПЯТАЯ.
$НА В ПОЛЕ МЕТКИ ВСЕХ ЭТИХ ИНСТРУКЦИЙ МОЖЕТ БЫТЬ УКАЗАНО
$Б ИМЯ,$М НАЗЫВАЕМОЕ В ДАЛЬНЕЙШЕМ $Б МЕТКОЙ ПЕРЕМЕННОЙ &И&Л&И
МЕТКОЙ КОНСТАНТЫ. ЗНАЧЕНИЕМ ЭТОГО $Б ИМЕНИ $М ЯВЛЯЕТСЯ ОТНОСИТЕЛЬНЫЙ
АДРЕС СЛОВА, ФОРМИРУЕМОГО ДАННОЙ ИНСТРУКЦИЕЙ.
ЕСЛИ ОДНА ИНСТРУКЦИЯ ФОРМИРУЕТ НЕСКОЛЬКО СЛОВ,
ТО ЗНАЧЕНИЕМ $Б ИМЕНИ $М ЯВЛЯЕТСЯ
ОТНОСИТЕЛЬНЫЙ АДРЕС ПЕРВОГО ФОРМИРУЕМОГО СЛОВА.
$ПАР $Ц ИНСТРУКЦИЯ __Н_Е_Х_.
$ПОД
$НА _ИНСТРУКЦИЯ ^Н^Е^Х ФОРМИРУЕТ 64-РАЗРЯДНОЕ
СЛОВО, ЗАДАННОЕ ШЕСТНАЦАТИРИЧНЫМИ ЦИФРАМИ, НАЧИНАЯ СО
СТАРШИХ ЕГО РАЗРЯДОВ.
ОБЩИЙ ВИД ИНСТРУКЦИИ:
$А0 _
$А0 ____<ИМЯ>:__^Н^Е^Х__<СПИСОК>
$А0
$НА ГДЕ ЭЛЕМЕНТ СПИСКА - ШЕСТНАДЦАТИРИЧНОЕ ЧИСЛО.
СИМВОЛ "@", ПРЕДВАРЯЮЩИЙ ШЕСТНАДЦАТИРИЧНОЕ ЧИСЛО,
В ИНСТРУКЦИИ ^Н^Е^Х ДОЛЖЕН БЫТЬ ОПУЩЕН.
$НА КАЖДАЯ ШЕСТНАДЦАТИРИЧНАЯ ЦИФРА, НАЧИНАЯ СЛЕВА,
В ЭЛЕМЕНТЕ СПИСКА, ОПРЕДЕЛЯЕТ ЗНАЧЕНИЕ
ОЧЕРЕДНОЙ ТЕТРАДЫ РАЗРЯДОВ В СЛОВЕ. ПЕРВАЯ ЦИФРА
ОПРЕДЕЛЯЕТ ЗНАЧЕНИЕ 64:61 РАЗРЯДОВ, ВТОРАЯ - 60:57, $ТАБ3 . ,
&ШЕСТНАДЦАТАЯ - 04:01 РАЗРЯДОВ. ЕСЛИ ЧИСЛО ШЕСТНАДЦАТИРИЧНЫХ
ЦИФР В АДРЕСНОЙ ЧАСТИ ИНСТРУКЦИИ ^Н^Е^Х МЕНЬШЕ ШЕСТНАДЦАТИ,
ТО НЕОПРЕДЕЛЕННАЯ ЧАСТЬ СЛОВА (СПРАВА) ЗАПОЛНЯЕТСЯ
НУЛЕВЫМИ ТЕТРАДАМИ.
$НА ИНЫМИ СЛОВАМИ, ИНСТРУКЦИЯ ^Н^Е^Х ТРАКТУЕТ МАШИННОЕ СЛОВО
КАК ПОСЛЕДОВАТЕЛЬНОСТЬ 4-РАЗРЯДНЫХ ФРАГМЕНТОВ (ТЕТРАД), А
КАЖДФЙ ЭЛЕМЕНТ СПИСКА В
АДРЕСНОЙ ЧАСТИ ИНСТРУКЦИИ СОДЕРЖИТ ПОСЛЕДОВАТЕЛЬНОСТЬ
ШЕСТНАДЦАТИРИЧНЫХ ЦИФР, ОПРЕДЕЛЯЮЩУЮ ЗНАЧЕНИЯ ЭТИХ ТЕТРАД
НАЧИНАЯ СО СТАРШИХ РАЗРЯДОВ СЛОВА.
$НА _
$Б $ВС5 $К
 
              ПРИМЕРЫ:
              -------
 
   А       :  НЕХ   0F1
              НЕХ   0F10 0000 0000 0000
              НЕХ   0000 00С1 8,55,0
              НЕХ   000F FFFF 000F FFFF
                  , 0FF0 0000 0FF
 
$КК_
$НА ПЕРВЫЕ ДВЕ ИНСТРУКЦИИ ФОРМИРУЮТ ОДИНАКОВЫЕ МАШИННЫЕ СЛОВА.
$ПАР $Ц ИНСТРУКЦИЯ __I_N_Т_.
$ПОД
$НА ЭТА ИНСТРУКЦИЯ ФОРМИРУЕТ ЦЕЛОЕ 64-РАЗРЯДНОЕ ЧИСЛО СО ЗНАКОМ.
СТАРШИЙ (64-Й) РАЗРЯД ЯВЛЯЕТСЯ ЗНАКОВЫМ, ОТРИЦАТЕЛЬНЫЕ
ЧИСЛА ПРЕДСТАВЛЯЮТСЯ В ДОПОЛНИТЕЛЬНОМ КОДЕ.
ОБЩИЙ ВИД ИНСТРУКЦИИ:
$А0 _
$А0 _____<ИМЯ>:__^I^N^Т__<СПИСОК>
$А0 _
$НА ГДЕ ЭЛЕМЕНТОМ СПИСКА ЯВЛЯЕТСЯ ЧИСЛО СО ЗНАКОМ
 В ДИАПАЗОНЕ
ОТ -2**63 ДО 2**63-1.
$НА _$ВС5 $Б $К
 
         ПРИМЕРЫ:
 
  LМ2     :  INT   815,999,0
             INT   -#8
             INT   @FF
                 , @FFF
 
$КК_
$ПАР $Ц ИНСТРУКЦИИ __I_N_Т_Н_,__I_N_Т_Q_,__I_N_Т_В_.
$ПОД
$НА ЭТА ГРУППА ИНСТРУКЦИЙ ПРЕДСТАВЛЯЕТ КАЖДОЕ 64-РАЗРЯДНОЕ СЛОВО
КАК ПОСЛЕДОВАТЕЛЬНОСТЬ ФРАГМЕНТОВ: 32-РАЗРЯДНЫХ
(^I^N^Т^Н), 16-РАЗРЯДНЫХ (^I^N^Т^Q) ИЛИ 8-РАЗРЯДНЫХ (^I^N^Т^В)
 И ПОЗВОЛЯЮТ СФОРМИРОВАТЬ ЦЕЛОЕ ЧИСЛО СО ЗНАКОМ В КАЖДОМ ТАКОМ
ФРАГМЕНТЕ.
АДРЕСНАЯ ЧАСТЬ  ЭТИХ ИНСТРУКЦИЙ ПРЕДСТАВЛЯЕТ СОБОЙ СПИСОК,
СОДЕРЖАЩИЙ ВЫРАЖЕНИЯ,
КАЖДОЕ ИЗ КОТОРЫХ ОПРЕДЕЛЯЕТ ЗНАЧЕНИЕ ОЧЕРЕДНОГО (СЛЕВА НАПРАВО)
ФРАГМЕНТА 64-РАЗРЯДНОГО СЛОВА.
$НА
ВЫРАЖЕНИЯ В ОПЕРАТОРАХ ^I^N^Т^Q И ^I^N^Т^В ДОЛЖНЫ ИМЕТЬ
АБСОЛЮТНОЕ ЗНАЧЕНИЕ.
$НА
ОПЕРАТОР ^I^N^Т^Н МОЖЕТ ИСПОЛЬЗОВАТЬСЯ ДЛЯ
ФОРМИРОВАНИЯ АДРЕСНЫХ ССЫЛОК НА РАЗЛИЧНЫЕ ОБ'ЕКТЫ
ПРОГРАММЫ.
$НА
ОБЩИЙ ВИД ИНСТРУКЦИЙ:
$А0 _
$А0 _
$А0 _____<ИМЯ>:__^I^N^Т^Н__<СПИСОК>
$А0 _
$А0 _____<ИМЯ>:__^I^N^Т^Q__<СПИСОК>
$А0 _
$А0 _____<ИМЯ>:__^I^N^Т^В__<СПИСОК>
$А0 _
$ВС5  $НА ДИАПАЗОН ЗНАЧЕНИЙ ЧИСЕЛ (ВЫРАЖЕНИЙ) В СПИСКЕ:
$К
 
   INTH :   ОТ  -2**31  ДО  2**31-1
   INTQ :   ОТ  -2**15  ДО  2**16-1  (!)
   INTB :   ОТ  -2**7   ДО  2**8-1   (!)
 
$КК_
$НА ВНИМАНИЕ! В ИНСТРУКЦИЯХ ^I^N^Т^Q И ^I^N^Т^В
СТАРШИЙ РАЗРЯД 16-РАЗРЯДНОГО ИЛИ 8-РАЗРЯДНОГО
ФРАГМЕНТА МОЖЕТ БЫТЬ КАК ЗНАКОВЫМ, ТАК И
ИНФОРМАЦИОННЫМ, Т.&Е. &СТАРШИМ РАЗРЯДОМ ШЕСТНАДЦАТИ-
ИЛИ ВОСЬМИ-РАЗРЯДНОГО ЧИСЛА БЕЗ ЗНАКА.
$НА _$ВС6 $Б $К
 
              ПРИМЕРЫ:
              -------
 
   А       :  INTH  335,-2
                  , 0,IDENT
              INTQ  ,,-#2000,@FFFF
   IDENT   :  INTB  8,220
   AUTOR   :  INTB  -28,#101,66,121
                  , 100     ;ПРОДОЛЖЕНИЕ
                  , @4F,#102;КОНЕЦ INTB
   AUTEND  :  INTB  ,,,,,,-1,255
 
$КК_
$ПАР $Ц ИНСТРУКЦИЯ __R_Е_А_L_.____(*)
$ПОД
$НА ИНСТРУКЦИЯ _^R^Е^А^L_ ПОЗВОЛЯЕТ СФОРМИРОВАТЬ
64-РАЗРЯДНЫЕ СЛОВА, КАЖДОЕ ИЗ КОТОРЫХ
СОДЕРЖИТ НОРМАЛИЗОВАННОЕ ИЛИ
НЕНОРМАЛИЗОВАННОЕ ВЕЩЕСТВЕННОЕ ЧИСЛО С ПОРЯДКОМ.
$НА ОБЩИЙ ВИД ИНСТРУКЦИИ:
$А0 _
$А0 _____<ИМЯ>:__^R^Е^А^L__<СПИСОК>
$А0 _
$НА ЭЛЕМЕНТОМ СПИСКА ЯВЛЯЕТСЯ
ВЕЩЕСТВЕННОЕ ЧИСЛО. ОНО СОСТОИТ ИЗ ЗНАКА, ЦЕЛОЙ ЧАСТИ,
ДРОБНОЙ ЧАСТИ, ПОКАЗАТЕЛЯ СТЕПЕНИ, УКАЗАТЕЛЯ НОРМАЛИЗАЦИИ.
ЛЮБАЯ ИЗ ЭТИХ ПЯТИ ЧАСТЕЙ МОЖЕТ БЫТЬ ОПУЩЕНА.
$НА ЦЕЛАЯ ЧАСТЬ - ЭТО ДЕСЯТИЧНОЕ ЧИСЛО БЕЗ ЗНАКА.
ДРОБНАЯ ЧАСТЬ - ЭТО ДЕСЯТИЧНОЕ ЧИСЛО БЕЗ ЗНАКА, ПЕРЕД
КОТОРЫМ СТОИТ ТОЧКА. ЕСЛИ КАКАЯ-ЛИБО ИЗ ЭТИХ ЧАСТЕЙ
ОПУЩЕНА - ОНА ПОЛАГАЕТСЯ РАВНОЙ НУЛЮ.
$НА ПОКАЗАТЕЛЬ СТЕПЕНИ
НАЧИНАЕТСЯ СИМВОЛОМ "^Е", ЗА КОТОРЫМ СЛЕДУЕТ
ДЕСЯТИЧНОЕ ЧИСЛО СО ЗНАКОМ, ОПРЕДЕЛЯЮЩЕЕ ПОКАЗАТЕЛЬ
СТЕПЕНИ ЧИСЛА 10, НА КОТОРОЕ УМНОЖАЕТСЯ ФОРМИРУЕМОЕ
ВЕЩЕСТВЕННОЕ ЧИСЛО.
$НА УКАЗАТЕЛЬ НОРМАЛИЗАЦИИ - ЭТО СИМВОЛ "^Р",
ЗА КОТОРЫМ СЛЕДУЕТ ДЕСЯТИЧНОЕ ЧИСЛО СО ЗНАКОМ,
ПОКАЗЫВАЮЩЕЕ, НА СКОЛЬКО БИТ ^В^Л^Е^В^О ОТ
НАЧАЛА СЛОВА (ОТ МЛАДШИХ РАЗРЯДОВ)
ДОЛЖНА БЫТЬ СДВИНУТА ПОЗИЦИЯ ДЕСЯТИЧНОЙ ТОЧКИ.
ТАКИМ СПОСОБОМ ГЕНЕРИРУЮТСЯ НЕНОРМАЛИЗОВАННЫЕ
ЧИСЛА. ЕСЛИ УКАЗАТЕЛЬ НОРМАЛИЗАЦИИ
ОТСУТСТВУЕТ - ФОРМИРУЕТСЯ НОРМАЛИЗОВАННОЕ ЧИСЛО.
$НА _ $ВС5 $Б $К
 
           ПРИМЕРЫ:
           -------
 
           REAL  3.1415
           REAL  1Е6Р0
           REAL  3.8Е-1809
 
$КК_
$ПАР $Ц ИНСТРУКЦИЯ __D_R_Е_А_L_.____(*)
$ПОД
$НА ^D^R^Е^А^L ПОЗВОЛЯЕТ ФОРМИРОВАТЬ 128-РАЗРЯДНЫЕ
ВЕЩЕСТВЕННЫЕ ЧИСЛА ДВОЙНОЙ ТОЧНОСТИ.
$НА ОБЩИЙ ВИД ИНСТРУКЦИИ:
$А0 _
$А0 _____<ИМЯ>:__^D^R^Е^А^L_<СПИСОК>
$А0 _
$НА ГДЕ ЭЛЕМЕНТОМ СПИСКА ЯВЛЯЕТСЯ ВЕЩЕСТВЕННОЕ ЧИСЛО.
СТРУКТУРА ВЕЩЕСТВЕННОГО ЧИСЛА ОПИСАНА ВЫШЕ.
$НА ПО КАЖДОМУ ЭЛЕМЕНТУ СПИСКА
ФОРМИРУЕТСЯ ВЕЛИЧИНА, ЗАНИМАЮЩАЯ ДВА 64-РАЗРЯДНЫХ
СЛОВА.
$НА _$ВС5 $Б  $К
 
              ПРИМЕРЫ:
              -------
 
   А       :  DREAL 3.14159265
              DREAL 1Е9Р-51
 
$КК_
$ПАР $Ц ИНСТРУКЦИИ __С_Н_А_R_,__С_Н_А_R_Z_.
$ПОД
$НА ЭТИ ИНСТРУКЦИИ ФОРМИРУЮТ ТЕКСТОВУЮ СТРОКУ,
РАЗМЕЩАЯ ЕЕ В ПОСЛЕДОВАТЕЛЬНЫХ ЯЧЕЙКАХ ПАМЯТИ.
РАЗЛИЧАЮТСЯ ОНИ ТОЛЬКО СПОСОБОМ ФОРМИРОВАНИЯ
ПОСЛЕДНЕЙ ЯЧЕЙКИ ЭТОЙ ТЕКСТОВОЙ СТРОКИ:
ИНСТРУКЦИЯ ^С^Н^А^R ДОПОЛНЯЕТ ЕЕ ДО КОНЦА ПРОБЕЛАМИ,
А ИНСТРУКЦИЯ ^С^Н^А^R^Z - НУЛЕВЫМИ БАЙТАМИ И, КРОМЕ ТОГО,
ОБЕСПЕЧИВАЕТ НАЛИЧИЕ ХОТЯ-БЫ ОДНОГО НУЛЕВОГО БАЙТА В КОНЦЕ
ТЕКСТОВОЙ СТРОКИ.
$НА ОБЩИЙ ВИД ИНСТРУКЦИЙ:
$А0 _
$А0 _____<ИМЯ>:__^С^Н^А^R__"<СТРОКА>"
$А0 _____<ИМЯ>:__^С^Н^А^R^Z_"<СТРОКА>"
$А0 _
$НА ЕСЛИ ТЕКСТОВАЯ СТРОКА НЕ ПОМЕЩАЕТСЯ В ОДНОМ ОПЕРАТОРЕ -
ОНА МОЖЕТ БЫТЬ ПРОДОЛЖЕНА С ПОМОЩЬЮ ОДНОЙ ИЛИ НЕСКОЛЬКИХ
ИНСТРУКЦИЙ
$А0 _
$А0 ________________,__"<СТРОКА>"
$А0 _
$НА
ТАБЛИЦА КОДИРОВКИ СИМВОЛОВ ПРИВЕДЕНА В [5] (АЛЬТЕРНАТИВНЫЙ
ВАРИАНТ КОДОВОЙ ТАБЛИЦЫ).
ПОСЛЕДОВАТЕЛЬНОСТЬ '<ЧИСЛО>' ФОРМИРУЕТ ОДИН БАЙТ,
СОДЕРЖАЩИЙ ЭТО ЧИСЛО.  ДОПУСКАЕТСЯ КОНСТРУКЦИЯ '<ИМЯ>',
ФОРМИРУЮЩАЯ ОДИН БАЙТ, СОДЕРЖАЩИЙ ЗНАЧЕНИЕ ИМЕНИ.
ОНО ДОЛЖНО ИМЕТЬ АБСОЛЮТНОЕ ЗНАЧЕНИЕ И НЕ ПРЕВЫШАТЬ 2**8-1.
САМ СИМВОЛ ' ИЛИ " КОДИРУЕТСЯ
ПОСЛЕДОВАТЕЛЬНОСТЬЮ ИЗ ДВУХ ТАКИХ СИМВОЛОВ ('' ИЛИ ""
СООТВЕТСТВЕННО).
$НА _ $ВС5 $Б $К
 
             ПРИМЕРЫ:
             -------
 
  STRING  :  CHAR  "RETRO-86"
  ТХ2     :  CHARZ "END OF PROGRAM"
                 , " О''КЕУ'#41'";О'КЕУ!
  ERASE   :  EQU   31
  ТН      :  CHARZ "'ERASE'HELLO!"
 
$КК_
$ПАР 4.4 ЭКВИВАЛЕНТНОСТИ.
$ПОД
$НА ЭКВИВАЛЕНТНОСТЬ ПОЗВОЛЯЕТ ПРИПИСАТЬ ИМЕНИ
НЕКОТОРОЕ ЗНАЧЕНИЕ.
ИНСТРУКЦИЯ
$А0 _
$А0 _____<ИМЯ>:__^Е^Q^U___<ВЫРАЖЕНИЕ>
$А0 _
$А0 ПРИПИСЫВАЕТ ИМЕНИ ЗНАЧЕНИЕ ВЫРАЖЕНИЯ (ПО МОДУЛЮ 2**32).
$НА ОПЕРАТОР КОСВЕННОЙ ЭКВИВАЛЕНТНОСТИ
$А0 _
$А0 _____<ИМЯ>:__^W^Е^Q___<ВЫРАЖЕНИЕ>______(*)
$А0 _
$А0 ИСПОЛЬЗУЕТ ЗНАЧЕНИЕ ВЫРАЖЕНИЯ КАК АДРЕС ЯЧЕЙКИ ПАМЯТИ,
ЗНАЧЕНИЕ 32:01 РАЗРЯДОВ КОТОРОЙ В МОМЕНТ ЗАГРУЗКИ ПОДПРОГРАММЫ
ПРИСВАИВАЕТСЯ ИМЕНИ, УКАЗАННОМУ В ЭТОМ ОПЕРАТОРЕ.
$НА В АССЕМБЛЕРЕ ИМЕЮТСЯ ПЕРЕОПРЕДЕЛЯЕМЫЕ ИМЕНА.
ОНИ ДОЛЖНЫ БЫТЬ ВПЕРВЫЕ ОПРЕДЕЛЕНЫ ИНСТРУКЦИЕЙ
$А0 _
$А0 _____<ИМЯ>:__^R^Е^Q^U__<ВЫРАЖЕНИЕ>
$А0 _
$НА В ДАЛЬНЕЙШЕМ ТАКИЕ ИМЕНА МОГУТ БЫТЬ ПЕРЕОПРЕДЕЛЕНЫ
ИНСТРУКЦИЕЙ
^R^Е^Q^U ЛИБО ИНСТРУКЦИЯМИ ^В^L^О^С^К, ^Е^Q^U.
$ССБ % $ВС5 $НА _ $Б $К
 
 
           ПРИМЕРЫ:
           -------
 
  М5      :  EQU   5
  LTABLE  :  EQU   ETABLE-TABLE
  NСМ     :  WEQ   XNCM
  ЬIR     :  REQU  IR
  BSTR    :  EQU   STR*8
  XSTR    :  EQU   BSTR>>12
  YSTR    :  EQU   BSTR&@FFF
 
 
$КК_ $ССБ &
$ПАР 4.5 РЕЗЕРВИРОВАНИЕ ПАМЯТИ.
$ПОД
$НА ДЛЯ РЕЗЕРВИРОВАНИЯ ПАМЯТИ СЛУЖАТ ИНСТРУКЦИИ
$А0 _
$А0 _____<ИМЯ>:__^В^S^S___<^В-СПИСОК>
$А0 _____<ИМЯ>:__^В^S^S^Z__<^В-СПИСОК>
$А0 _
$НА ОНИ РЕЗЕРВИРУЮТ ГРУППУ ЯЧЕЕК ПАМЯТИ В ОБЛАСТИ ПЕРЕМЕННЫХ
ИЛИ КОНСТАНТ ПОДПРОГРАММЫ.
$НА ИНСТРУКЦИЯ  ^В^S^S РАСПИСЫВАЕТ РЕЗЕРВИРУЕМУЮ ПАМЯТЬ СЛОВАМИ
С ^Т^Е^ГОМ "НЕИНИЦИАЛИЗИРОВАННАЯ ПЕРЕМЕННАЯ" (ЗАПИСЬ РАЗРЕШЕНА,
ЧТЕНИЕ ЗАПРЕЩЕНО), А ИНСТРУКЦИЯ ^В^S^S^Z ЗАПОЛНЯЕТ РЕЗЕРВИРУЕМУЮ
ЕЮ ПАМЯТЬ НУЛЯМИ.
$НА ИМЕНИ, УКАЗАННОМУ В ПОЛЕ МЕТКИ ИНСТРУКЦИЙ ^В^S^S ИЛИ ^В^S^S^Z,
ПРИСВАЕВАЕТСЯ ЗНАЧЕНИЕ, РАВНОЕ ОТНОСИТЕЛЬНОМУ АДРЕСУ ПЕРВОЙ ИЗ
ЗАРЕЗЕРВИРОВАННЫХ ЯЧЕЕК. ИМЯ ЯВЛЯЕТСЯ МЕТКОЙ ЭТОЙ ГРУППЫ ЯЧЕЕК.
ЕСЛИ РЕЗЕРВИРУЕТСЯ 0 ЯЧЕЕК, ТО ИМЕНИ ПРИСВАИВАЕТСЯ ЗНАЧЕНИЕ,
РАВНОЕ ОТНОСИТЕЛЬНОМУ АДРЕСУ СЛЕДУЮЩЕГО СЛОВА В ОБЛАСТИ
ПЕРЕМЕННЫХ ИЛИ КОНСТАНТ. ТАК, В ПОСЛЕДОВАТЕЛЬНОСТИ
ИНСТРУКЦИЙ
$Б
$А0 _
$А0 _____А_______:__BSS
$А0 ________________INT___5
$А0 _ $М
$А0 МЕТКЕ ^А ПРИСВАИВАЕТСЯ ОТНОСИТЕЛЬНЫЙ АДРЕС СЛОВА,
СОДЕРЖАЩЕГО ЦЕЛУЮ ВЕЛИЧИНУ 5.
$НА _ $ВС5 $Б $К
 
 
              ПРИМЕРЫ:
              _______
 
             BSS   SCALE(30),Х,У
                 , Z(5)
  М       :  EQU   45
  N       :  EQU   80
  LDIM    :  EQU   М*N
  DIM     :  BSS   (LDIM)  ;DIMENSION DIM(М,N)
 
 
$КК_  $М
$ПАР 4.6 ИНСТРУКЦИЯ  В_L_О_С_К.
$ПОД
$НА ИНСТРУКЦИЯ ^В^L^О^С^К НЕ ДАЕТ КАКИХ-ЛИБО
ПРИНЦИПИАЛЬНО НОВЫХ ВОЗМОЖНОСТЕЙ, НО В РЯДЕ СЛУЧАЕВ
ПОЗВОЛЯЕТ ОПИСАТЬ ЭКВИВАЛЕНТНОСТИ БОЛЕЕ НАГЛЯДНО
И ЛАКОНИЧНО.
$НА ОДНА ИНСТРУКЦИЯ ОБЩЕГО ВИДА
$А0 _
$А0 _____<^В-ИМЯ>:__^В^L^О^С^К_<^В-СПИСОК>_____________,
$А0 _
$А0 КОТОРАЯ МОЖЕТ ИМЕТЬ СТРОКИ-ПРОДОЛЖЕНИЯ
$А0 _
$А0 ___________________,_<^В-СПИСОК>
$А0 _
$А0 СРАЗУ ОПРЕДЕЛЯЕТ НЕСКОЛЬКО ИМЕН.
$НА СМЫСЛ ИНСТРУКЦИИ ПРОЩЕ ВСЕГО ПОЯСНИТЬ НА ПРИМЕРЕ.
$НА ИНСТРУКЦИЮ
$ВС5 $Б $К
 
     <В-&И&М&Я>:.. BLOCK А,В(12),С
                    , (5),D(15)
 
$КК_ $М
$А0 МОЖНО ЗАМЕНИТЬ СЛЕДУЮЩИМ НАБОРОМ ИНСТРУКЦИЙ:
$А0 $ВС5 $Б $К
 
     А       :   EQU   <В-&И&М&Я>
     В       :   EQU   А+1
     С       :   EQU   В+12
     D       :   EQU   С+6
 
$КК_
$НА ДЛИНА В СКОБКАХ МОЖЕТ ЗАДАВАТЬСЯ
ВЫРАЖЕНИЕМ, ДАЮЩИМ АБСОЛЮТНОЕ ПОЛОЖИТЕЛЬНОЕ
ЗНАЧЕНИЕ.
$НА ^В-ИМЯ МОЖЕТ БЫТЬ КАК ИМЕНЕМ, ТАК И
ЧИСЛОМ СО ЗНАКОМ.
ТАК, ИНСТРУКЦИИ
$А0 _ $Б
$А0 _____#17_____:___BLOCK_А
$А0 _ $М
$А0 СООТВЕТСТВУЕТ ИНСТРУКЦИЯ
$А0 _  $Б
$А0 _____А_______:___EQU___#17
$А0 _  $М
$А0 А ИНСТРУКЦИИ
$А0 _ $Б
$А0 _____WSS_____:___BLOCK_А
$А0 _ $М
$А0 СООТВЕТСТВУЕТ
$А0 _ $Б
$А0 _____А_______:___EQU___WSS
$А0 _
$НА ИМЯ ^W^S^S ДОЛЖНО БЫТЬ ОПРЕДЕЛЕНО ГДЕ-ТО ЕЩЕ В ТЕКСТЕ
ПОДПРОГРАММЫ.
$НА _
$ПАР 4.7 ИНСТРУКЦИИ___С_А_L_L___И___Е_J_М_Р.
$ПОД
$НА ДЛЯ ОБРАЩЕНИЯ К ВНЕШНИМ ПОДПРОГРАММАМ МОГУТ БЫТЬ
ИСПОЛЬЗОВАНЫ ПСЕВДОИНСТРУКЦИИ  $Б CALL &И EJMP. $М
ИНСТРУКЦИЯ
$А0 _
$А0 ____________<IR>_^С^А^L^L__<ИМЯ>.ТИП/ПАРАМ
$А0 _
$А0 ЭКВИВАЛЕНТНА ПАРЕ ИНСТРУКЦИЙ
$А0 _
$А0 _____<ИМЯ>___:___^S^U^В^Р__<ТИП>/<ПАРАМ>
$А0 _
$А0 В НАЧАЛЕ ПОДПРОГРАММЫ  И
$А0 _
$А0 ____________<IR>_^V^J^М___<ИМЯ>
$А0 _
$А0 НА МЕСТЕ ИНСТРУКЦИИ ^С^А^L^L.
$НА ЕСЛИ ПОЛЕ МОДИФИКАТОРА ПУСТО,  ИСПОЛЬЗУЕТСЯ
КОМАНДА
$А0 _
$А0 ______________13_^V^J^М___<ИМЯ>
$А0 _
$НА _
$НА ИНСТРУКЦИЯ
$А0 _
$А0 ____________<IR>_^Е^J^М^Р__<ИМЯ>.<ТИП>/<ПАРАМ>
$А0 _
$А0 ЭКВИВАЛЕНТНА ИНСТРУКЦИЯМ
$А0 _
$А0 _____<ИМЯ>___:___^S^U^В^Р__<ТИП>/<ПАРАМ>
$А0 _
$А0 В НАЧАЛЕ ПОДПРОГРАММЫ   И
$А0 _
$А0 ____________<IR>_^J^М^Р___<ИМЯ>
$А0 _
$А0 НА МЕСТЕ ИНСТРУКЦИИ ^Е^J^М^Р.
$НА ИНСТРУКЦИИ $Б CALL _&И_ EJMP $М МОГУТ БЫТЬ ПОМЕЧЕНЫ,
КАК ОБЫЧНЫЕ КОМАНДЫ.
$НА ОЧЕВИДНО, ЧТО ВО ВСЕХ ИНСТРУКЦИЯХ ^С^А^L^L И ^Е^J^М^Р
С ОДНИМ И ТЕМ-ЖЕ ИМЕНЕМ ФРАГМЕНТЫ <ТИП>/<ПАРАМ> ДОЛЖНЫ СОВПАДАТЬ.
$НА _ $ВС6 $Б $К
 
             ПРИМЕРЫ:
             -------
 
              CALL  MULT.SР/3
              CALL  ОКНО.SР
  RЕТ     :   EJMP  RETURN.JР
  GIVN    :14 CALL  IDTONUS.AS
 
$КК_ $М
 
$Г 5. ФОРМИРОВАНИЕ НАЧАЛЬНОГО СОСТОЯНИЯ COMMON-БЛОКОВ.
$ГГ
$ПАР 5.1 НЕПОСРЕДСТВЕННАЯ РАССЫЛКА ДАННЫХ       (*)
$ПОД
$НА МЕХАНИЗМ РАССЫЛКИ ДАННЫХ ПОЗВОЛЯЕТ
НА ЭТАПЕ ЗАГРУЗКИ ПОДПРОГРАММЫ СФОРМИРОВАТЬ И
ЗАПИСАТЬ В ПАМЯТЬ КОНСТАНТЫ И НАЧАЛЬНЫЕ ЗНАЧЕНИЯ
ПЕРЕМЕННЫХ.
ПРИ ЭТОМ НИ "ЭТАЛОННЫЕ" РАССЫЛАЕМЫЕ СЛОВА, НИ КОМАНДЫ РАССЫЛКИ
НЕ ЗАНИМАЮТ МЕСТА В ПАМЯТИ ПРОГРАММЫ.
$НА РАССЫЛКА ДАННЫХ ПРЕДСТАВЛЯЕТ СОБОЙ ПОСЛЕДОВАТЕЛЬНОСТЬ ИНСТРУКЦИЙ
$НА _ $ВС20 $Б $К
 
 
               DАТА
$М_
           . . . . . . .
 
            Д А Н Н Ы Е
 
           . . . . . . .
$Б_
               SЕТ
$М_
           . . . . . . .
 
         КОМАНДЫ  РАССЫЛКИ
 
           . . . . . . .
$Б_
               CMD
 
$КК_ $М
$НА ЗДЕСЬ ДАННЫЕ ДЛЯ РАССЫЛКИ - ПОСЛЕДОВАТЕЛЬНОСТЬ СЛОВ,
ОПИСАННЫХ ИНСТРУКЦИЯМИ ФОРМИРОВАНИЯ ПЕРЕМЕННЫХ И КОНСТАНТ
(П.4.3) И ^В^S^S (П.4.5), А КОМАНДЫ РАССЫЛКИ - ПОСЛЕДОВАТЕЛЬНОСТЬ
ЛЮБЫХ КОМАНД ^Э^В^М (ПРИЛОЖЕНИЕ ^А), ЯВЛЯЮЩАЯСЯ
$Б ПРОГРАММОЙ РАССЫЛКИ.$М
$НА ГРУППА ДАННЫХ МОЖЕТ ОТСУТСТВОВАТЬ, В ЭТОМ СЛУЧАЕ РАССЫЛКА
 СРАЗУ НАЧИНАЕТСЯ С ИНСТРУКЦИИ ^S^Е^Т.
$НА ДАННЫЕ И КОМАНДЫ РАССЫЛКИ ЗАГРУЖАЮТСЯ В СВОБОДНУЮ ОБЛАСТЬ
ПАМЯТИ, ПОСЛЕ ЧЕГО ЗАГРУЗЧИК ПЕРЕДАЕТ УПРАВЛЕНИЕ НА ПЕРВУЮ КОМАНДУ
ПРОГРАММЫ РАССЫЛКИ.
ПРОГРАММА РАССЫЛКИ ДОЛЖНА ВОЗВРАЩАТЬ УПРАВЛЕНИЕ ПО 13-МУ
ИНДЕКС-РЕГИСТРУ. В ЭТОЙ ПРОГРАММЕ МОЖНО ИСПОЛЬЗОВАТЬ БЕЗ
ВОССТАНОВЛЕНИЯ ИНДЕКС-РЕГИСТРЫ 10, 11, 12, 14.
ДОПУСКАЕТСЯ ИСПОЛЬЗОВАНИЕ МАГАЗИНА, НО ПРИ ЭТОМ
СОДЕРЖИМОЕ 15-ГО ИНДЕКС-РЕГИСТРА ПОСЛЕ ВЫХОДА ИЗ ПРОГРАММЫ
РАССЫЛКИ НЕ ДОЛЖНО ИЗМЕНИТЬСЯ.
$НА ПРОГРАММА РАССЫЛКИ МОЖЕТ ЧИТАТЬ ИЗ ПАМЯТИ ЛЮБОЕ СЛОВО,
КРОМЕ СЛОВ, ЗАРЕЗЕРВИРОВАННЫХ ИНСТРУКЦИЕЙ ^В^S^S И
РАНЕЕ НЕ ИНИЦИАЛИЗИРОВАННЫХ. ПРОГРАММА РАССЫЛКИ МОЖЕТ ЗАПИСЫВАТЬ
В ПАМЯТЬ:
$ПЕРН _-_В ОБЛАСТЬ ПЕРЕМЕННЫХ - В ЛЮБОЕ СЛОВО;
$ПЕРН _-_В ОБЛАСТЬ КОНСТАНТ - В СЛОВА, ЗАРЕЗЕРВИРОВАННЫЕ
ИНСТРУКЦИЕЙ ^В^S^S И РАНЕЕ НЕ ИНИЦИАЛИЗИРОВАННЫЕ (ПЕРЕД
ТАКОЙ ЗАПИСЬЮ СЛЕДУЕТ УСТАНОВИТЬ РЕЖИМ ЗАПИСИ КОНСТАНТ);
$ПЕРН _-_В СОБСТВЕННЫЕ ДАННЫЕ - В СЛОВА, ЗАРЕЗЕРВИРОВАННЫЕ
ИНСТРУКЦИЕЙ ^В^S^S (ТАКИЕ СЛОВА МОЖНО ИСПОЛЬЗОВАТЬ КАК РАБОЧИЕ
ЯЧЕЙКИ ПРОГРАММЫ РАССЫЛКИ).
$НА В ПРОГРАММЕ РАССЫЛКИ ЗАПРЕЩЕНО:
$ПЕРН _-_ВЫЗЫВАТЬ ВНЕШНИЕ ПОДПРОГРАММЫ И ПЕРЕДАВАТЬ
УПРАВЛЕНИЕ ВОВНЕ ПРОГРАММЫ РАССЫЛКИ;
$ПЕРН _-_ИСПОЛЬЗОВАТЬ ЛИТЕРАЛЫ.
$НА _ $Б $ВС10 $К
 
              ПРИМЕР:
              -------
 
               DАТА
   В64     :   НЕХ   8
               SЕТ
            14 VТМ   -63
               ХТА   В64
   LD1     :   АТХ   BITS+1+63
               ASN   2048+1
            14 VLM   LD1
               АТХ   BITS
            13 JМР           ;КОНЕЦ РАССЫЛКИ
               CMD
$КК_
$М
$ПАР 5.2 ПОДПРОГРАММА_-_BLOCK DАТА.
$ПОД
$НА ПОДПРОГРАММА $Б BLOCK DАТА $М
ЗАГРУЖАЕТСЯ НА МЕСТО ОДНОИМЕННОГО
^С^О^М^М^О^N-БЛОКА И, ТАКИМ ОБРАЗОМ,
ОПРЕДЕЛЯЕТ ЕГО НАЧАЛЬНОЕ СОСТОЯНИЕ.
$НА ТИП ВХОДА В ОПЕРАТОРЕ ^N^А^М^Е
ТАКОЙ ПОДПРОГРАММЫ ДОЛЖЕН БЫТЬ ^В^D.
$НА ОБ'ЯВЛЯТЬ ВХОДЫ В $Б BLOCK DАТА $М
НЕ РЕКОМЕНДУЕТСЯ.
$Г 6. СТРУКТУРА ПОДПРОГРАММЫ.
$ГГ
$ПАР 6.1 СТРУКТУРА ТЕКСТА ПОДПРОГРАММЫ.
$ПОД
$НА ДЛЯ ТЕКСТА ПОДПРОГРАММЫ НА АССЕМБЛЕРЕ ХАРАКТЕРНА ЖЕСТКАЯ
ПОСЛЕДОВАТЕЛЬНОСТЬ СОСТАВНЫХ ЧАСТЕЙ.
В ОБЩЕМ ВИДЕ ЭТА ПОСЛЕДОВАТЕЛЬНОСТЬ ТАКОВА:
$НА _ $ВС30 $К
 
$Б         <ИМЯ>:  NАМЕ  ....$М
  I-----        . . . .       -----I
  I  I         В Х О Д Ы        I  I
  I                                I
  I     ГЛОБАЛЬНЫЙ КОММЕНТАРИЙ     I
  I-----        . . . .       -----I
  I  II     ВНЕШНИЕ  ИМЕНА     II  I
  I-----        . . . .       -----I
  I  III ОПИСАНИЯ  ПЕРЕМЕННЫХ III  I
  I-----        . . . .       -----I
  I-----         ^С^О^N^S^Т        -----I
  I  VI   ОПИСАНИЯ  КОНСТАНТ   VI  I
  I-----        . . . .       -----I
  I-----         ^D^А^Т^А         -----I
  I  V   ДАННЫЕ ДЛЯ РАССЫЛКИ    V  I   (*)
  I-----        . . . .       -----I
  I-----         ^S^Е^Т          -----I
  I  VI   КОМАНДЫ  РАССЫЛКИ    VI  I   (*)
  I             . . . .            I
  I-----                      -----I
  I-----         ^С^М^D          -----I
  I      КОМАНДЫ ПОДПРОГРАММЫ      I
  I VII         . . . .       VII  I
  I-----                      -----I
                 ^Е^N^D
 
$КК_
$НА ЛЮБАЯ ИЗ ЧАСТЕЙ ПОДПРОГРАММЫ МОЖЕТ ОТСУТСТВОВАТЬ.
$НА ЧАСТЬ ^I - ВХОДЫ - СОДЕРЖИТ ТОЛЬКО ОПЕРАТОРЫ ^Е^N^Т^R^У
И ЭКВИВАЛЕНТНОСТИ,
А ТАКЖЕ ГЛОБАЛЬНЫЙ КОММЕНТАРИЙ.
ПОРЯДОК ОПИСАНИЯ ВХОДОВ НЕСУЩЕСТВЕНЕН.
$НА ЧАСТЬ ^I^I - ВНЕШНИЕ ИМЕНА - МОЖЕТ СОДЕРЖАТЬ ИНСТРУКЦИИ
$Б LСВ, РСВ, ССВ &И SUBP, $М
А ТАКЖЕ ЭКВИВАЛЕНТНОСТИ И ИНСТРУКЦИИ ^В^L^О^С^К.
ПОРЯДОК СЛЕДОВАНИЯ ОПИСАНИЙ ВНЕШНИХ ОБ'ЕКТОВ
ВЛИЯЕТ НА ПОРЯДОК ИХ РАСПОЛОЖЕНИЯ В ПАМЯТИ.
$НА ЧАСТИ ^I^I^I И ^I^V СОДЕРЖАТ ОПИСАНИЯ ПЕРЕМЕННЫХ И КОНСТАНТ.
В НИХ МОГУТ ВСТРЕЧАТЬСЯ ИНСТРУКЦИИ ФОРМИРОВАНИЯ ПЕРЕМЕННЫХ И
КОНСТАНТ (П.4.3), РЕЗЕРВИРОВАНИЯ ПАМЯТИ (^В^S^S И ^В^S^S^Z),
ЭКВИВАЛЕНТНОСТИ, А ТАКЖЕ ИНСТРУКЦИИ $Б I_BLOCK &И IZ_BLOCK.
$М
МАШИННЫЕ СЛОВА, ОПИСЫВАЕМЫЕ (ИЛИ РЕЗЕРВИРУЕМЫЕ) ЭТИМИ
ИНСТРУКЦИЯМИ, РАЗМЕЩАЮТСЯ В ПАМЯТИ В ПОРЯДКЕ ИХ ОПИСАНИЯ.
$НА ЧАСТЬ ^V - ДАННЫЕ ДЛЯ РАССЫЛКИ - МОЖЕТ ПРИСУТСТВОВАТЬ ТОЛЬКО
СОВМЕСТНО С ЧАСТЬЮ ^V^I - КОМАНДАМИ РАССЫЛКИ.
СТРУКТУРА ЧАСТЕЙ ^V И ^V^I ОПИСАНА В ГЛ. 5.
$НА НАКОНЕЦ, ЧАСТЬ ^V^I^I - КОМАНДЫ ПОДПРОГРАММЫ -
МОЖЕТ СОДЕРЖАТЬ ОПЕРАТОРЫ-КОМАНДЫ И ЭКИВАЛЕНТНОСТИ.
$НА ПОРЯДОК СЛЕДОВАНИЯ ОПИСАНИЙ ПЕРЕМЕННЫХ И ОПИСАНИЙ
КОМАНД МОЖНО МЕНЯТЬ: В ЭТОМ СЛУЧАЕ ПЕРЕД ОПИСАНИЯМИ
ПЕРЕМЕННЫХ ДОЛЖНА СТОЯТЬ ИНСТРУКЦИЯ ^V^А^R:
$НА _ $ВС7 $К
$Б_
              CONST
$М_
        ОПИСАНИЯ КОНСТАНТ
$Б_
              VAR
$М_
        ОПИСАНИЯ ПЕРЕМЕННЫХ
 
$КК_
$НА ЕСЛИ РАССЫЛОК ДАННЫХ НЕТ, ТО ИНСТРУКЦИЮ ^С^М^D
МОЖНО ОПУСТИТЬ: АССЕМБЛЕР САМ РАСПОЗНАЕТ НАЧАЛО КОМАНД
ПОДПРОГРАММЫ.
ОДНАКО ЕСЛИ КОМАНДЫ НАЧИНАЮТСЯ ОПЕРАТОРОМ С ПУСТЫМ
ПОЛЕМ ^К^О^П, ТО БЕЗ ^С^М^D ОН БУДЕТ ОТНЕСЕН К
ПЕРЕМЕННЫМ ИЛИ КОНСТАНТАМ.
К ПРИМЕРУ, ДВЕ ПОСЛЕДОВАТЕЛЬНОСТИ
ИНСТРУКЦИЙ ЭКВИВАЛЕНТНЫ:
$НА _ $ВС7 $Б $К
 
  А     :  INT   5                А     :  INT   5
  В     :                         В     :
         1 VТМ   В-А                       CMD
                                         1 VТМ   В-А
 
$КК_ $М
$ПАР 6.2 СТРУКТУРА ЗАГРУЖЕННОЙ ПОДПРОГРАММЫ.
$ПОД
$НА ЗАГРУЖЕННАЯ ПОДПРОГРАММА РАЗМЕЩАЕТСЯ В ДВУХ
НЕЗАВИСИМЫХ ОБЛАСТЯХ ПАМЯТИ - ^С-ОБЛАСТИ И ^V-ОБЛАСТИ.
РАЗЛИЧАЮТСЯ ОНИ В ПРИНЦИПЕ ТОЛЬКО ОДНИМ: ЗАПИСЬ В
^С-ОБЛАСТЬ АППАРАТНО ЗАПРЕЩЕНА, А В ^V-ОБЛАСТЬ
РАЗРЕШЕНА. ПОЭТОМУ В ^V-ОБЛАСТИ РАЗМЕЩАЮТСЯ ПЕРЕМЕННЫЕ,
ОПИСАННЫЕ В ЧАСТИ ^I^V ТЕКСТА ПОДПРОГРАММЫ (И ТОЛЬКО ОНИ),
А В ^С-ОБЛАСТИ - ВСЕ ОСТАЛЬНОЕ: ВНАЧАЛЕ ИДУТ КОМАНДЫ,
ЗА НИМИ - КОНСТАНТЫ, А ЗАТЕМ СЛЕДУЮТ ЛИТЕРАЛЫ
(ЛИТЕРАЛЬНЫЕ КОНСТАНТЫ).
$НА _ $ВС23 $К
 
        С-ОБЛАСТЬ                    V-ОБЛАСТЬ
 
  I                    I     I                         I
  I--------------------I     I                         I
  I                    I     I                         I
  I                    I     I-------------------------I
  I      КОМАНДЫ       I     I                         I
  I                    I     I                         I
  I                    I     I                         I
  I--------------------I     I       ПЕРЕМЕННЫЕ        I
  I                    I     I                         I
  I     КОНСТАНТЫ      I     I                         I
  I                    I     I                         I
  I--------------------I     I                         I
  I                    I     I                         I
  I      ЛИТЕРАЛЫ      I     I-------------------------I
  I                    I     I                         I
  I--------------------I     I                         I
  I                    I     I                         I
  I                    I     I                         I
 
 
$КК_
$Г 7. РАСПРЕДЕЛЕНИЕ ПАМЯТИ В ПРОГРАММЕ.
$ГГ
$НА СТРОГО ГОВОРЯ, КОМПОНОВКА ЕДИНОЙ ПРОГРАММЫ
 ИЗ ПОДПРОГРАММ - ЗАДАЧА ЗАГРУЗЧИКА. ОДНАКО ЗНАНИЕ ПРАВИЛ
ТАКОЙ КОМПОНОВКИ И СПОСОБОВ УПРАВЛЕНИЯ ЕЮ ЧАСТО БЫВАЕТ
ПОЛЕЗНЫМ ПРИ НАПИСАНИИ ПРОГРАММ НА АССЕМБЛЕРЕ, ПОЭТОМУ
МЫ СОЧЛИ НЕОБХОДИМЫМ ОПИСАТЬ РАСПРЕДЕЛЕНИЕ ПАМЯТИ В
 ПРОГРАММЕ, ХОТЯ ОНО ЦЕЛИКОМ ЗАВИСИТ ОТ ЗАГРУЗЧИКА, А НЕ ОТ
ТРАНСЛЯТОРА С АССЕМБЛЕРА.
$ПАР 7.1 ОБЛАСТИ ПАМЯТИ.
$ПОД
$НА ВСЯ ПАМЯТЬ, ВЫДЕЛЯЕМАЯ ПРОГРАММЕ (ЗАДАЧЕ, ПРОЦЕССУ)
ПОЛЬЗОВАТЕЛЯ, РАЗДЕЛЯЕТСЯ НА ДВЕ ОБЛАСТИ:
ОБЛАСТЬ КОМАНД И КОНСТАНТ (^С-ОБЛАСТЬ) И ОБЛАСТЬ
ПЕРЕМЕННЫХ (^V-ОБЛАСТЬ).
ЗАПИСЬ В ЛИСТЫ ПАМЯТИ, ПРИНАДЛЕЖАЩИЕ ПЕРВОЙ ОБЛАСТИ,
АППАРАТНО ЗАПРЕЩЕНА, А ВО ВТОРУЮ, СООТВЕТСТВЕННО, РАЗРЕШЕНА.
В ^С-ОБЛАСТИ РАЗМЕЩАЮТСЯ КОМАНДЫ, КОНСТАНТЫ И ЛИТЕРАЛЫ
ПОДПРОГРАММ, А ТАКЖЕ КОНСТАНТНЫЕ ^С^О^М^М^О^N-БЛОКИ.
В ^V-ОБЛАСТИ РАЗМЕЩАЕТСЯ ВСЕ ОСТАЛЬНОЕ:
СТАТИЧЕСКИЕ ПЕРЕМЕННЫЕ ПОДПРОГРАММ, ДИНАМИЧЕСКИЕ ПЕРЕМЕННЫЕ
ПОДПРОГРАММ И МАГАЗИН (ПОДРОБНО О МАГАЗИНЕ И ДИНАМИЧЕСКИХ
ПЕРЕМЕННЫХ - В ГЛ.8).
$НА РАСПРЕДЕЛЕНИЕ ПАМЯТИ В ПРОГРАММЕ В САМОМ ОБЩЕМ ВИДЕ ТАКОВО:
$НА _ $ВС9 $К
 
I                           I       I            I       I
I          V-ОБЛАСТЬ        I///////I С-ОБЛАСТЬ  I V-ОБ. I
I                           I       I            I       I
I--------------I------------I-------I------------I-------I
I  СТАТИЧЕСКИЕ I            I       I  КОМАНДЫ,  I       I
I  ПЕРЕМЕННЫЕ  I  ДИНАМИЧ.  I СВОБ. I КОНСТАНТЫ  I МАГА- I
I      И       I ПЕРЕМЕННЫЕ I       I     И      I ЗИН   I
I COMMON-БЛОКИ I            I       I ПЕРЕМЕННЫЕ I       I
I--------------I------------I-------I------------I-------I
I              I            I       I            I       I
I              I==>         I==> <==I            I       I
I              I            I       I            I       I
(А)            (В)          (С)     (D)          (S)
 
 
$КК_
$НА ЗДЕСЬ БУКВЫ В СКОБКАХ ОБОЗНАЧАЮТ АДРЕСА НАЧАЛ СООТВЕТСТВУЮЩИХ
ОБЛАСТЕЙ.
$НА ТАКОЕ РАСПОЛОЖЕНИЕ ОБЛАСТЕЙ ПАМЯТИ УДОБНО ТЕМ, ЧТО ПОЗВОЛЯЕТ
РАСПОЛОЖИТЬ В НАЧАЛЕ ПАМЯТИ ОБ'ЕКТЫ (ПЕРЕМЕННЫЕ), АДРЕСАЦИЯ К КОТОРЫМ
БУДЕТ ПРОИЗВОДИТЬСЯ КОМАНДАМИ РАБОТЫ С ЧАСТЯМИ СЛОВА, КОТОРЫЕ
НЕ МОГУТ ПРЯМО АДРЕСОВАТЬ ВСЮ ПАМЯТЬ. КРОМЕ ТОГО,
ПРИ ТАКОМ РАСПОЛОЖЕНИИ ОБЛАСТЕЙ МАКСИМАЛЬНО (ПО СРАВНЕНИЮ С
АЛЬТЕРНАТИВНЫМИ ВАРИАНТАМИ) УПРОЩАЕТСЯ РАБОТА С ДИНАМИЧЕСКИМИ
ПЕРЕМЕННЫМИ,
ТАК КАК ПАМЯТЬ ПОД НИХ ВЫДЕЛЯЕТСЯ ПОСЛЕДОВАТЕЛЬНО В ПОРЯДКЕ ВОЗРАСТАНИЯ
АДРЕСОВ.
$ПАР 7.2 ПОРЯДОК РАСПОЛОЖЕНИЯ ПОДПРОГРАММ И ^С^О^М^М^О^N-БЛОКОВ.
$НА ОДНОЙ ИЗ ЗАДАЧ, СТОЯЩИХ ПЕРЕД ЗАГРУЗЧИКОМ, ЯВЛЯЕТСЯ РАЗМЕЩЕНИЕ
ПОДПРОГРАММ И ^С^О^М^М^О^N-БЛОКОВ, СОСТАВЛЯЮЩИХ ЕДИНУЮ ЗАГРУЖАЕМУЮ
ПРОГРАММУ, В ПАМЯТИ.
ПОСКОЛЬКУ НАС СЕЙЧАС ИНТЕРЕСУЕТ ИМЕННО ПОРЯДОК РАСПОЛОЖЕНИЯ
ЧАСТЕЙ ПРОГРАММЫ (ЗАГРУЖАЕМЫХ ОБ'ЕКТОВ), МЫ БУДЕМ ГОВОРИТЬ
ТОЛЬКО ОБ ЭТОМ РАЗМЕЩЕНИИ.
$НА ВСЕ ЗАГРУЖАЕМЫЕ ОБ'ЕКТЫ МОЖНО РАЗБИТЬ НА ТРИ ТИПА:
$ПЕРН 1._ПОДПРОГРАММЫ;
$ПЕРН 2._"ОБЫЧНЫЕ" (ПЕРЕМЕННЫЕ) ^С^О^М^М^О^N-БЛОКИ;
$ПЕРН 3._КОНСТАНТНЫЕ ^С^О^М^М^О^N-БЛОКИ.
$НА ПОДПРОГРАММЫ, С ТОЧКИ ЗРЕНИЯ ЗАГРУЗЧИКА, СОСТОЯТ В СВОЮ
ОЧЕРЕДЬ ИЗ ДВУХ ЧАСТЕЙ: ПЕРВАЯ ИЗ НИХ СОДЕРЖИТ КОМАНДЫ И
ЛИТЕРАЛЫ (МЫ БУДЕМ НАЗЫВАТЬ ЭТУ ЧАСТЬ "КОМАНДАМИ ПОДРОГРАММЫ"),
А ВТОРАЯ - СТАТИЧЕСКИЕ ПЕРЕМЕННЫЕ ПОДПРОГРАММЫ (ДЛЯ КРАТКОСТИ -
"ПЕРЕМЕННЫЕ ПОДПРОГРАММЫ").
$НА ЗАГРУЖАЕМЫЙ ОБ'ЕКТ МОЖЕТ БЫТЬ ПОМЕЩЕН ЛИБО В ^С-ОБЛАСТЬ,
ЛИБО В ^V-ОБЛАСТЬ. ВЫДЕЛЕНИЕ ПАМЯТИ В ^С-ОБЛАСТИ ВЕДЕТСЯ
С КОНЦА.  АДРЕС НАЧАЛА ОБ'ЕКТА, ЗАГРУЖАЕМОГО В ЭТУ ОБЛАСТЬ,
ВЫЧИСЛЯЕТСЯ ПО ФОРМУЛЕ
$А0 _ $Б
$А0 _______АС=FС-LС
$А0 _ $М
$А0 ____________ГДЕ ^А - АДРЕС НАЧАЛА ОБ'ЕКТА;
$А0 ________________^F - АДРЕС "СВОБОДНО" ПО
$А0 ____________________^С-ОБЛАСТИ;
$А0 ________________^L - ДЛИНА ОБ'ЕКТА.
$А0 _
$НА ПОСЛЕ РАЗМЕЩЕНИЯ ОБ'ЕКТА
$А0 _ $Б
$А0 _______FС=АС-1
$А0 _
$НА  ПЕРЕД НАЧАЛОМ ЗАГРУЗКИ ^F^С=^S-1 (СМ.&РИС.А).
$НА ВЫДЕЛЕНИЕ ПАМЯТИ В ^V-ОБЛАСТИ ВЕДЕТСЯ С ЕЕ НАЧАЛА, И В
ПРОЦЕССЕ ЗАГРУЗКИ ^V-ОБЛАСТЬ И ^С-ОБЛАСТЬ РАСТУТ НАВСТРЕЧУ
ДРУГ ДРУГУ. ПРОСТРАНСТВО, КОТОРОЕ ОСТАЕТСЯ МЕЖДУ НИМИ ПОСЛЕ
ОКОНЧАНИЯ ЗАГРУЗКИ, ИСПОЛЬЗУЕТСЯ ДЛЯ РАЗМЕЩЕНИЯ ДИНАМИЧЕСКИХ
ПЕРЕМЕННЫХ.
$НА ДЛЯ ОПРЕДЕЛЕНИЯ ПОРЯДКА РАЗМЕЩЕНИЯ ОБ'ЕКТОВ ЗАГРУЗЧИК СОЗДАЕТ
СПИСОК ЗАГРУЗКИ, И ВСЕ РАЗМЕЩЕНИЕ ВЕДЕТСЯ СТРОГО ПО ЭТОМУ
СПИСКУ. ПЕРВЫМ В СПИСОК ЗАГРУЗКИ ПОПАДАЕТ ГОЛОВНАЯ ПОДПРОГРАММА
(ОБЫЧНО ЭТО $Б PROGRAM). $М
ЗАТЕМ ТУДА ВКЛЮЧАЮТСЯ ВНЕШНИЕ ОБ'ЕКТЫ, ОПИСАННЫЕ В НЕЙ,
 СТРОГО В ПОРЯДКЕ ИХ ОПИСАНИЯ. ПОСЛЕ НИХ В СПИСОК ЗАГРУЗКИ
ВКЛЮЧАЮТСЯ ОБ'ЕКТЫ, ОПИСАННЫЕ В ПЕРВОЙ ИЗ УЖЕ ВКЛЮЧЕННЫХ
В СПИСОК ПОДПРОГРАММ, ЗАТЕМ ОБ'ЕКТЫ ИЗ ВТОРОЙ ПОДПРОГРАММЫ
И Т.Д., ПОКА ОПИСАНИЯ НЕ ИССЯКНУТ.
 РАЗМЕЩЕНИЕ ИДЕТ ПО ЭТОМУ СПИСКУ, СТРОГО ПО ОБЛАСТЯМ:
В ^С-ОБЛАСТЬ ПОПАДУТ КОМАНДЫ ПОДПРОГРАММ И КОНСТАНТНЫЕ
^С^О^М^М^О^N-БЛОКИ, А В ^V-ОБЛАСТЬ - ПЕРЕМЕННЫЕ ПОДПРОГРАММ
 И ПЕРЕМЕННЫЕ ^С^О^М^М^О^N-БЛОКИ.
$Г 8. ОБЩЕСИСТЕМНЫЕ СОГЛАШЕНИЯ.
$ГГ
$НА ОБЩЕСИСТЕМНЫЕ СОГЛАШЕНИЯ ОПРЕДЕЛЯЮТ
ПРАВИЛА ВЗАИМОДЕЙСТВИЯ ПОДПРОГРАММ МЕЖДУ СОБОЙ
И КАСАЮТСЯ СПОСОБОВ ВЫЗОВА ПОДПРОГРАММ, ПЕРЕДАЧИ
ПАРАМЕТРОВ И РЕЗУЛЬТАТОВ, А ТАКЖЕ ПРАВИЛ
ИСПОЛЬЗОВАНИЯ ИНДЕКС-РЕГИСТРОВ И МАГАЗИНА.
ЭТИ ПРАВИЛА ПРИМЕНЯЮТСЯ ДЛЯ СВЯЗИ С ПОДПРОГРАММАМИ,
НАПИСАННЫМИ НА ЯЗЫКАХ ВЫСОКОГО УРОВНЯ.
 ПРИ ОРГАНИЗАЦИИ СВЯЗИ МЕЖДУ АССЕМБЛЕРНЫМИ ПОДПРОГРАММАМИ
ВОЗМОЖНО ИСПОЛЬЗОВАНИЕ ДРУГИХ ПРАВИЛ ВЗАИМОДЕЙСТВИЯ,
ОДНАКО ДЕЛАТЬ ЭТО БЕЗ КРАЙНЕЙ НЕОБХОДИМОСТИ НЕ СЛЕДУЕТ.
$ПАР 8.1 МЕЖПРОГРАММНЫЙ ИНТЕРФЕЙС.
$ПОД
$НА С ЦЕЛЬЮ СТАТИЧЕСКОГО КОНТРОЛЯ СВЯЗЕЙ
МЕЖДУ ПОДПРОГРАММАМИ В ОПЕРАТОРАХ,
ОПИСЫВАЮЩИХ ВХОДЫ (^N^А^М^Е, ^Е^N^Т^R^У) И
В ОПЕРАТОРАХ, ОПИСЫВАЮЩИХ ВНЕШНИЕ ПОДПРОГРАММЫ
$Б (SUBP, CALL, EJMP) $М ТРЕБУЕТСЯ УКАЗАНИЕ
ТИПА ПРОГРАММНОГО ИНТЕРФЕЙСА И КОЛИЧЕСТВА СЛОВ,
ПЕРЕДАВАЕМЫХ В КАЧЕСТВЕ ПАРАМЕТРОВ.
$НА СПОСОБ ПЕРЕДАЧИ ПАРАМЕТРОВ ОПИСЫВАЕТСЯ
СЛЕДУЮЩИМИ ПРАВИЛАМИ:
$ПЕРН _-_ПАРАМЕТРЫ ПЕРЕДАЮТСЯ ЧЕРЕЗ МАГАЗИН,
ПРИЧЕМ ПЕРВЫМ ЗАСЫЛАЕТСЯ ПЕРВЫЙ ФАКТИЧЕСКИЙ ПАРАМЕТР;
$ПЕРН _-_ЕСЛИ ПАРАМЕТР - МАССИВ, ТО В МАГАЗИН
ЗАСЫЛАЕТСЯ ОДНО СЛОВО, СОДЕРЖАЩЕЕ ССЫЛКУ НА НЕГО.
ССЫЛКА ПРЕДСТАВЛЯЕТ СОБОЙ АДРЕС НАЧАЛА МАССИВА.
ТИП ЭТОГО АДРЕСА СООТВЕТСТВУЕТ ТИПУ МАССИВА
(^L, ^Н, ^Q, ^В ИЛИ ^F). ТАК, ЕСЛИ ПАРАМЕТР -
ТЕКСТОВАЯ СТРОКА, В МАГАЗИН ЗАСЫЛАЕТСЯ
$Б БАЙТОВЫЙ $М АДРЕС ЕЕ НАЧАЛА;
$ПЕРН _-_ЕСЛИ ПАРАМЕТР - ПЕРЕМЕННАЯ, ТО
В МАГАЗИН ЗАСЫЛАЕТСЯ ЗНАЧЕНИЕ ЭТОЙ ПЕРЕМЕННОЙ
 - СТОЛЬКО СЛОВ, СКОЛЬКО ПЕРЕМЕННАЯ ЗАНИМАЕТ В ПАМЯТИ;
$ПЕРН _-_ЕСЛИ ПАРАМЕТР - ССЫЛКА НА ПЕРЕМЕННУЮ, В
МАГАЗИН ЗАСЫЛАЕТСЯ ЕЕ АДРЕС. ТИП АДРЕСА СООТВЕТСТВУЕТ ТИПУ
ПЕРЕМЕННОЙ.
$НА НИЖЕ ПЕРЕЧИСЛЕНЫ ПРОГРАММНЫЕ ИНТЕРФЕЙСЫ,
ИСПОЛЬЗУЕМЫЕ В ЯЗЫКАХ ВЫСОКОГО УРОВНЯ.
РЕЗУЛЬТАТ РАБОТЫ ФУНКЦИЙ - НА СУММАТОРЕ, ЕСЛИ
ЭТО НЕ ОГОВОРЕНО ОСОБО.
$ПН МР_-_MAIN PROGRAM. $М ГОЛОВНАЯ ПОДПРОГРАММА.
ПАРАМЕТРОВ НЕТ.
$ПН SР_-_SUBPROGRAM. $М ПОДПРОГРАММА ТИПА $Б SUBROUTINE.$М
$ПН IF_-_INTEGER FUNCTION. $М РЕЗУЛЬТАТ - 64-РАЗРЯДНОЕ ЦЕЛОЕ.
$ПН RF_-_REAL FUNCTION. $М РЕЗУЛЬТАТ - 64-РАЗРЯДНОЕ
ЧИСЛО С ПЛАВАЮЩЕЙ ЗАПЯТОЙ.
$ПН HF_-_Н-FUNCTION. $М РЕЗУЛЬТАТ - 32-РАЗРЯДНОЕ ЦЕЛОЕ.
$ПН QF_-_Q-FUNCTION. $М РЕЗУЛЬТАТ - 16-РАЗРЯДНОЕ ЦЕЛОЕ.
$ПН BF_-_ВУТЕ FUNCTION. $М РЕЗУЛЬТАТ - ОДИН БАЙТ.
$ПН LF_-_LOGICAL FUNCTION. $М РЕЗУЛЬТАТ - ОДИН БИТ.
$ПН DF_-_DOUBLE PRECISION FUNCTION. $М РЕЗУЛЬТАТ - ЧИСЛО
С ДВОЙНОЙ ТОЧНОСТЬЮ - НА СУММАТОРЕ И В РЕГИСТРЕ
МЛАДШИХ РАЗРЯДОВ (^Р^М^Р).
$ПН CF_-_COMPLEX FUNCTION. $М РЕЗУЛЬТАТ - КОМПЛЕКСНОЕ ЧИСЛО:
ДЕЙСТВИТЕЛЬНАЯ ЧАСТЬ - НА СУММАТОРЕ, МНИМАЯ - В ПЕРВОМ
СЛОВЕ $Б COMMON-&Б&Л&О&К&А  $СНП %  СХ_IMAGE. $СНП _
$ПН XF_-_DOUBLE PRECISION COMPLEX FUNCTION. $М
РЕЗУЛЬТАТ - КОМПЛЕКСНОЕ ЧИСЛО ДВОЙНОЙ ТОЧНОСТИ:
ДЕЙСТВИТЕЛЬНАЯ ЧАСТЬ - НА СУММАТОРЕ И В ^Р^М^Р,
МНИМАЯ ЧАСТЬ - В 1-2 ЯЧЕЙКАХ $СНП % $Б СХ_IMAGE.$СНП _
$ПН RР_-_REAL POINTER FUNCTION. $М РЕЗУЛЬТАТ - УКАЗАТЕЛЬ
НА 64-РАЗРЯДНОЕ ВЕЩЕСТВЕННОЕ ЧИСЛО.
$ПН DР_-_DOUBLE PRECICION POINTER FUNCTION.
$М РЕЗУЛЬТАТ - УКАЗАТЕЛЬ НА СЛОВО ДВОЙНОЙ
ТОЧНОСТИ (АДРЕС ПЕРВОГО СЛОВА).
$ПН IР_-_INTEGER POINTER FUNCTION. $М РЕЗУЛЬТАТ -
УКАЗАТЕЛЬ НА 64-РАЗРЯДНОЕ ЦЕЛОЕ.
$ПН НР_-_Н-POINTER FUNCTION. $М РЕЗУЛЬТАТ - УКАЗАТЕЛЬ
НА ПОЛУСЛОВО (АДРЕС ПОЛУСЛОВА).
$ПН QР_-_Q-POINTER FUNCTION. $М РЕЗУЛЬТАТ - АДРЕС 16-РАЗРЯДНОГО
ФРАГМЕНТА.
$ПН ВР_-_ВУТЕ POINTER FUNCTION. $М РЕЗУЛЬТАТ - БАЙТОВЫЙ АДРЕС.
$ПН LР_-_LOGICAL POINTER FUNCTION. $М РЕЗУЛЬТАТ -
БИТОВЫЙ АДРЕС.
$ПН BD_-_BLOCK DАТА. $М ЗАГРУЗЧИК ПОМЕЩАЕТ ТАКУЮ
ПОДПРОГРАММУ НА МЕСТО ОДНОИМЕННОГО ^С^О^М^М^О^N-БЛОКА.
$ПАР 8.2 ИСПОЛЬЗОВАНИЕ ИНДЕКСНЫХ РЕГИСТРОВ.
$ПОД
$НА НАЗНАЧЕНИЕ ИНДЕКСНЫХ РЕГИСТРОВ (^I^R)
ТАКОВО:
$ПН _1_-_УКАЗАТЕЛЬ НА ОБЛАСТЬ ДИНАМИЧЕСКИХ
ПЕРЕМЕННЫХ (СМ. &П. 8.3);
$ПН 2:12_-_НАЗНАЧЕНИЕ НЕ ОГОВАРИВАЕТСЯ;
$ПН 13_-_СОДЕРЖИТ АДРЕС ВОЗВРАТА ИЗ ПОДПРОГРАММЫ;
$ПН 14_-_НАЗНАЧЕНИЕ НЕ ОГОВАРИВАЕТСЯ;
$ПН 15_-_СЧЕТЧИК МАГАЗИНА.
$НА ^I^R1-^I^R9 И ^I^R15 СЧИТАЮТСЯ ГЛОБАЛЬНЫМИ,
^I^R10-^I^R14 - ЛОКАЛЬНЫМИ.
$НА ПОСЛЕ ОБРАЩЕНИЯ К ПОДПРОГРАММЕ ЗНАЧЕНИЯ ГЛОБАЛЬНЫХ
РЕГИСТРОВ ДОЛЖНЫ БЫТЬ ТЕМИ-ЖЕ, ЧТО И ДО ОБРАЩЕНИЯ,
ЗНАЧЕНИЯ ЛОКАЛЬНЫХ РЕГИСТРОВ СЧИТАЮТСЯ НЕОПРЕДЕЛЕННЫМИ.
$ПАР 8.3 ДИНАМИЧЕСКИЕ ПЕРЕМЕННЫЕ.
$ПОД
$НА В НАЧАЛЕ РАБОТЫ ПОДПРОГРАММА ЗАХВАТЫВАЕТ
НЕОБХОДИМОЕ КОЛИЧЕСТВО ДИНАМИЧЕСКИХ ПЕРЕМЕННЫХ
И ВОЗВРАЩАЕТ ИХ В КОНЦЕ СВОЕЙ РАБОТЫ.
$НА ПРИ ВХОДЕ В ПОДПРОГРАММУ ^I^R1 СОДЕРЖИТ
УКАЗАТЕЛЬ НА НАЧАЛО СВОБОДНОГО МЕСТА В
ОБЛАСТИ ДИНАМИЧЕСКИХ ПЕРЕМЕННЫХ.
ПОДПРОГРАММА ДОЛЖНА УВЕЛИЧИТЬ ^I^R1 НА ВЕЛИЧИНУ ^N,
ГДЕ ^N - КОЛИЧЕСТВО СЛОВ, ЗАНЯТЫХ ДИНАМИЧЕСКИМИ ПЕРЕМЕННЫМИ
ПОДПРОГРАММЫ, ПОСЛЕ ЧЕГО МОЖНО АДРЕСОВАТЬСЯ К НИМ,
ИСПОЛЬЗУЯ ОТРИЦАТЕЛЬНОЕ СМЕЩЕНИЕ ОТ ^I^R1.
ПРИ ВОЗВРАТЕ ИЗ ПОДПРОГРАММЫ СЛЕДУЕТ УМЕНЬШИТЬ
ЗНАЧЕНИЕ ^I^R1 НА ВЕЛИЧИНУ N.
$НА
ПРИ ВЫЗОВЕ ДРУГИХ ПОДПРОГРАММ В ВЫЗЫВАЮЩЕЙ ПОДПРОГРАММЕ
НЕ НАДО ЗАБОТИТЬСЯ О СОХРАННОСТИ ДИНАМИЧЕСКИХ ПЕРЕМЕННЫХ.
$НА ПЕРВОНАЧАЛЬНОЕ ЗНАЧЕНИЕ ^I^R1 УСТАНАВЛИВАЕТСЯ АВТОМАТИЧЕСКИ
ПРИ ЗАПУСКЕ ПРОГРАММЫ.
$А0$БС3$А0$Б _________________ПРИМЕР:
$А0$БС1$ВС8$А0$Б$К
 
            EXAMPLE :  NАМЕ  SР
   ;     ОПИСАНИЕ  ДИНАМИЧЕСКИХ  ПЕРЕМЕННЫХ
            0       :  BLOCK DVAR1,DVAR2
                           , DVAR3(5),DVAR4
                           , NDV(0)
                        ...
 
                        ...
 
                        ...
 
   ;        НАЧАЛЬНАЯ ПЕРЕУСТАНОВКА  IR1
   ;  (ВЫДЕЛЕНИЕ ПАМЯТИ ДИНАМИЧЕСКИХ ПЕРЕМЕННЫХ)
   ;
                     1 UТМ   NDV
   ;
   ; ПРИМЕР ИСПОЛЬЗОВАНИЯ ДИНАМИЧЕСКОЙ ПЕРЕМЕННОЙ
   ;
                     1 SТХ   DVAR2-NDV
 
                        ...
 
                        ...
 
                        ...
   ;
   ;             ВОССТАНОВЛЕНИЕ  IR1
   ;   (ВОЗВРАТ ПАМЯТИ ДИНАМИЧЕСКИХ ПЕРЕМЕННЫХ)
   ;
                     1 UТМ   -NDV
   ;
   ;            ВОЗВРАТ ИЗ ПОДПРОГРАММЫ
   ;
                    13 JМР
                       END
$КК_
$ПАР 8.4 ИСПОЛЬЗОВАНИЕ МАГАЗИНА.
$ПОД
$НА НАЧАЛЬНОЕ СОСТОЯНИЕ ^I^R15 (СЧЕТЧИКА МАГАЗИНА)
УСТАНАВЛИВАЕТСЯ АВТОМАТИЧЕСКИ ПРИ ЗАПУСКЕ ПРОГРАММЫ.
$НА ЛЮБАЯ ПОДПРОГРАММА ДОЛЖНА ВЫПОЛНЯТЬ СЛЕДУЮЩЕЕ
ПРАВИЛО:
ПОСЛЕ ВОЗВРАТА ИЗ НЕЕ СОДЕРЖИМОЕ ^I^R15 ДОЛЖНО БЫТЬ
ТАКИМ, КАКИМ ОНО БЫЛО ПЕРЕД ЗАСЫЛКОЙ В МАГАЗИН ПЕРВОГО
ПАРАМЕТРА ПОДПРОГРАММЫ.
$Г 9. ДИАГНОСТИЧЕСКИЕ СООБЩЕНИЯ.
$ГГ
$НА ВСЕ СООБЩЕНИЯ ОБ ОШИБКАХ
ПРИ ТРАНСЛЯЦИИ ЯВЛЯЮТСЯ ФАТАЛЬНЫМИ, ТО ЕСТЬ
БЛОКИРУЮТ ГЕНЕРАЦИЮ ОБ'ЕКТНОГО КОДА ПОДПРОГРАММЫ.
ТРАНСЛЯЦИЯ ТЕМ НЕ МЕНЕЕ ПРОДОЛЖАЕТСЯ С ЦЕЛЬЮ
ВЫЯВЛЕНИЯ ДРУГИХ ОШИБОК. ОШИБОЧНЫЙ ОПЕРАТОР ИГНОРИРУЕТСЯ.
$НА ДИАГНОСТИЧЕСКИЕ СООБЩЕНИЯ ПЕЧАТАЮТСЯ В ЛИСТИНГЕ
ПЕРЕД СТРОКОЙ, СОДЕРЖАЩЕЙ ОШИБКУ.
$НА НИЖЕ ПРИВЕДЕНЫ ВСЕ ВОЗМОЖНЫЕ СООБЩЕНИЯ ОБ ОШИБКАХ.
БОЛЬШИНСТВО ИЗ НИХ В ПОЯСНЕНИЯХ НЕ НУЖДАЕТСЯ.
$ПН НЕДОПУСТИМЫЙ ОПЕРАТОР_ $М _-_НАРУШЕН СИНТАКСИС СТРОКИ
ВХОДНОГО ТЕКСТА.
$ПН НЕТ ЗАГОЛОВКА ПОДПРОГРАММЫ_ $М _-_ПЕРВЫЙ ОПЕРАТОР -
НЕ ^N^А^М^Е.
$ПН ПОВТОРНОЕ ОПРЕДЕЛЕНИЕ ВХОДА_
$ПН ОШИБКА В КОП
$ПН ОШИБКА В МЕТКЕ
$ПН ДВАЖДЫ ОПИСАННЫЙ ИДЕНТИФИКАТОР <ИМЯ>
$ПН ОШИБКА В МОДИФИКАТОРЕ
$ПН НАРУШЕН ПОРЯДОК ИНСТРУКЦИЙ_ $М _-_НАРУШЕН
ПОРЯДОК СЛЕДОВАНИЯ ЧАСТЕЙ ПОДПРОГРАММЫ, ОГОВОРЕННЫЙ
В П.6.1.
$ПН ОШИБКА В АДРЕСЕ
$ПН НЕТ МЕТКИ_ $М _-_ ОТСУТСТВУЕТ МЕТКА В ОПЕРАТОРЕ,
ГДЕ ЕЕ ПРИСУТСТВИЕ ОБЯЗАТЕЛЬНО
$ПН ВХОД НЕ ОПРЕДЕЛЕН_ $М _-_ИМЯ, ОБ'ЯВЛЕННОЕ В ОПЕРАТОРЕ
^Е^N^Т^R^У, НЕ ИСПОЛЬЗОВАНО ДАЛЕЕ В КАЧЕСТВЕ МЕТКИ
$ПН ПОКА НЕ РЕАЛИЗОВАНО_ $М _-_ИСПОЛЬЗОВАН ОПЕРАТОР,
НЕ РЕАЛИЗОВАННЫЙ В ДАННОЙ ВЕРСИИ ТРАНСЛЯТОРА
$ПН НЕОПИСАННЫЙ ИДЕНТИФИКАТОР <ИМЯ>
$ПН ПЕРЕПОЛНЕНИЕ ТАБЛИЦ! $М _-_СЛИШКОМ МНОГО
ИДЕНТИФИКАТОРОВ ЛИБО ВНЕШНИХ ИМЕН ЛИБО ЛИТЕРАЛОВ.
РЕКОМЕНДУЕТСЯ РАЗБИТЬ ПОДПРОГРАММУ НА ЧАСТИ.
$Г 10. РЕАЛИЗАЦИЯ ТРАНСЛЯТОРА.
$ГГ
$НА В НАСТОЯЩЕЕ ВРЕМЯ ТРАНСЛЯТОР С АССЕМБЛЕРА РАБОТАЕТ
В СИСТЕМЕ КОМАНД ^Б^Э^С^М-6 И ВМЕСТЕ С КРОСС-ЗАГРУЗЧИКОМ
И ЭМУЛЯТОРОМ ВХОДИТ В СОСТАВ КРОСС-СИСТЕМЫ ^М^К^Б-8601.
ЭТОТ ТРАНСЛЯТОР БУДЕТ РАБОТАТЬ И НА САМОЙ ^М^К^Б-8601
(В РЕЖИМЕ ^Б^Э^С^М-6).
$НА В ВЕРСИИ 1.0 &НЕ РЕАЛИЗОВАН АППАРАТ РАССЫЛКИ ДАННЫХ
(П.5.1), А ТАКЖЕ ПСЕВДОИНСТРУКЦИИ ФОРМИРОВАНИЯ
ВЕЩЕСТВЕННЫХ ЧИСЕЛ (REAL, DREAL) И СООТВЕТСТВУЮЩИЕ
ЛИТЕРАЛЫ.
НЕ РЕАЛИЗОВАН ТАКЖЕ ОПЕРАТОР КОСВЕННОЙ ЭКВИВАЛЕНТНОСТИ.
В ТЕКСТЕ НАСТОЯЩЕГО ОПИСАНИЯ НЕРЕАЛИЗОВАННЫЕ ВОЗМОЖНОСТИ
ОТМЕЧЕНЫ ЗВЕЗДОЧКОЙ.
ПРЕДУСМАТРИВАЕТСЯ РЕАЛИЗОВАТЬ ИХ ПОЗДНЕЕ, НАЧИНАЯ
С ВЕРСИИ 2.0. ДЛЯ ПРАВИЛЬНОЙ РАБОТЫ АППАРАТА РАССЫЛКИ
ДАННЫХ НЕОБХОДИМО, КРОМЕ ТОГО,
ЧТОБЫ ЗАГРУЗЧИК РАБОТАЛ В СИСТЕМЕ КОМАНД МКБ-8601.
$НА В НАСТОЯЩЕМ ОПИСАНИИ НЕ ГОВОРИТСЯ ОБ АППАРАТЕ
УСЛОВНОЙ ТРАНСЛЯЦИИ И МАКРОГЕНЕРАЦИИ ТЕКСТА.
ВСЕ ЭТО БУДЕТ РАЗРАБОТАНО И ВНЕДРЕНО,
НАЧИНАЯ С ВЕРСИИ 3.0.
$НА НАМЕЧАЕТСЯ РЕАЛИЗОВАТЬ ПСЕВДОИНСТРУКЦИИ,
ОПИСЫВАЮЩИЕ ДИНАМИЧЕСКИЕ ПЕРЕМЕННЫЕ
И УПРОСТИТЬ ИСПОЛЬЗОВАНИЕ ДИНАМИЧЕСКИХ ПЕРЕМЕННЫХ В ПРОГРАММЕ.
$НА ИМЕЕТСЯ В ВИДУ СОЗДАНИЕ АППАРАТА
РАБОТЫ С "ДЛИННЫМИ" АДРЕСАМИ
(ИМЕЮЩИМИ БОЛЕЕ 20-ТИ ЗНАЧАЩИХ РАЗРЯДОВ).
СТАРШИЕ 16 РАЗРЯДОВ ТАКОГО АДРЕСА
МОЖНО ЗАДАВАТЬ ПРЕФИКСАЦИЕЙ С ПОМОЩЬЮ
КОМАНДЫ ^U^Т^С^S, А МЛАДШИЕ 16 - В САМОЙ КОМАНДЕ,
ИСПОЛЬЗУЮЩЕЙ ЭТОТ АДРЕС.
$Г 11. СПИСОК ЛИТЕРАТУРЫ.
$ГГ
$ПЕРН 1._^ВОЛКОВ ^А.И. ^О^И^Я^И, ^Б4-11-4654,
^ДУБНА, 1969.
$ПЕРН 2._^ВОЛКОВ ^А.И. ^О^И^Я^И, 11-5427, ^ДУБНА, 1970.
$ПЕРН 3._^ПОПОВ ^М.Ю., ^ФЕДЮНЬКИН ^Е.Д. МОДЕРНИЗАЦИЯ
АВТОКОДА ^М^А^Д^Л^Е^Н. ^О^И^Я^И, 11-10817, ^ДУБНА, 1977.
$ПЕРН 4._^МАЗНЫЙ ^Г.Л. ПРОГРАММИРОВАНИЕ НА БЭСМ-6 В СИСТЕМЕ
"^ДУБНА", ^М., "^НАУКА", 1978.
$ПЕРН 5._^МИКРОПРОЦЕССОРНЫЕ СРЕДСТВА И СИСТЕМЫ.
N4, 1986, СТР. 61-63.
$КР
*
