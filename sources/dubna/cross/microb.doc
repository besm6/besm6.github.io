*NАМЕ N
*TIME:24.00
*EXPRESS
*LIBRA:23,24
*PAGE:999,LIST
*
*           *DISC:76/SYSTEM,WORKIN
*           *FILE:MICROB
*              1 - ОПИСАНИЕ КРОСС-СИСТЕМЫ (7)
*             10 - ТЕКСТЫ ЕЕ  (14 ЗОН)
*
*CALL KILNUMPG
*CALL ASPID*D:MACROS
#ОНСЦ
#Ц ОБЬЕДИНЕННЫЙ ИНСТИТУТ ЯДЕРНЫХ ИССЛЕДОВАНИЙ #А0
#Ц ЛАБОРАТОРИЯ ВЫЧИСЛИТЕЛЬНОЙ ТЕХНИКИ И АВТОМАТИЗАЦИИ #А0
#БС15
#Ц @А.П.САПОЖНИКОВ #А0
#БС10 #Б
#Ц КРОСС-СИСТЕМА __М_И_К_Р_О_Б #А0
#М
#БС25 #Ц ДУБНА 1985 #А0
#Г _ #ГГ #БС15
#НА В ПРОЦЕССЕ СОЗДАНИЯ @Э@В@М, РАБОТАЮЩИХ ПО ПРИНЦИПУ
 МИКРОПРОГРАММНОГО УПРАВЛЕНИЯ,
 ДОСТАТОЧНО ТРУДОЕМКОЙ РАБОТОЙ ЯВЛЯЕТСЯ ПОДГОТОВКА МИКРОПРОГРАММ.
 КРОМЕ ТОГО, ДЛЯ СОКРАЩЕНИЯ СРОКОВ РАЗРАБОТКИ В ЦЕЛОМ,
 ИЗГОТОВЛЕНИЕ МИКРОПРОГРАММ НЕОБХОДИМО ВЕСТИ ПАРАЛЛЕЛЬНО
 С ИЗГОТОВЛЕНИЕМ АППАРАТУРЫ, ИСПОЛЬЗУЯ КРОСС-СРЕДСТВА НА
 ИНСТРУМЕНТАЛЬНЫХ @Э@В@М.
 К ЧИСЛУ ТАКИХ КРОСС-СРЕДСТВ ПРИНАДЛЕЖИТ И ОПИСЫВАЕМАЯ ЗДЕСЬ
 КРОСС-СИСТЕМА #Б МИКРОБ, #М РАБОТАЮЩАЯ НА #Б ЭВМ БЭСМ-6. #М
#НСЦ1 _ #Г ОБЩИЕ ПОЛОЖЕНИЯ #ГГ
  #НА МИКРОПРОГРАММА - ПОСЛЕДОВАТЕЛЬНОСТЬ СЛОВ МИКРОПРОГРАММНОЙ ПАМЯТИ
(МИКРОКОМАНД), АДРЕСУЕМЫХ ЦЕЛОЧИСЛЕННЫМ АДРЕСОМ_=_0,1,2,...
ВСЕ МИКРОКОМАНДЫ ИМЕЮТ ОДНУ И ТУ ЖЕ РАЗРЯДНОСТЬ _@N, ОПРЕДЕЛЕННУЮ
ЗАРАНЕЕ.
#НА МИКРОКОМАНДА СОСТОИТ ИЗ ФИКСИРОВАННОГО ЧИСЛА ЧАСТЕЙ (ПОЛЕЙ)
ЗАРАНЕЕ ОПРЕДЕЛЕННЫХ РАЗМЕРОВ.
КАЖДОЕ ПОЛЕ ВЫПОЛНЯЕТ САМОСТОЯТЕЛЬНУЮ ФУНКЦИЮ, СМЫСЛ КОТОРОЙ
ОПРЕДЕЛЯЕТСЯ АППАРАТУРОЙ.
ИСКЛЮЧЕНИЕ СОСТАВЛЯЮТ ДВА ПОЛЯ: ПОЛЕ КОДА МИКРООПЕРАЦИИ
И ПОЛЕ АДРЕСА СЛЕДУЮЩЕЙ МИКРОКОМАНДЫ, ФУНКЦИИ КОТОРЫХ
ОДИНАКОВЫ ПРИ ЛЮБОМ МИКРОПРОЦЕССОРЕ.
#НА ТАКОЙ ПОДХОД ХАРАКТЕРЕН ДЛЯ Т.&Н. &ГОРИЗОНТАЛЬНОГО ПРОГРАММИРОВАНИЯ.
ПРИ ЭТОМ МИКРОАССЕМБЛЕР, ПО СУЩЕСТВУ, ПРЕДСТАВЛЯЕТ ИЗ СЕБЯ
ГЕНЕРАТОР БИТОВЫХ СТРОК ПОСТОЯННОЙ ДЛИНЫ.
УНИВЕРСАЛЬНОСТЬ ЖЕ ЕГО ЗАКЛЮЧАЕТСЯ В СПОСОБНОСТИ НАСТРАИВАТЬСЯ
НА ЗАДАННЫЙ ФОРМАТ МИКРОКОМАНДЫ.
#НА #НА #НА
#Ц АРХИТЕКТУРА КРОСС-СИСТЕМЫ #Б МИКРОБ #М  #А0
#Ц -------------------------------- #А0
#НА
#А0 _
#А0 :---------:______/-----------------\______:------------:
#А0 :__ТЕКСТ__:______:___М_И_К_Р_О_-___:______:__ОПИСАНИЕ__:
#А0 :ПРОГРАММЫ:=====>:А_С_С_Е_М_Б_Л_Е_Р:<=====:__ФОРМАТА___:
#А0 :_________:______:_________________:______:МИКРОКОМАНДЫ:
#А0 :---------:______\-I-------------А-/______:------------:
#А0 ___________________I_____________I
#А0 ___________________I_____________I
#А0 ___________________I__А_Р_Х_И_В__I
#А0 ________:----------V--------:----V------------:
#А0 ________:____БИБЛИОТЕКА_____:___ГЛОБАЛЬНЫЙ____:
#А0 ________:_ОБЬЕКТНЫХ_МОДУЛЕЙ_:____КОНТЕКСТ_____:
#А0 ________:----------I--------:-----------------:
#А0 ___________________I
#А0 ___________________I
#А0 ___________/-------V-------\
#А0 ___________:___ЗАГРУЗЧИК___:
#А0 ___________\-------I-------/
#А0 ___________________I
#А0 ___________________I
#А0 ____________:------V------:
#А0 ____________:_ДВОИЧНЫЙ КОД:
#А0 ____________:-------------:
#НА #ВС3
#НА КРОСС-СИСТЕМА #Б МИКРОБ #М ИМЕЕТ МНОГО ОБЩЕГО СО "ВЗРОСЛЫМИ"
СИСТЕМАМИ ПРОГРАММИРОВАНИЯ НА ЯЗЫКАХ ВЫСОКОГО УРОВНЯ :
#ПЕРН _-_ДОПУСКАЕТСЯ РАЗДЕЛЬНАЯ ТРАНСЛЯЦИЯ ПОДПРОГРАММ;
#ПЕРН _-_РЕЗУЛЬТАТ ТРАНСЛЯЦИИ ЗАПИСЫВАЕТСЯ В БИБЛИОТЕКУ
 МОДУЛЕЙ ЗАГРУЗКИ;
#ПЕРН _-_ДЛЯ ПОЛУЧЕНИЯ ГОТОВОЙ ДВОИЧНОЙ ПРОГРАММЫ
 ИСПОЛЬЗУЕТСЯ СВЯЗЫВАЮЩИЙ ЗАГРУЗЧИК;
#НА #НА #НА
#Ц 1._ВЫЗОВ ТРАНСЛЯТОРА #А0
#Ц -------------------- #А0
#НА ПАКЕТ ЗАДАЧИ, ЗАПУСКАЕМОЙ НА @Б@Э@С@М-6 С ЦЕЛЬЮ ТРАНСЛЯЦИИ
 МИКРОПРОГРАММ, ВЫГЛЯДИТ СЛЕДУЮЩИМ ОБРАЗОМ :
#А10 _
#А10 *NАМЕ_.....
#А10 *PASS:.....
#А10 *TIME:.....
#А10 *LIBRARY:23,25
#А10 _<ЗАКАЗ АРХИВА ПОД НОМЕРОМ 30>
#А10 _<ЗАКАЗ, ЕСЛИ НАДО, ФАЙЛА С ТЕКСТОМ>
#А10 *CALL MICROB_[_:<УК.&МЛ>_[_,<СПИСОК>_]_]
#А3 ИЛИ:
#А10 *CALL MICINI_[_:<УК.&МЛ>_[_,<СПИСОК>_]_]
#НА В КВАДРАТНЫЕ СКОБКИ _[_]_ ЗДЕСЬ И ДАЛЕЕ МЫ БУДЕМ
ЗАКЛЮЧАТЬ НЕОБЯЗАТЕЛЬНЫЕ ПАРАМЕТРЫ ИЛИ СИНТАКСИЧЕСКИЕ КОНСТРУКЦИИ.
ЗДЕСЬ НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР <УК.&МЛ> ЗАДАЕТ АДРЕС НАЧАЛА
ФАЙЛА, СОДЕРЖАЩЕГО ТЕКСТЫ МИКРОПРОГРАММ.
ПРИЧЕМ ТРАНСЛЯЦИИ ПОДЛЕЖАТ ТОЛЬКО МИКРОПРОГРАММЫ, УКАЗАННЫЕ
В СПИСКЕ. ПРИ ПУСТОМ СПИСКЕ ТРАНСЛИРУЕТСЯ ВЕСЬ ФАЙЛ.
ПРИ ОТСУТСТВИИ <УК.&МЛ> ТЕКСТ ЧИТАЕТСЯ ИЗ ПАКЕТА ЗАДАЧИ.
ПРИЗНАКОМ КОНЦА ТЕКСТА СЧИТАЕТСЯ КАРТА __*END
#ПЕРН #Б MICROB #М - ВХОД ДЛЯ ТРАНСЛЯЦИИ.
 ПРИ ЭТОМ СЧИТАЕТСЯ, ЧТО ОПИСАНИЕ ФОРМАТА МИКРОКОМАНДЫ
 (Т.&Н. &ГЛОБАЛЬНЫЙ КОНТЕКСТ) УЖЕ ЗАПИСАНО В АРХИВ АССЕМБЛЕРА.
#ПЕРН #Б MICINI #М - ВХОД ПРИ ПЕРВОНАЧАЛЬНО ПУСТОМ АРХИВЕ.
 ПРИ ЭТОМ ТЕКСТ, ПОДЛЕЖАЩИЙ ТРАНСЛЯЦИИ, ПРЕДВАРЯЕТСЯ
 ОПИСАНИЕМ ФОРМАТА МИКРОКОМАНДЫ.
#НА #НА #НА
#Ц 2._ТРАНСЛЯЦИЯ ГЛОБАЛЬНОГО КОНТЕКСТА #А0
#Ц ----------------------------------- #А0
#НА ГЛОБАЛЬНЫЙ КОНТЕКСТ МИКРОПРОГРАММЫ СОСТОИТ ИЗ
#ПЕРН _-_ОПИСАНИЯ ФОРМАТА МИКРОКОМАНДЫ;
#ПЕРН _-_ОПРЕДЕЛЕНИЯ ГЛОБАЛЬНЫХ ИМЕН;
#ПЕРН _-_ОПИСАНИЯ КОНСТАНТ ИЗ @П@З@У;
#НА ГЛОБАЛЬНЫЙ КОНТЕКСТ ОФОРМЛЯЕТСЯ В ВИДЕ ПСЕВДОПРОГРАММЫ,
ИМЕЮЩЕЙ ИМЯ #Б _DEFINE: #М
#А0 _
#А13 DEFINE:PROG_N,К;_______________- ЗАГОЛОВОК
#А13 _____..........________________
#А13 _______END;____________________- КОНЕЦ
#НА ЗДЕСЬ _@N_ ЗАДАЕТ РАЗРЯДНОСТЬ МИКРОКОМАНДЫ,
 _@К_-_РАЗРЯДНОСТЬ @П@З@У КОНСТАНТ.
 БИТЫ В МИКРОКОМАНДЕ НУМЕРУЮТСЯ СПРАВА НАЛЕВО : _@N,_@N-1,_...,2,1.
 ПРИ НЕУКАЗАНИИ _@К_=_64.
#НА ВНУТРИ ПСЕВДОПРОГРАММЫ #Б DEFINE #М НАХОДЯТСЯ ИНСТРУКЦИИ,
ОПРЕДЕЛЯЮЩИЕ ПОЛЯ МИКРОКОМАНДЫ И ГЛОБАЛЬНЫЕ ИМЕНА,
КОТОРЫЕ СЧИТАЮТСЯ ПРЕДОПИСАННЫМИ ВО ВСЕХ МИКРОПРОГРАММАХ.
#НА НЕСКОЛЬКО ЗАМЕЧАНИЙ ТЕРМИНОЛОГИЧЕСКОГО ХАРАКТЕРА :
#ПЕРН <ЧИСЛО> - ЦЕЛОЕ ДЕСЯТИЧНОЕ, ЕСЛИ НЕТ СПЕЦИАЛЬНЫХ ОГОВОРОК;
#ПЕРН <ИМЯ> - ИДЕНТИФИКАТОР В СМЫСЛЕ АЛГОЛА, ДЛИНОЙ НЕ БОЛЕЕ 6 СИМВОЛОВ;
#ПЕРН <ВЫРАЖЕНИЕ> - СПИСОК ТЕРМОВ, ОТДЕЛЕННЫХ ДРУГ ОТ ДРУГА
 ЗНАКАМИ "+" ИЛИ "-";
#ПЕРН <ТЕРМ> - ЧИСЛО, ИМЯ ИЛИ СПЕЦИАЛЬНЫЙ СИМВОЛ "*";
#НА ПО АНАЛОГИИ С АССЕМБЛЕРАМИ УРОВНЯ 2, НА ЯЗЫК ТАК И ПРОСЯТСЯ
 СЛОВА "ПЕРЕМЕННАЯ" И "ЗНАЧЕНИЕ".
 ОДНАКО В МИКРОПРОГРАММАХ НЕ БЫВАЕТ РАБОЧИХ ЯЧЕЕК ПАМЯТИ,
 А СОДЕРЖИМОЕ ПОЛЕЙ МИКРОКОМАНД НЕ МЕНЯЕТСЯ В ХОДЕ РАБОТЫ.
 ПОЭТОМУ, ГОВОРЯ О МИКРОАССЕМБЛЕРЕ, МЫ ДОЛЖНЫ ИМЕТЬ В ВИДУ,
 ЧТО ЛЮБОЕ ИМЯ В ПРОГРАММЕ - ЭТО ВСЕГО ЛИШЬ МНЕМОНИКА
 ДЛЯ ОБОЗНАЧЕНИЯ ЧИСЛА ИЛИ АДРЕСА.
#НА ВСЕ-ТАКИ В ДАЛЬНЕЙШЕМ, РАДИ КРАТКОСТИ,
 МЫ БУДЕМ НАЗЫВАТЬ ЗНАЧЕНИЕМ ВЫРАЖЕНИЯ СУММУ ЕГО ТЕРМОВ,
 ВЗЯТЫХ СО СВОИМИ ЗНАКАМИ.
 ТЕРМЫ, ВХОДЯЩИЕ В ВЫРАЖЕНИЕ, МОГУТ БЫТЬ ТРЕХ ТИПОВ :
#ПЕРН _-_ЧИСЛО. КОЛИЧЕСТВО ТЕРМОВ ЭТОГО ТИПА В
 ВЫРАЖЕНИИ НЕ ОГРАНИЧЕНО;
#ПЕРН _-_АДРЕС ОТНОСИТЕЛЬНО НАЧАЛА "СВОЕЙ" ПРОГРАММЫ.
 В ПРАВИЛЬНОМ ВЫРАЖЕНИИ ДОЛЖНО ВЫПОЛНЯТЬСЯ СООТНОШЕНИЕ
#А12 0_<=_@N@P-@N@N_<=_1
#А0 ГДЕ @N@P - ЧИСЛО ОТНОСИТЕЛЬНЫХ АДРЕСОВ СО ЗНАКОМ "+",
#А0 ____@N@N - ЧИСЛО ОТНОСИТЕЛЬНЫХ АДРЕСОВ СО ЗНАКОМ "-";
#ПЕРН _-_АДРЕС ВНЕШНЕЙ ПРОГРАММЫ. В ВЫРАЖЕНИИ ДОПУСКАЕТСЯ
 ТОЛЬКО ОДИН ТЕРМ ЭТОГО ТИПА, СО ЗНАКОМ "+", И ПРИ УСЛОВИИ,
 ЧТО _@N@P_=_@N@N.
#НА #НА
#Ц 2.1._ФОРМАТ МИКРОКОМАНДЫ #А0
#Ц ------------------------ #А0
#НА КРОМЕ РАЗРЯДНОСТИ _@N_ ФОРМАТ МИКРОКОМАНДЫ ХАРАКТЕРИЗУЕТСЯ
 ЕЩЕ НАБОРОМ ПОЛЕЙ, ЕЕ СОСТАВЛЯЮЩИХ.
 ДЛЯ ОПИСАНИЯ ОДНОГО ПОЛЯ СЛУЖИТ ИНСТРУКЦИЯ #Б _FIELD_: #М
#НА #Ц #Б <ИМЯ ПОЛЯ>:FIELD_N1,N2_[,N3_] #М #А0
#ПЕРН @N1,_@N2 - ЧИСЛА, ЗАДАЮЩИЕ ЛЕВУЮ И ПРАВУЮ ГРАНИЦУ ПОЛЯ
 (В ЛЮБОМ ПОРЯДКЕ);
#ПЕРН @N3 - ВЫРАЖЕНИЕ, ЗНАЧЕНИЕ КОТОРОГО ЗАДАЕТ НАЧАЛЬНОЕ СОДЕРЖИМОЕ
 ПОЛЯ. ПРИ НЕУКАЗАНИИ _@N3 СЧИТАЕТСЯ НУЛЕМ;
#НА ДОПУСКАЕТСЯ ВЛОЖЕНИЕ ОДНИХ ПОЛЕЙ В ДРУГИЕ,
 ПЕРЕКРЫТИЕ ПОЛЕЙ НЕ ДОПУСКАЕТСЯ (АНАЛОГИЧНО ФОРТРАННЫМ @D@O_-_ЦИКЛАМ).
 ПОРЯДОК ОПИСАНИЯ ПОЛЕЙ - ПРОИЗВОЛЬНЫЙ.
#НА ДЛЯ ПОЛЯ КОДА ОПЕРАЦИИ СЕКВЕНСОРА В КАЧЕСТВЕ ПАРАМЕТРА @N3 НЕОБХОДИМ
 УКАЗЫВАТЬ МАРКИРУЮЩУЮ КОНСТРУКЦИЮ _/@С/
#НА ДЛЯ ПОЛЯ АДРЕСА МИКРОПРОГРАММЫ В КАЧЕСТВЕ ПАРАМЕТРА _@N3
 НЕОБХОДИМО УКАЗЫВАТЬ МАРКИРУЮЩУЮ КОНСТРУКЦИЮ _/@А/
#НА #НА
#Ц 2.2._ОПРЕДЕЛЕНИЕ ГЛОБАЛЬНЫХ ИМЕН #А0
#Ц -------------------------------- #А0
#НА ГЛОБАЛЬНЫЕ ИМЕНА ОПРЕДЕЛЯЮТСЯ С ПОМОЩЬЮ ИНСТРУКЦИЙ
#Б _EQU__&И__BLOCK_:
#НА #Ц #Б <ИМЯ>:EQU_<ВЫРАЖЕНИЕ>; #М #А0
#НА ЗДЕСЬ НОВОЕ <ИМЯ> ОПРЕДЕЛЯЕТСЯ КАК ЧИСЛО, РАВНОЕ ЗНАЧЕНИЮ
 <ВЫРАЖЕНИЯ>.
 ТРАНСЛЯЦИЯ ГЛОБАЛЬНОГО КОНТЕКСТА ПРОИЗВОДИТСЯ ЗА ОДИН ПРОХОД,
 ПОЭТОМУ ВСЕ ИМЕНА, ВХОДЯЩИЕ В <ВЫРАЖЕНИЕ>, ДОЛЖНЫ БЫТЬ
 УЖЕ ОПРЕДЕЛЕНЫ.
#НА #Ц #Б <ИМЯ>:BLOCK_<СПИСОК ИМЕН>; #М #А0
#НА ЭТО СПОСОБ "ГРУППОВОГО" ОПРЕДЕЛЕНИЯ ИМЕН, АНАЛОГИЧНЫЙ
 ФОРТРАНОВСКОМУ _COMMON-БЛОКУ. <ИМЯ> ДОЛЖНО БЫТЬ УЖЕ ОПРЕДЕЛЕНО.
 #НА NАМЕ:BLOCK_NАМ1,NАМ2(2),NАМ3;____________- ЭКВИВАЛЕНТНО
#А3 NАМ1:EQU_NАМЕ;____NАМ2:EQU_NАМ1+1;____NАМ3:EQU_NАМ2+2;
#НА В ЛЕВОЙ ЧАСТИ ИНСТРУКЦИИ _@B@L@O@C@K_ РАЗРЕШЕНО УКАЗЫВАТЬ
 ШЕСТНАДЦАТИРИЧНЫЕ ЧИСЛА С ПРЕФИКСОМ "*" :
#НА *1А:BLOCK_А,В(5),С;______________________- ЭКВИВАЛЕНТНО
#А3 А:EQU_$1А;____В:EQU_$1В;____С:EQU_$20;
#НА ШЕСТНАДЦАТИРИЧНЫЕ ЧИСЛА В ПРАВОЙ ЧАСТИ ИНСТРУКЦИИ
 (ВХОДЯЩИЕ В КАЧЕСТВЕ ТЕРМОВ В ВЫРАЖЕНИЯ) СНАБЖАЮТСЯ ПРЕФИКСОМ "$"
 /ДОЛЛАР/).
#НА #НА
#Ц 2.3._ОПИСАНИЕ КОНСТАНТ ИЗ ПЗУ #А0
#Ц ----------------------------- #А0
#НА В АДРЕСНОМ ПОЛЕ МИКРОКОМАНДЫ КРОМЕ АДРЕСА ПО @О@З@У
 МИКРОПРОГРАММ МОЖЕТ НАХОДИТЬСЯ АДРЕС ПО @П@З@У КОНСТАНТ.
 ДЛЯ ЭТОГО В АДРЕСНОМ ВЫРАЖЕНИИ ДОСТАТОЧНО УКАЗАТЬ ИМЯ
 КОНСТАНТЫ. ИМЕНА КОНСТАНТ ЯВЛЯЮТСЯ ГЛОБАЛЬНЫМИ, Т.&Е. &ПРЕДОПИСАННЫМИ
 В ЛЮБОЙ ПОДПРОГРАММЕ. КОНСТАНТЫ РАЗМЕЩАЮТСЯ В @П@З@У В ПОРЯДКЕ
 ПОЯВЛЕНИЯ ИХ ОПИСАНИЙ, НАЧИНАЯ С АДРЕСА 0.
 ФОРМАТ ОПИСАНИЯ КОНСТАНТЫ :
#НА #Ц #Б <ИМЯ>:CONST_<ШЕСТНАДЦАТИРИЧНОЕ_ЧИСЛО>; #М #А0
#НА РАЗРЯДНОСТЬ ВСЕХ КОНСТАНТ ОДИНАКОВА. ОНА ЗАДАЕТСЯ В
 ИНСТРУКЦИИ #Б _DEFINE_. #М
 ЛЕВЫЕ НУЛИ В КОНСТАНТАХ МОЖНО ОПУСКАТЬ.
#НА #НА
#Ц 2.4._НЕМНОГО О СИНТАКСИСЕ #А0
#Ц ------------------------- #А0
 #НА НА ОДНОЙ КАРТЕ НАХОДИТСЯ ОДНА ИНСТРУКЦИЯ. ФОРМАТ - НЕ ФИКСИРОВАННЫЙ
 ИНСТРУКЦИЯ МОЖЕТ НАЧИНАТЬСЯ С ЛЮБОЙ ПОЗИЦИИ КАРТЫ. ПРОБЕЛЫ, ВООБЩЕ
 ГОВОРЯ, ЯВЛЯЮТСЯ РАЗДЕЛИТЕЛЯМИ.
 ПРОБЕЛЫ МЕЖДУ РАЗДЕЛИТЕЛЕМ И НАЧАЛОМ СЛЕДУЮЩЕЙ ЛЕКСЕМЫ ИГНОРИРУЮТСЯ.
 РАЗДЕЛИТЕЛИ: ДВОЕТОЧИЕ, ТОЧКА С ЗАПЯТОЙ, ЗАПЯТАЯ, ПЛЮС, МИНУС.
 ОБЩИЙ ФОРМАТ ИНСТРУКЦИИ :
#НА #Ц [_<ИМЯ>:_]_<КОД ИНСТРУКЦИИ>__[_<ПАРАМЕТРЫ>_];
#А0 #НА
 ВСЕ СИМВОЛЫ ПОСЛЕ ";" ДО КОНЦА ТЕКУЩЕЙ КАРТЫ РАССМАТРИВАЮТСЯ КАК
 КОММЕНТАРИЙ. В ЧАСТНОСТИ, НА КАРТЕ МОЖЕТ НАХОДИТЬСЯ ТОЛЬКО
 КОММЕНТАРИЙ, ЕСЛИ ";" РАСПОЛОЖЕНА В 1-Й ПОЗИЦИИ.
 ЕСЛИ ПОСЛЕ ИНСТРУКЦИИ КОММЕНТАРИЯ НЕТ, СИМВОЛ ";" МОЖНО ОПУСТИТЬ.
#НА НЕДОЛГИЙ ОПЫТ РАБОТЫ С МИКРОАССЕМБЛЕРОМ ПОКАЗАЛ, ЧТО ОЧЕНЬ ЧАСТО
 ДЛЯ РАЗМЕЩЕНИЯ ИНСТРУКЦИИ ОДНОЙ КАРТЫ НЕ ХВАТАЕТ.
 ПОЭТОМУ ПРИНЯТО ТАКОЕ РЕШЕНИЕ: СИМВОЛ ">", НАХОДЯЩИЙСЯ В ПЕРВОЙ
 ПОЗИЦИИ, ОЗНАЧАЕТ, ЧТО ЭТА КАРТА ЯВЛЯЕТСЯ ПРОДОЛЖЕНИЕМ ПРЕДЫДУЩЕЙ.
 АССЕМБЛЕР СПОСОБЕН "ЗАГЛЯДЫВАТЬ ВПЕРЕД" ПО ФАЙЛУ ЧТЕНИЯ.
 ОБНАРУЖИВ ">" В ПЕРВОЙ ПОЗИЦИИ СЛЕДУЮЩЕЙ КАРТЫ, ОН ПРОСТО
 "ПОДКЛЕИВАЕТ ЕЕ В ХВОСТ" ТЕКУЩЕЙ.
 ЧИСЛО КАРТ ПРОДОЛЖЕНИЯ - НЕ БОЛЕЕ 20.
#НА #НА
#Ц 2.5.__П_Р_И_М_Е_Р_: #А0
#Ц ------------------- #А0
#НА
#А10 *LIBRA:23,25
#А10 *FILE:SCRATCH,30,W
#А10 *CALL MICINI
#А10 _DEFINE:PROG_72;________- РАЗРЯДНОСТЬ = 72
#А10 ;________ПО_УМОЛЧАНИЮ_РАЗРЯДНОСТЬ_ПЗУ_=_64
#А10 ;
#А10 ;_____ОПРЕДЕЛИМ ПОЛЯ МИКРОКОМАНДЫ :
#А10 _SEQV:FIELD_72,64,/С/;__- КОД МИКРООПЕРАЦИИ
#А10 ____А:FIELD_50,63,/А/;__- АДРЕСА ПЕРЕХОДОВ
#А10 __АЛУ:FIELD_49,40;______- К О П___А_Л_У
#А10 ___CI:FIELD_39,
#А10 >39,1;____________- ПРИМЕР КАРТЫ-ПРОДОЛЖЕНИЯ
#А10 ;
#А10 ;_____ОПРЕДЕЛИМ КОДЫ СЕКВЕНСОРА :
#А10 _JUMP:EQU_0
#А10 _TEST:EQU_JUMP+1
#А10 ;
#А10 ;_____ОПРЕДЕЛИМ КОДЫ __А_Л_У_:
#А10 _*0:BLOCK_AND,OR,SUB,ADD,MUL;
#А10 ;
#А10 ;_____ПАРОЧКА _ПЗУ_-_КОНСТАНТ_:
#А10 __К1:CONST_FFFF;
#А10 __К2:CONST_1234567890ABCDEF;
#А10 ;
#А10 ;_____И ЕЩЕ НЕСКОЛЬКО ГЛОБАЛЬНЫХ ИМЕН :
#А10 __ONE:EQU_1
#А10 __TWO:EQU_2-ONE+1;
#А10 __TEN:EQU_9+TWO-ONE
#А10 ______END;
#А10 *END
#НА #НА
#НА #НА
#Ц 3._ТРАНСЛЯЦИЯ МИКРОПРОГРАММ #А0
#Ц --------------------------- #А0
#НА ВСЯ МИКРОПРОГРАММА СКЛАДЫВАЕТСЯ ИЗ ОТДЕЛЬНЫХ БЛОКОВ - ПОДПРОГРАММ.
 ДОПУСКАЕТСЯ РАЗДЕЛЬНАЯ ТРАНСЛЯЦИЯ ПОДПРОГРАММ.
 РЕЗУЛЬТАТОМ ТРАНСЛЯЦИИ ЯВЛЯЕТСЯ МОДУЛЬ ЗАГРУЗКИ,
 ЗАПИСАННЫЙ В БИБЛИОТЕКУ ОБЬЕКТНЫХ МОДУЛЕЙ.
 ПРИ ЭТОМ, ЕСЛИ В БИБЛИОТЕКЕ УЖЕ БЫЛА ПРОГРАММА С ТАКИМ ЖЕ ИМЕНЕМ,
 ТО СТАРАЯ ВЕРСИЯ УНИЧТОЖАЕТСЯ (АНАЛОГИЧНО БИБЛИОТЕКАМ В
 МОНИТОРНОЙ СИСТЕМЕ "ДУБНА").
 ПРИ ТРАНСЛЯЦИИ ИСПОЛЬЗУЕТСЯ УЖЕ ИМЕЮЩИЙСЯ В АРХИВЕ ГЛОБАЛЬНЫЙ КОНТЕКСТ.
 ПЕРЕЧИСЛИМ ТЕПЕРЬ СИНТАКСИЧЕСКИЕ КОНСТРУКЦИИ, ИЗ КОТОРЫХ
 СКЛАДЫВАЕТСЯ ПОДПРОГРАММА :
#ПЕРН 1._ЗАГОЛОВОК ПОДПРОГРАММЫ
#А0 #Б <ИМЯ ПОДПРОГРАММЫ>:PROG_[_<ХАРАКТЕРИСТИКА>_]_; #М
#А0 ХАРАКТЕРИСТИКА - ЭТО ШЕСТНАДЦАТИРИЧНОЕ ЧИСЛО, ИНТЕРПРЕТАЦИЕЙ
КОТОРОГО БУДЕТ ЗАНИМАТЬСЯ ТОЛЬКО ЗАГРУЗЧИК. НА ТРАНСЛЯЦИЮ
ПРОГРАММЫ ЕЕ ХАРАКТЕРИСТИКА НЕ ВЛИЯЕТ.
#ПЕРН 2._КОНЕЦ ПОДПРОГРАММЫ
#А0 #Б END; #М
#ПЕРН 3._ОПИСАНИЕ ТОЧКИ ВХОДА (ENTRY)
#А0 #Б <ИМЯ ВХОДА>:ENTRY; #М
#ПЕРН 4._ОПИСАНИЕ ВНЕШНИХ ПРОГРАММ
#А0 #Б EXTERN_<СПИСОК ИМЕН>;
#ПЕРН 5._ОПРЕДЕЛЕНИЕ ЛОКАЛЬНЫХ ИМЕН
#Б
#А0 ____________________<ИМЯ>:EQU___<ВЫРАЖЕНИЕ>;
#А0 <ИМЯ ИЛИ *<ШЕСТН.&ЧИСЛО>>:BLOCK_<СПИСОК ИМЕН>; #М
#А0 ЭТИ КОНСТРУКЦИИ "РАБОТАЮТ" ТАК ЖЕ, КАК В 2.2.
#А0 НО, В ОТЛИЧИЕ ОТ ГЛОБАЛЬНОГО КОНТЕКСТА, ЗДЕСЬ ЗНАЧЕНИЕМ
 ВЫРАЖЕНИЯ МОЖЕТ БЫТЬ НЕ ТОЛЬКО ЧИСЛО, НО И АДРЕС.
 ДОПУСКАЕТСЯ ИСПОЛЬЗОВАНИЕ ЕЩЕ НЕ ОПРЕДЕЛЕННЫХ ИМЕН.
 ПЕРЕОПРЕДЕЛЕНИЕ ГЛОБАЛЬНЫХ ИМЕН НЕ ДОПУСКАЕТСЯ.
#ПЕРН 6._ИЗМЕНЕНИЕ НАЧАЛЬНОГО СОДЕРЖИМОГО ПОЛЯ
#А0 #Б <ИМЯ ПОЛЯ>:VALUE_<ВЫРАЖЕНИЕ>; #М
#А0 НАЧАЛЬНЫМ СОСТОЯНИЕМ ЗАДАННОГО ПОЛЯ СЧИТАЕТСЯ ЗНАЧЕНИЕ
<ВЫРАЖЕНИЯ> В ПРАВОЙ ЧАСТИ ИНСТРУКЦИИ.
ИНСТРУКЦИЯ "РАБОТАЕТ" ТОЛЬКО В ПРЕДЕЛАХ ТРАНСЛИРУЕМОЙ ПОДПРОГРАММЫ.
ПРИ ПЕРЕХОДЕ К СЛЕДУЮЩЕЙ ПОДПРОГРАММЕ АССЕМБЛЕР ВНОВЬ ИЗВЛЕКАЕТ
ИНФОРМАЦИЮ О НАЧАЛЬНЫХ ЗНАЧЕНИЯХ ПОЛЕЙ ИЗ ГЛОБАЛЬНОГО КОНТЕКСТА.
#ПЕРН 7._МИКРОКОМАНДА
#А0 #Б [<МЕТКА>:]<КОП>__<СПИСОК ПОЛЕЙ И ИХ ЗНАЧЕНИЙ>; #М
#НА #Б <КОП> - #М КОД МИКРООПЕРАЦИИ (ЕГО ЕЩЕ ИНОГДА НАЗЫВАЮТ
 КОДОМ ОПЕРАЦИИ СЕКВЕНСОРА). ЭТО СИМВОЛИЧЕСКОЕ ИМЯ,
 ОПРЕДЕЛЕННОЕ В ГЛОБАЛЬНОМ ИЛИ ЛОКАЛЬНОМ КОНТЕКСТЕ.
#А0 НАПРИМЕР: _____*6:BLOCK_РОР,PUSH;
#А0 АССЕМБЛЕР ПОДСТАВЛЯЕТ ЗНАЧЕНИЕ ИМЕНИ #Б <КОП> #М В ТО ПОЛЕ
 МИКРОКОМАНДЫ, КОТОРОЕ ПОМЕЧЕНО МАРКИРОВКОЙ _/@С/. (СМ._2.1).
#НА ЗАПОЛНЕНИЕ ОСТАЛЬНЫХ ПОЛЕЙ МИКРОКОМАНДЫ ПРОИЗВОДИТСЯ
 ПО ОБЩЕМУ АЛГОРИТМУ, НА ОСНОВАНИИ <СПИСКА ПОЛЕЙ> В ПРАВОЙ ЧАСТИ
 МИКРОКОМАНДЫ.
 ЭЛЕМЕНТЫ СПИСКА ЗАДААЮТСЯ В ПРОИЗВОЛЬНОМ ПОРЯДКЕ И ОТДЕЛЯЮТСЯ
 ДРУГ ОТ ДРУГА ЗАПЯТЫМИ. КАЖДЫЙ ЭЛЕМЕНТ СПИСКА
 ПРЕДСТАВЛЯЕТСЯ ЛИБО ПАРОЙ :
#НА #Ц <ИМЯ ПОЛЯ>_=_<ВЫРАЖЕНИЕ> #А0
#А0 _
#А0 ЛИБО ПРОСТО ИМЕНЕМ ПОЛЯ (ДЛЯ ОДНОБИТОВЫХ ПОЛЕЙ).
ЕСЛИ В СПИСКЕ КАКОЕ-ТО ПОЛЕ НЕ УКАЗАНО, ТО В КОМАНДУ ЗАНОСИТСЯ
НАЧАЛЬНОЕ ЗНАЧЕНИЕ ЭТОГО ПОЛЯ, УКАЗАННОЕ ИНСТРУКЦИЕЙ #Б VALUE #М
ИЛИ ВЗЯТОЕ ИЗ ГЛОБАЛЬНОГО КОНТЕКСТА.
#НА ЗДЕСЬ ВОЗМОЖНЫ НЕОДНОЗНАЧНОСТИ ПРИ НАЛИЧИИ ВЛОЖЕННЫХ ПОЛЕЙ.
ДЛЯ ОПРЕДЕЛЕННОСТИ ПРИНЯТО СЛЕДУЮЩЕЕ РЕШЕНИЕ :
НЕЗАПОЛНЕННЫЕ ПОЛЯ ПРОСМАТРИВАЮТСЯ В ПОРЯДКЕ УБЫВАНИЯ ИХ ШИРИНЫ
(Т.&Е.&РАССТОЯНИЯ МЕЖДУ ЛЕВОЙ И ПРАВОЙ ГРАНИЦАМИ).
ДАЛЕЕ, ЕСЛИ ПОЛЕ ПОЛУЧИЛО ЗНАЧЕНИЕ, ТО ЗАПОЛНЕННЫМИ СЧИТАЮТСЯ
 И ВСЕ ВЛОЖЕННЫЕ В НЕГО ПОЛЯ.
#НА МАРКИРОВКА АДРЕСНОГО ПОЛЯ (СМ._2.1) ПОЗВОЛЯЕТ ОТСЛЕЖИВАТЬ
 СЛУЧАИ ОШИБОЧНОГО ЗАПОЛНЕНИЯ НЕАДРЕСНЫХ ПОЛЕЙ АДРЕСНОЙ ИНФОРМАЦИЕЙ.
#НА #НА
#Ц ПРИМЕРЫ МИКРОКОМАНД : #А0
#НА
 РАССМОТРИМ НЕБОЛЬШОЙ ФРАГМЕНТ МИКРОПРОГРАММЫ. ПРИ ЭТОМ МЫ
 ВОСПОЛЬЗУЕМСЯ ГЛОБАЛЬНЫМ КОНТЕКСТОМ, ОПИСАННЫМ В (2.4).
#А0 _
#А15 СНЕСК1:TEST_А=СНЕСК2,CI,АЛУ=SUB
#А15 _______JUMP_А=*-1
#А15 СНЕСК2:JUMP_А=INTER,АЛУ=ADD
#НА ПОЛЕ @S@E@Q@V (ОНО ОТМЕЧЕНО МАРКИРОВКОЙ /@С/_)
ЗАПОЛНЯЕТСЯ В ПЕРВОЙ КОМАНДЕ КОДОМ 1 (TEST=1),
А ВО ВТОРОЙ И ТРЕТЬЕЙ - КОДОМ 0 (JUMP=0).
#НА
В ПОЛЕ @А ПОПАДУТ СООТВЕТСТВЕННО АДРЕСА МЕТОК #Б СНЕСК2,_СНЕСК1 _&И
 _INTER.
 #М
ТЕРМ "*" В АДРЕСНЫХ ВЫРАЖЕНИЯХ, КАК И В БОЛЬШИНСТВЕ ОБЫЧНЫХ АССЕМБЛЕРОВ,
 ОЗНАЧАЕТ ТЕКУЩЕЕ СОСТОЯНИЕ СЧЕТЧИКА ОТНОСИТЕЛЬНЫХ АДРЕСОВ
ВНУТРИ ПОДПРОГРАММЫ.
ОКОНЧАТЕЛЬНАЯ НАСТРОЙКА ПРОГРАММЫ ПО АДРЕСАМ ВЫПОЛНЯЕТСЯ ЗАГРУЗЧИКОМ.
#НА В ПОЛЕ _@А@Л@У ПОПАДЕТ В ПЕРВОМ СЛУЧАЕ КОД 2, В ТРЕТЬЕМ - КОД 3.
 ДЛЯ ВТОРОЙ КОМАНДЫ "СРАБОТАЕТ" ПРАВИЛО УМОЛЧАНИЯ, И В ПОЛЕ _@А@Л@У
 ПОПАДЕТ КОД 0.
#НА ПОЛЕ _@C@I_ ВО ВСЕХ ТРЕХ КОМАНДАХ РАВНО 1.
 В ПЕРВОЙ КОМАНДЕ ОНО ЯВНО УКАЗАНО В СПИСКЕ ПОЛЕЙ (НАЛИЧИЕ ИМЕНИ
 ОДНОБИТОВОГО ПОЛЯ В СПИСКЕ ВЛЕЧЕТ ЗАПОЛНЕНИЕ ЕГО КОДОМ 1).
 В ОСТАЛЬНЫХ КОМАНДАХ ОНО ЗАПОЛНИТСЯ "1" ПО УМОЛЧАНИЮ.
#НА ЕСЛИ БЫ НАМ ТРЕБОВАЛОСЬ ПРИ УМОЛЧАНИИ ПОЛАГАТЬ _@C@I_=_0,
 ТО СЛЕДОВАЛО БЫ ИЗМЕНИТЬ НАЧАЛЬНОЕ ЗНАЧЕНИЕ ЭТОГО ПОЛЯ С ПОМОЩЬЮ
 ИНСТРУКЦИИ  VALUE : #Б __CI:VALUE_0; #М
#НА #НА
#Ц 3.1._УПРАВЛЕНИЕ ПЕЧАТЬЮ ЛИСТИНГА #А0
#Ц -------------------------------- #А0
#НА КАРТА _*NО_LIST_, ВСТРЕТИВШАЯСЯ В ЛЮБОМ МЕСТЕ ТЕКСТА ПРОГРАММЫ,
 ОТКЛЮЧАЕТ ПЕЧАТЬ ЛИСТИНГА.
 КАРТА _*FULL_LIST_, ВСТРЕТИВШАЯСЯ В ЛЮБОМ МЕСТЕ ТЕКСТА ПРОГРАММЫ,
 ВКЛЮЧАЕТ ПЕЧАТЬ ЛИСТИНГА.
 ОШИБОЧНЫЕ КАРТЫ РАСПЕЧАТЫВАЮТСЯ БЕЗУСЛОВНО.
#НА ЛИСТИНГ ПРОГРАММЫ ПЕЧАТАЕТСЯ СТРОКАМИ ШИРИНОЙ 128 ПОЗИЦИЙ.
 СТРОКА СООТВЕТСТВУЕТ ОДНОЙ ИНСТРУКЦИИ МИКРОАССЕМБЛЕРА.
 ФОРМАТ СТРОКИ :
#НА #Ц АААА__ННН....&Н___LLLLLL:КККК....&К #А0
#ПЕРН А_-_ШЕСТНАДЦАТИРИЧНЫЙ ОТНОСИТЕЛЬНЫЙ АДРЕС ИЛИ ПУСТО;
#ПЕРН Н_-_СТРОКА ОБЬЕКТНОГО КОДА В ШЕСТНАДЦАТИРИЧНОМ ВИДЕ.
#А0 ЕСЛИ В ИНСТРУКЦИИ ОБНАРУЖЕНА ОШИБКА, ТО В ЭТОМ ПОЛЕ
 ПОЯВЛЯЕТСЯ ТЕКСТ ДИАГНОСТИКИ.
#ПЕРН L_-_МЕТКА В КОМАНДЕ ИЛИ ПУСТО;
#ПЕРН К_-_КОД ОПЕРАЦИИ, ПАРАМЕТРЫ И КОММЕНТАРИЙ.
#НА ЕСЛИ ИНСТРУКЦИЯ НЕ УМЕЩАЕТСЯ В 128 ПОЗИЦИЙ, ПРОИЗВОДИТСЯ ПЕРЕНОС
В СЛЕДУЮЩУЮ СТРОКУ ЛИСТИНГА, ПРИЧЕМ ПОЛЯ _А-L_ ПЕЧАТАЮТСЯ ПУСТЫМИ.
ПЕРЕНОС ПРОИЗВОДИТСЯ НА ГРАНИЦЕ ЭЛЕМЕНТОВ СПИСКА ПОЛЕЙ МИКРОКОМАНДЫ.
#НА ПРИ ОШИБКАХ В ПРОГРАММЕ ОШИБОЧНЫЙ ФРАГМЕНТ ОТМЕЧАЕТСЯ СИМВОЛОМ
"*" В СЛЕДУЮЩЕЙ СТРОКЕ ЛИСТИНГА.
 В БОЛЬШИНСТВЕ СЛУЧАЕВ МЕСТ0НАХОЖДЕНИЕ ОШИБКИ ОТМЕЧАЕТСЯ С ТОЧНОСТЬЮ
 ДО СИМВОЛА, В КРАЙНЕМ СЛУЧАЕ - С ТОЧНОСТЬЮ ДО ЛЕКСЕМЫ.
#НА #НА
#Ц 3.2.___Д_И_А_Г_Н_О_С_Т_И_К_А_: #А0
#Ц ------------------------------ #А0
#ПЕРН "ОШИБКА_В_ЗАГОЛОВКЕ_ПРОГРАММЫ"  - НЕТ ":" ПОСЛЕ ИМЕНИ
 ИЛИ НЕТ СЛОВА @P@R@O@G.
#ПЕРН "НЕВЕРНО_ЗАДАНА_РАЗРЯДНОСТЬ" - В КОНСТРУКЦИИ
#А0 DEFINE:PROG_N,К;____N ИЛИ К_ ЗАДАНО НЕВЕРНО.
#ПЕРН "НЕТ_ГЛОБАЛЬНОГО_КОНТЕКСТА" - В АРХИВЕ ОТСУТСТВУЕТ ОПИСАНИЕ
 ГЛОБАЛЬНОГО КОНТЕКСТА.
#ПЕРН "НЕ_ОПИСАНЫ_ПОЛЯ_МИКРОКОМАНДЫ" - В ГЛОБАЛЬНОМ КОНТЕКСТЕ
 ОТСУТСТВУЕТ ОПИСАНИЕ ПОЛЕЙ.
#ПЕРН "НЕВЕРНОЕ_ЗАДАНИЕ_ГРАНИЦ_ПОЛЯ" - В ИНСТРУКЦИИ #Б FIELD #М
 ОДНА ИЗ ГРАНИЦ ПОЛЯ ПРЕВЫШАЕТ РАЗРЯДНОСТЬ КОМАНДЫ.
#ПЕРН "НАДО РОВНО ОДНО ПОЛЕ_/С/" - В ГЛОБАЛЬНОМ КОНТЕКСТЕ
 ОТСУТСТВУЕТ ИЛИ ОБЬЯВЛЕНО ДВАЖДЫ ПОЛЕ КОДА ОПЕРАЦИИ СЕКВЕНСОРА.
#ПЕРН "СЕМАНТИЧЕСКАЯ ОШИБКА" - НЕ ВЫПОЛНЕН ОДИН ИЗ ЗАДАННЫХ
СЕМАНТИЧЕСКИХ КРИТЕРИЕВ (ОБ ЭТОМ СМ._&П._3.3.).
#ПЕРН "НЕ_ОПИСАН_ИДЕНТИФИКАТОР" - В ИНСТРУКЦИИ ИСПОЛЬЗУЕТСЯ
 НЕСУЩЕСТВУЮЩЕЕ ИМЯ.
#ПЕРН "ДВАЖДЫ_ОПИСАНО_ИМЯ" - ПОВТОРНОЕ ВХОЖДЕНИЕ ИМЕНИ В ЛЕВОЙ
 ЧАСТИ ИНСТРУКЦИИ.
#ПЕРН "СИНТАКСИЧЕСКАЯ_ОШИБКА" - НЕВЕРНЫЙ ФОРМАТ ЧИСЛА, ВЫРАЖЕНИЯ И Т.&П.
#ПЕРН "ПЕРЕПОЛНЕНИЕ_ПОЛЯ" - СОДЕРЖИМОЕ ПОЛЯ НЕ ВМЕЩАЕТСЯ В ЕГО ГРАНИЦЫ.
#ПЕРН "НАЛОЖЕНИЕ_С_ПОЛЕМ" - ПОВТОРНОЕ ЗАПОЛНЕНИЕ ОДНОГО И ТОГО ЖЕ ПОЛЯ
 ИЛИ ПОПЫТКА ЗАПОЛНЕНИЯ СРАЗУ ОБОИХ ВЛОЖЕННЫХ ПОЛЕЙ.
#ПЕРН "НЕДОПУСТИМЫЙ_ВИД_ВЫРАЖЕНИЯ" - ДВА ВНЕШНИХ АДРЕСА ИЛИ СУММА
 ОТНОСИТЕЛЬНЫЙ АДРЕСОВ.
#ПЕРН "НЕОПОЗНАННАЯ_ИНСТРУКЦИЯ" - КАК ПРАВИЛО, ПРИ НЕУКАЗАНИИ
 КОДА ОПЕРАЦИИ СЕКВЕНСОРА.
#ПЕРН "ОШИБКА_В_ИДЕНТИФИКАТОРЕ" - МЕТКА НЕ ЯВЛЯЕТСЯ ИДЕНТИФИКАТОРОМ.
#ПЕРН "НЕТ_ТАКОГО_ПОЛЯ" - ИМЯ ПОЛЯ ОТСУТСТВУЕТ В ГЛОБАЛЬНОМ КОНТЕКСТЕ.
#ПЕРН "НЕТ_ТАКОГО_КОП"  - СИМВОЛИЧЕСКОЕ ИМЯ КОДА ОПЕРАЦИИ СЕКВЕНСОРА
 ОТСУТСТВУЕТ В ГЛОБАЛЬНОМ КОНТЕКСТЕ.
#ПЕРН "НЕ_АДРЕСНОЕ_ПОЛЕ" - АДРЕСНАЯ ИНФОРМАЦИЯ ПОПАЛА В НЕАДРЕСНОЕ ПОЛЕ.
#НА ПОСЛЕ ТЕКСТА ПОДПРОГРАММЫ В ЛИСТИНГЕ ПЕЧАТАЕТСЯ ТАБЛИЦА
 ИСПОЛЬЗОВАНИЯ МЕТОК И ВНЕШНИХ ИМЕН.
 ДЛЯ КАЖДОГО ИМЕНИ ВЫДАЕТСЯ СПИСОК ОТНОСИТЕЛЬНЫХ АДРЕСОВ ПРОГРАММЫ,
 ГДЕ ИСПОЛЬЗУЕТСЯ ЭТО ИМЯ.
 В НАЧАЛЕ СПИСКА НАХОДИТСЯ ОТНОСИТЕЛЬНЫЙ АДРЕС МЕТКИ В ПРОГРАММЕ
 ИЛИ СИМВОЛ "Е" (ДЛЯ ВНЕШНИХ ПРОГРАММ).
#НА #НА
#Ц 3.3.___СЕМАНТИЧЕСКИЙ КОНТРОЛЬ МИКРОКОМАНД. #А0
#Ц ------------------------------------------ #А0
#НА В ОБЩЕМ СЛУЧАЕ, АССЕМБЛЕР "НЕ ВЕДАЕТ" СМЫСЛА ОТДЕЛЬНЫХ
ПОЛЕЙ МИКРОКОМАНДЫ И ЛОГИКИ ИХ ВЗАИМОДЕЙСТВИЯ.
ОДНАКО ПРОСТЕЙШИЕ СЕМАНТИЧЕСКИЕ ПРАВИЛА МЫ МОЖЕМ ЕМУ ЗАДАТЬ.
ПРАВИЛА ПОМЕЩАЮТСЯ ПЕРЕД ТЕКСТОМ ПЕРВОЙ ИЗ ТРАНСЛИРУЕМЫХ
МИКРОПРОГРАММ И "РАБОТАЮТ" ДО КОНЦА ФАЙЛА.
ПОКА ПРАВИЛ ТОЛЬКО 2 :
#НА  #НА 1._СПИСОК ВОЗМОЖНЫХ ЗНАЧЕНИЙ ПОЛЕЙ.
#А12 FLIST_<ИМЯ_ПОЛЯ>=<СПИСОК>
#А0 НАПРИМЕР, ПРАВИЛО: _FLIST_ТУР=ТУР1,ТУР2,ТУР7
#А0 ОЗНАЧАЕТ, ЧТО В ВЫРАЖЕНИЕ, ЗАДАЮЩЕЕ ЗНАЧЕНИЕ ПОЛЯ _ТУР_,
МОГУТ ВХОДИТЬ ТЕРМЫ _ТУР1, _ТУР2, _ТУР7 _И ТОЛЬКО ОНИ.
ЕСЛИ В КАКОЙ-ТО МИКРОКОМАНДЕ ВСТРЕТИТСЯ ФРАГМЕНТ _ТУР=ТУР4_,
ТО ЭТО БУДЕТ СЧИТАТЬСЯ ОШИБКОЙ.
#А0 ЕСЛИ СПИСОК НЕ УМЕЩАЕТСЯ ВО ВХОДНОЙ СТРОКЕ, ОСТАВЬТЕ ТАМ
ПОСЛЕДНЮЮ УМЕСТИВШУЮСЯ ЗАПЯТУЮ, И ПРОДОЛЖАЙТЕ СПИСОК С НОВОЙ СТРОКИ.
ОГРАНИЧЕНИЕ НА КОЛИЧЕСТВО ПРАВИЛ "FLIST" :
СУММАРНАЯ ДЛИНА ВСЕХ СПИСКОВ - НЕ БОЛЕЕ 1500.
#НА #НА 2._СПИСОК ОШИБОЧНЫХ КОМБИНАЦИЙ ПОЛЕЙ.
#А12 СНЕСК FIELD1+FIELD2-FIELD3
#А0 ЭТОТ ПРИМЕР СЛЕДУЕТ ЧИТАТЬ ТАК: ЕСЛИ ЗАДАНЫ ЗНАЧЕНИЯ
(НЕВАЖНО, КАКИЕ) ПОЛЕЙ _FIELD1 И FIELD2, НО НЕ_ЗАДАНО _FIELD3,
ТО ТАКАЯ КОМБИНАЦИЯ ПОЛЕЙ В МИКРОКОМАНДЕ - ОШИБОЧНА.
ВСЕГО ПРАВИЛ "СНЕСК" МОЖЕТ БЫТЬ НЕ БОЛЕЕ 200, В КАЖДОМ
ПРАВИЛЕ - НЕ БОЛЕЕ 6 ЧЛЕНОВ.
#НА ДИАГНОСТИКА "СЕМАНТИЧЕСКАЯ_ОШИБКА" СНАБЖАЕТСЯ
НОМЕРОМ НАРУШЕННОГО СЕМАНТИЧЕСКОГО ПРАВИЛА.
КРОМЕ ТОГО, СИМВОЛ "*" ОТМЕЧАЕТ ПОЗИЦИЮ СКАНЕРА ВХОДНОЙ
СТРОКИ В МОМЕНТ ПОСЛЕДНЕГО НАРУШЕНИЯ ПРАВИЛА.
#НА #НА
#Ц 3.4.___МАКРОСЫ. #А0
#Ц --------------- #А0
#НА ЧАСТО ПОВТОРЯЮЩИЕСЯ ФРАГМЕНТЫ МИКРОКОМАНД МОЖНО ОПИСАТЬ
ЕДИНОЖДЫ В ВИДЕ МАКРООПРЕДЕЛЕНИЯ.
МАКРООПРЕДЕЛЕНИЯ РАЗМЕЩАЮТСЯ ВО ВХОДНОМ ФАЙЛЕ СРЕДИ
СЕМАНТИЧЕСКИХ ПРАВИЛ (ОТНОСИТЕЛЬНЫЙ ПОРЯДОК - НЕСУЩЕСТВЕН)
ДО НАЧАЛА ПЕРВОЙ ТРАНСЛИРУЕМОЙ ПРОГРАММЫ.
МАКРООПРЕДЕЛЕНИЕ ЗАНИМАЕТ РОВНО ОДНУ СТРОКУ И ВЫГЛЯДИТ ТАК:
#НА MACRO_<ИМЯ>_<ЗАМЕНЯЮЩИЙ_ТЕКСТ>
#А0 _
#А0 ИМЯ МАКРОСА НЕ БОЛЕЕ ЧЕМ ИЗ 6 СИМВОЛОВ.
В ЗАМЕНЯЮЩЕМ ТЕКСТЕ ВСЕ СИМВОЛЫ СУЩЕСТВЕННЫ, КРОМЕ ХВОСТОВЫХ ПРОБЕЛОВ.
ОТСЮДА СЛЕДУЕТ ВОЗМОЖНОСТЬ ПУСТЫХ МАКРОСОВ, КОГДА В ЗАМЕНЯЮЩЕМ ТЕКСТЕ
НЕТ НИ ОДНОГО СИМВОЛА, ОТЛИЧНОГО ОТ ПРОБЕЛА.
МАКРОВЫЗОВ ОСУЩЕСТВЛЯЕТСЯ УКАЗАНИЕМ В НУЖНОМ МЕСТЕ ТЕКСТА МИКРОКОМАНДЫ
ИМЕНИ МАКРОСА, ОБРАМЛЕННОГО СИМВОЛОМ "%". ПРИМЕР:
#А0 _
#А3 МАКРООПРЕДЕЛЕНИЕ:___MACRO_М1_F1=С1,F2=С2,F3=1
#А3 МАКРОВЫЗОВ:_________CONT_F5=5,%М1%,F7
#А3 ОКОНЧАТЕЛЬНЫЙ ИТОГ: CONT_F5=5,F1=С1,F2=С2,F3=1,F7
#А0 _
#А0 ВСЕГО МОЖЕТ БЫТЬ ДО 400 МАКРОСОВ. СУММАРНЫЙ ОБЬЕМ ЗАМЕНЯЮЩИХ
ТЕКСТОВ - ДО 24000 СИМВОЛОВ.
ПОВТОРНОЕ ОПРЕДЕЛЕНИЕ МАКРОСА НЕ КОНТРОЛИРУЕТСЯ.
#НА #НА
#Ц 3.5.___ПСЕВДОКОММЕНТАРИЙ. #А0
#Ц ------------------------- #А0
#НА В СИСТЕМЕ ПРЕДУСМОТРЕНА ВОЗМОЖНОСТЬ ПОДГОТОВКИ
КАРТЫ ПАМЯТИ МИКРОПРОГРАММ (НАПРИМЕР, ДЛЯ ПРОЖИГА
В @П@З@У СПИСКА ВХОДНЫХ ТОЧЕК ПРОГРАММЫ).
ЭТО ДЕЛАЕТСЯ С ПОМОЩЬЮ ПСЕВДОКОММЕНТАРИЯ
#НА
 #Ц ;PROM:<СПИСОК ИНДЕКСОВ> #А0
 #Ц _________НАПРИМЕР:_____ #А0
 #Ц ;PROM:N1,N2-N3,N4-N5,N6 #А0
#НА ЗДЕСЬ СПИСОК ШЕСТНАДЦАТИРИЧНЫХ ЧИСЕЛ ЗАДАЕТ ОТДЕЛЬНЫЕ
ИНДЕКСЫ ИЛИ ДИАПАЗОНЫ ИНДЕКСОВ В ТАК НАЗЫВАЕМОМ ПЕРЕКЛЮЧАТЕЛЕ
НАЧАЛЬНЫХ АДРЕСОВ (_@П_@Н_@А_).
В СООТВЕТСТВУЮЩИЕ СТРОКИ @П@Н@А ЗАГРУЗЧИК ЗАНЕСЕТ АБСОЛЮТНЫЙ
АДРЕС МИКРОКОМАНДЫ, СЛЕДУЮЩЕЙ В ТЕКСТЕ ПРОГРАММЫ ЗА
ПСЕВДОКОММЕНТАРИЕМ __;PROM:...
#НА ПОВТОРНОЕ ИСПОЛЬЗОВАНИЕ ОДНОГО И ТОГО ЖЕ ИНДЕКСА В @П@Н@А
КОНТРОЛИРУЕТСЯ ЗАГРУЗЧИКОМ.
ИНДЕКСЫ ЗАДАЮТСЯ В ДИАПАЗОНЕ ОТ 0 ДО FFFF.
#НА #НА #НА
#Ц 4._АРХИВ КРОСС-СИСТЕМЫ #А0
#Ц ---------------------- #А0
#НА АРХИВ ВСЕГДА ЗАКАЗЫВАЕТСЯ В ПАКЕТЕ ЗАДАЧИ ПОД ЛОГИЧЕСКИМ
 НОМЕРОМ 30 И В РЕЖИМЕ ЗАПИСИ.
 С ТОЧКИ ЗРЕНИЯ СИСТЕМЫ АРХИВ ПРЕДСТАВЛЯЕТ ИЗ СЕБЯ
 ВИРТУАЛЬНУЮ ПАМЯТЬ ПРЯМОГО ДОСТУПА.
 КАЖДОЕ СЛОВО ЭТОЙ ПАМЯТИ АДРЕСУЕТСЯ СВОИМ ЦЕЛОЧИСЛЕННЫМ АДРЕСОМ_=_0,1,2
#НА #Ц РАСПРЕДЕЛЕНИЕ ВИРТУАЛЬНОЙ ПАМЯТИ : #А0
#ПЕРН 0_____-_КОД НАЛИЧИЯ ГЛОБАЛЬНОГО КОНТЕКСТА;
#ПЕРН 1_____-_РАЗРЯДНОСТЬ МИКРОСЛОВА _@N;
#ПЕРН 2_____-_БЛИЖАЙШЕЕ К _@N СВЕРХУ ЧИСЛО, КРАТНОЕ 4;
#ПЕРН 3_____-_ДЛИНА МИКРОСЛОВА В СЛОВАХ БЭСМ-6;
#ПЕРН 4_____-_РАЗРЯДНОСТЬ @П@З@У И КОЛИЧЕСТВО КОНСТАНТ;
#ПЕРН 5_____-_УКАЗАТЕЛЬ СВОБОДНОГО МЕСТА В АРХИВЕ;
#ПЕРН 6_____-_НАЧАЛО ТАБЛИЦЫ ИМЕН;
#ПЕРН 7_____-_ДЛИНА  ТАБЛИЦЫ ИМЕН;
#ПЕРН 8_____-_НАЧАЛО СПИСКА КОНСТАНТ;
#ПЕРН 20____-_ТАБЛИЦА ИМЕН;
#ПЕРН ______-_СПИСОК _ПЗУ_-_КОНСТАНТ;
#ПЕРН ______-_БИБЛИОТЕКА МОДУЛЕЙ ЗАГРУЗКИ;
#НА ЭЛЕМЕНТ ТАБЛИЦЫ ИМЕН ЗАНИМАЕТ 5 СЛОВ.
 РАБОТА С ТАБЛИЦЕЙ ПРОИЗВОДИТСЯ МЕТОДОМ ХЕШИРОВАНИЯ,
ПРИЧЕМ В КАЧЕСТВЕ КЛЮЧА ПОИСКА ИСПОЛЬЗУЮТСЯ ИДЕНТИФИКАТОР И ТИП ОБЬЕКТА:
#ПЕРН ТИП=1 - ЛОКАЛЬНОЕ ИМЯ. ПО ОКОНЧАНИИ ТРАНСЛЯЦИИ ПОДПРОГРАММЫ
 ВСЕ ЛОКАЛЬНЫЕ ИМЕНА ИЗЫМАЮТСЯ ИЗ ТАБЛИЦЫ.
#ПЕРН ТИП=2 - ГЛОБАЛЬНОЕ ИМЯ ИЛИ ОПИСАНИЕ ПЗУ-КОНСТАНТЫ;
#ПЕРН ТИП=3 - ОПИСАНИЕ ПОЛЯ. ГЛОБАЛЬНЫЕ ИМЕНА И ОПИСАНИЯ ПОЛЕЙ
 ПОЯВЛЯЮТСЯ В ТАБЛИЦЕ ПРИ ТРАНСЛЯЦИИ ГЛОБАЛЬНОГО КОНТЕКСТА
 И ЖИВУТ ТАМ ВО ВСЕ ВРЕМЯ СУЩЕСТВОВАНИЯ АРХИВА.
#ПЕРН ТИП=4 - ОПИСАНИЕ ПОДПРОГРАММЫ;
#ПЕРН ТИП=5 - ОПИСАНИЕ ENTRY-ВХОДА.
#НА ТАКИМ ОБРАЗОМ, ТАБЛИЦА ИМЕН ЯВЛЯЕТСЯ ОДНОВРЕМЕННО И КАТАЛОГОМ
 БИБЛИОТЕКИ МОДУЛЕЙ ЗАГРУЗКИ.
 В ОПИСАНИИ ПОДПРОГРАММЫ ХРАНИТСЯ ВИРТУАЛЬНЫЙ АДРЕС НАЧАЛА ЕЕ
 МОДУЛЯ ЗАГРУЗКИ В БИБЛИОТЕКЕ И РАЗМЕРЫ МОДУЛЯ ЗАГРУЗКИ.
 МОДУЛЬ СОСТОИТ ИЗ ДВУХ ЧАСТЕЙ :
#ПЕРН _-_ГРУППА КОМАНД;
#ПЕРН _-_СПИСОК АДРЕСНЫХ ССЫЛОК;
#НА ПОСКОЛЬКУ РАЗМЕРЫ АДРЕСНОГО ПОЛЯ МИКРОКОМАНДЫ НЕ ФИКСИРОВАНЫ,
 ТО ОРГАНИЗАЦИЯ МОДУЛЯ ЗАГРУЗКИ С ИСПОЛЬЗОВАНИЕМ УСЛОВНЫХ АДРЕСОВ
 ВЫЗЫВАЕТ ЗАТРУДНЕНИЯ.
 ВМЕСТО ЭТОГО МЫ ИСПОЛЬЗОВАЛИ В НЕКОТОРОМ СМЫСЛЕ ПРОТИВОПОЛОЖНЫЙ
 МЕТОД.
 СПИСОК АДРЕСНЫХ ССЫЛОК СОДЕРЖИТ ИНФОРМАЦИЮ ДЛЯ ЗАГРУЗЧИКА :
 В КАКИХ КОМАНДАХ И КАКИМ ОБРАЗОМ СЛЕДУЕТ МОДИФИЦИРОВАТЬ
 АДРЕСНОЕ ПОЛЕ.
 СПИСОК УПОРЯДОЧЕН ПО ВОЗРАСТАНИЮ ОТНОСИТЕЛЬНЫХ АДРЕСОВ КОМАНД,
 ЧТО ПОЗВОЛЯЕТ ПРОВЕСТИ НАСТРОЙКУ АДРЕСОВ ЗА ОДИН ПРОСМОТР
 МОДУЛЯ ЗАГРУЗКИ.
#НА КРОМЕ ТОГО, В ЭТОМ ЖЕ СПИСКЕ СОХРАНЯЮТСЯ И ИМЕНА ЛОКАЛЬНЫХ
 МЕТОК ПРОГРАММЫ, ПЕРЕПИСЫВАЕМЫЕ ТУДА ИЗ ТАБЛИЦЫ ИМЕН ПО
 ОКОНЧАНИИ ТРАНСЛЯЦИИ.
 ЭТО СДЕЛАНО ВПРОК, ДЛЯ УДОБСТВА РАБОТЫ С ИНТЕРПРЕТАТОРОМ,
 БУДЕ ТАКОВОЙ ПОЯВИТСЯ В СОСТАВЕ НАШЕЙ КРОСС-СИСТЕМЫ.
#НА #НА СВОБОДНАЯ ПАМЯТЬ В АРХИВЕ ИСПОЛЬЗУЕТСЯ СИСТЕМОЙ
 КАК РАБОЧАЯ ОБЛАСТЬ.
 В ЧАСТНОСТИ, АССЕМБЛЕР ИСПОЛЬЗУЕТ ЕЕ ДЛЯ ХРАНЕНИЯ ТЕКСТА
 ТРАНСЛИРУЕМОЙ ПРОГРАММЫ (СХЕМА ТРАНСЛЯЦИИ - ДВУХПРОХОДНАЯ).
 КАТАЛОГ АРХИВА МОЖЕТ БЫТЬ РАСПЕЧАТАН ПО ДИРЕКТИВЕ
#А0 _
#А12 _______*CALL MICCAT
#А12 _ИЛИ___*CALL MICCAT:RОМ
#НА В ПОСЛЕДНЕМ СЛУЧАЕ ВЫДАЕТСЯ ЕЩЕ И СОДЕРЖИМОЕ _П_З_У_ КОНСТАНТ.
 ИСКЛЮЧЕНИЕ ПРОГРАММЫ ИЗ АРХИВА ДЕЛАЕТСЯ С ПОМОЩЬЮ ДИРЕКТИВЫ
#А0 _
#А12 _______*CALL_DELETE:<ИМЯ_ПРОГРАММЫ>
#НА #НА #НА
#Ц 5._ПОЛУЧЕНИЕ ДВОИЧНОЙ ПРОГРАММЫ #А0
#Ц ------------------------------- #А0
#НА ДЛЯ ПОЛУЧЕНИЯ ДВОИЧНОЙ ПРОГРАММЫ ИСПОЛЬЗУЕТСЯ СВЯЗЫВАЮЩИЙ
 ЗАГРУЗЧИК. ПАКЕТ ЗАДАЧИ В ЭТОМ СЛУЧАЕ ВЫГЛЯДИТ СЛЕДУЮЩИМ ОБРАЗОМ:
#А0 _
#А10 *NАМЕ_.....
#А10 *PASS:.....
#А10 *TIME:.....
#А10 *LIBRARY:23,25
#А10 _<ЗАКАЗ АРХИВА ПОД НОМЕРОМ 30>
#А10 *CALL MICLOA:<ИМЯ ГОЛОВНОЙ ПРОГРАММЫ> [=А]
#А10 *END FILE
#НА РАЗУМЕЕТСЯ, ВЫЗВАТЬ ЗАГРУЗЧИК МОЖНО И СРАЗУ ЖЕ ПО
 ОКОНЧАНИИ ТРАНСЛЯЦИИ ТЕКСТА ПРОГРАММЫ.
#НА ЗАГРУЗКА НАЧИНАЕТСЯ С ЗАДАННОГО ШЕСТНАДЦАТИРИЧНОГО АДРЕСА _@А.
ПРИ НЕУКАЗАНИИ ПОЛАГАЕТСЯ _@А_=_0.
ДВОИЧНЫЙ ОБРАЗ ЗАГРУЖЕННОЙ ПРОГРАММЫ ПОМЕЩАЕТСЯ В
СВОБОДНУЮ ОБЛАСТЬ АРХИВА КРОСС-СИСТЕМЫ.
ОТТУДА ОН МОЖЕТ БЫТЬ ВЫВЕДЕН, НАПРИМЕР, НА ПЕРФОЛЕНТУ.
В НАСТОЯЩЕЕ ВРЕМЯ ЗАГРУЗЧИК, ЗАКОНЧИВ СВОЮ РАБОТУ,
ПРОСТО РАСПЕЧАТЫВАЕТ ПОЛУЧАЕМЫЙ КОД В ШЕСТНАДЦАТИРИЧНОМ ВИДЕ.
#НА ТАБЛИЦА ЗАГРУЗКИ ПЕЧАТАЕТСЯ В ТАКОМ ЖЕ ВИДЕ, ЧТО И ТАБЛИЦА
ЗАГРУЗКИ В МОНИТОРНОЙ СИСТЕМЕ "ДУБНА".
 И ТОЧНО ТАКЖЕ, В СПИСКЕ ЗАГРУЗКИ МОГУТ ПЕЧАТАТЬСЯ ДИАГНОСТИЧЕСКИЕ
 СООБЩЕНИЯ :
#ПЕРН НЕТ ПРОГРАММЫ <ИМЯ ПРОГРАММЫ>
#ПЕРН ДЛИННЫЙ АДРЕС В <АДРЕС КОМАНДЫ>
#ПЕРН СВОБОДНО <АДРЕС>
#НА ПРИ ЗАГРУЗКЕ ВОЗМОЖНЫ ТАКИЕ ТРЕБОВАНИЯ, КАК НЕОБХОДИМОСТЬ
ГРУЗИТЬ НЕКОТОРЫЕ ПРОГРАММЫ С АДРЕСА, КРАТНОГО ЗАДАННОМУ ЧИСЛУ,
ФОРМИРОВАТЬ КАРТУ ПАМЯТИ МИКРОПРОГРАММ, ДА МАЛО ЛИ ЕЩЕ ЧТО.
ВЫШЕ МЫ УПОМИНАЛИ Т.&Н. &ХАРАКТЕРИСТИКУ ПРОГРАММЫ - НАБОР
ШЕСТНАДЦАТИРИЧНЫХ ЦИФР, СМЫСЛ КОТОРЫХ ПОКА НЕ КОНКРЕТИЗИРОВАЛСЯ.
#НА В НАШЕМ ВАРИАНТЕ ЗАГРУЗЧИКА ИСПОЛЬЗУЕТСЯ ТОЛЬКО МЛАДШАЯ
ЦИФРА ХАРАКТЕРИСТИКИ.
ОНА УТОЧНЯЕТ НАЧАЛЬНЫЙ АДРЕС ЗАГРУЖАЕМОЙ ПРОГРАММЫ:
#ПЕРН 0 - МОЖНО ГРУЗИТЬ С ЛЮБОГО МЕСТА;
#ПЕРН 1 - ТОЛЬКО С АДРЕСА, КРАТНОГО 2;
#ПЕРН 2 - ТОЛЬКО С АДРЕСА, КРАТНОГО 4; _____И_Т.&Д.
#НА СПИСОК ЗАГРУЗКИ ФОРМИРУЕТСЯ В COMMON-БЛОКЕ
#Ц COMMON /LINF1/ Ь(9),LIST(3,1000) #А0
#Ц 1-ИМЯ ПРОГРАММЫ, 2-ЕЕ ХАРАКТЕРИСТИКА, 3-АДРЕС. #А0
#НА #НА
 ДЛЯ СВЯЗИ С СИСТЕМОЙ МОДЕЛИРОВАНИЯ #Б ПУЛЬС #М ИМЕЕТСЯ ВТОРОЙ
 ВХОД В ЗАГРУЗЧИК :
#НА #Ц *CALL IMPULS:NР,NА,NО #А0
#ПЕРН NР_-_ИМЯ ГОЛОВНОЙ ПОДПРОГРАММЫ;
#ПЕРН NА_-_ИМЯ АРХИВА СИСТЕМЫ #Б ПУЛЬС; #М
#ПЕРН NО_-_ИМЯ ОБЬЕКТА В АРХИВЕ;
#НА #НА
ЕЩЕ ОДИН ВХОД В ЗАГРУЗЧИК СДЕЛАН ДЛЯ ПЕРЕДАЧИ ГОТОВОЙ ПРОГРАММЫ
В ПУЛЬТОВОЙ ПРОЦЕССОР @М@К@Б-8601 (ПОКА ЭТО IВМ РС/ХТ В К.227):
#НА #Ц *CALL MPSEND:<ИМЯ ГОЛОВНОЙ ПРОГРАММЫ> [=А]  #А0
#НА
КАК УЖЕ БЫЛО СКАЗАНО ВЫШЕ,
РЕЗУЛЬТАТ СБОРКИ МИКРОПРОГРАММЫ ЗАПИСЫВАЕТСЯ ЗАГРУЗЧИКОМ
В СВОБОДНУЮ ОБЛАСТЬ АРХИВА КРОСС-СИСТЕМЫ
(_ЕЕ АДРЕС В 5-М СЛОВЕ АРХИВА_).
СОБРАННАЯ ПРОГРАММА ПРЕДВАРЯЕТСЯ ПЕРЕКЛЮЧАТЕЛЕМ НАЧ.АДРЕСОВ
(_@П_@Н_@А_), ДЛИНОЙ 16400 СЛОВ, СФОРМИРОВАННЫМ СОГЛАСНО
ПСЕВДОКОММЕНТАРИЮ ___;PROM:_  ____(СМ.3.5).
#НА
 @П@Н@А МОЖНО ВЫВЕСТИ ИЗ АРХИВА ПО КАРТЕ
#НА #Б #Ц *CALL MICPNA:N,ТУР #А0 #М
#НА ГДЕ _@N_-_НОМЕР_@П@Н@А = 0,1,2,...,8
#А3 ___@Т@У@Р_=_HIGH _ИЛИ_ LOW _-_ОПРЕДЕЛЯЕТ, КАКОЙ БАЙТ
#А12 ВЫВОДИТЬ: СТАРШИЙ (HIGH) ИЛИ МЛАДШИЙ (LOW).
#КР
*END F
