ИНСТИТУТ ТОЧНОЙ МЕХАНИКИ И ВЫЧИСЛИТЕЛЬНОЙ ТЕХНИКИ АН СССР

АВТОКОД БЭСМ-6
~~~~~~~~~~~~~~
(Инструкция)
Москва – 1969

УДК 681.3.06

   Инструкция  по  "Автокоду  БЭСМ-6",  транслятор  с  которого
разработан Чайковским М.Г. при участии Назарова Г.В., написана
на основе IV главы "Инструкции по программированию на
БЭСМ-6". (Автор  Чайковский). Исправлены допущенные ранее
неточности и неясные места и освещены новые возможности
Автокода, возникшие при его усовершенствовании. Увеличилось
число примеров.

   Автором данной инструкции является к.ф.м.н. Подшивалов Д.Б.

Корректор: Царицына И.И.
Работа поступила 10/VI-1969 г.

Зак. 580    Т08641

ИТМ и ВТ АН СССР. Москва, В-333, Ленинский проспект, 51


Оглавление
~~~~~~~~~~
                                                          стр.
I.  Введение ............................................  5

2.  Система представления чисел и команд машины БЭСМ-6 ..  5

2.1.    Представление команд ............................  6
2.2.    Представление чисел .............................  7

3.  Система Автокод БЭСМ-6 ..............................  7

3.1.    Общие характеристики языка Автокод БЭСМ-6 .......  7
3.2.    Пример программы, написанной на Автокоде ........  9
3.3.    Общая схема работы системы ...................... 12

4.  Операторы и управляющие операторы ................... 13

4.1.    Представление констант .......................... 15
4.1.1.      Оператор типа десятичное число .............. 15
4.1.2.      Оператор типа восьмеричное число ............ 16
4.1.3.      Оператор типа буквенно-цифровая константа ... 16
4.1.3.1.        Оператор А-типа ......................... 17
4.1.3.2.        Оператор Т-типа ......................... 17
4.1.4.      Оператор типа сложной константы ............. 18
4.2.    Операторы, представляющие команды ............... 20
4.3.    Символические адреса ............................ 21
4.4.    Управляющие операторы ........................... 24
4.4.1.      Оператор установки начала программы ......... 25
4.4.2.      Блоки и глобальные идентификаторы ........... 28
4.4.3.      Операторы описаний .......................... 29
4.4.4.      Оператор конца блока ........................ 31
4.4.5.      Оператор режима кодировки ................... 31

5.  Операторы режима .................................... 33

5.1.    Операторы запрета печати и обмена ............... 33
5.2.    Операторы отладки и печати части текста ......... 35
5.2.1.      Оператор отладки ............................ 35
5.2.2.      Оператор печати части программы ............. 38
5.3.    Операторы исправлений ........................... 39

6.  Ошибки .............................................. 40
7.  Ввод программ, написанных на Автокоде ............... 41
8.  Стандартная программа стыковки ...................... 43

Приложение I ............................................ 46
Приложение 2 ............................................ 48
Приложение 3 ............................................ 51
Приложение 4 ............................................ 54
Приложение 5 ............................................ 56
Приложение 6 ............................................ 57

I. Введение

Автокод БЭСМ-6 является одним из средств автоматизации
программирования, входящих в состав математического обеспечения
машины БЭСМ-6. Он обычно используется в тех случаях, когда необходимо
программирование на уровне команд машинного языка. Поэтому его
использование предполагает знание программистом системы команд машины
и, вообще говоря, системы представления чисел; для этого необходимо
знакомство с первыми разделами "Инструкции по программированию на
БЭСМ-6". При работе с Автокодом, как правило, программисту не
приходится где-либо пользоваться двоичной (или восьмеричной) кодировкой
информации: везде, где это возможно, используется метод стандартных
перфокарт; исключением является лишь "паспорт задачи", который в силу
его специфики не может быть заменен стандартной картой.

Использование в Автокоде символических обозначений операций и
адресов, более естественное представление данных, с которыми работает
программа, а также довольно гибкий аппарат отладки, входящий в систему
Автокод-БЭСМ-б делает эту систему мощным средством автоматизации
программирования практически всех задач, в которых возникает
необходимость пользоваться языком машины.

2. Система представления чисел и команд машины БЭСМ-6

Машинное слово БЭСМ-6 содержит 48 двоичных разрядов и может
рассматриваться либо как две команды, либо как двоичное число с
плавающей запятой, либо просто как набор двоичных разрядов.

2.1. Представление команд

Каждая команда состоит из 24 разрядов. В машинном слове
содержится всегда две команды:

IMG

Адресуется в машине только слово или левая команда, правая
команда не адресуется, и выполнить её, не выполняя её левой
команды, невозможно. Поэтому в Автокоде оператор типа "команда"
всегда содержит информацию о двух командах, входящих в одно машинное
слово.

Каждая команда машины состоит из трех частей:

IMG

где:

    ИР – номер одного из 16 индексных регистров, используемого, как
    правило, для формирования исполнительного адреса,
    КОП – код выполняемой операции.

    Адрес – часть команды, используемая для указания адреса оперативного
    запоминающего устройства иди другой информации, требующейся в
    команде (например, константы, указывающей сдвиг).

Все команды машины разбиваются на две группы в
соответствии с размером поля, выделенного под адрес: команды с коротким
адресом и команды с полным адресом. В командах с коротким адресом (12
разрядов) можно указать адрес лишь первых или последних 4096 ячеек
оперативного запоминающего устройства, в командах с полным адресом
можно указать любой адрес ОЗУ.

Такая система адресации требует весьма внимательного подхода к
распределению памяти программы и поэтому, в отличие от большинства
аналогичных систем программирования, Автокод БЭСМ-6 требует точного
определения адресов всех компонент, входящих в программу.

2.2. Представление чисел

Если команда машины воспринимает машинное слово как число с
плавающей запятой, то считается, что оно имеет следующую структуру:

IMG

где:

    М – мантисса числа (40 разрядов),
    ЗМ – знак мантиссы (1 разряд),
    П – порядок (6 разрядов),
    ЗП – знак порядка (1 разряд).

При программировании на Автокоде обычно даже и этих сведений о
системе представления чисел бывает вполне достаточно.
Если же задача требует более внимательного подхода к представлению, то
их можно получить в "Инструкции по программированию" (стр. 22).

3. Система Автокод БЭСМ-6

3.1. Общие характеристики языка Автокода БЭСМ-6

Язык, используемый в системе Автокод БЭСМ-6 для написания
программ, по своей структуре весьма похож на обычный машинный язык, т.е.
программа, записанная на этом языке, состоит из последовательности
командных слов, констант, рабочих ячеек, расположенных в порядке,
нужном программисту. В дальнейшем эти единицы
информации будут называться операторами. Как правило, каждому такому
оператору будет соответствовать одно слово в программе, полученной
после того как транслятор переведёт программу, записанную на языке
Автокода, в машинный язык.



Кроме операторов, которые будут переведены транслятором и
поставлены в рабочую программу, в Автокод-программе встречаются и



Мы просим извинения у читателей за нарушение синтаксиса
русского языка в примечаниях, но Автокод БЭСМ-6 не допускает
употребления в примечаниях большинства знаков препинания. Если вы
знакомы с символическими обозначениями команд БЭСМ-6 и их
использованием, то, очевидно, командные операторы этой маленькой
программы вам уже понятны. Кроме операторов типа команда
(перед ними стоит управляющее слово "К;") в этой программе использованы
и некоторые другие типы операторов:

1.

Операторы типа числа с плавающей запятой, перед ними стоит
управляющее слово "Ч;" Первые два оператора с метками "ДВА" и
"ЧЕТЫРЕ" говорят, что в рабочей программе нужно завести две константы,
сами операторы представляют собой символическое (общепринятое)
представление этих чисел. Остальные операторы этого типа (с метками
"А", "В", "С", "x1", " x2", "РЯ") имеют пустое тело оператора и лишь
резервируют ячейки программы, необходимые для хранения коэффициентов уравнения,
его корней и промежуточных результатов ("РЯ"). Каким образом в эти
ячейки могут попасть коэффициенты и как будут выведены результаты, нас
пока не интересует.

2.

Управляющие операторы, здесь их несколько, все они выполняют
различную роль:

а) Оператор начала программы – В;

б) Оператор конца программы – Е;
(по существу эти операторы состоят только из определяющих их служебных
слов);

в) Оператор, указывающий, начиная с какого машинного адреса
необходимо формировать рабочую программу. Его служебное слово "Н;",
сам оператор "100," указывает, что рабочая программа должна помещаться
в памяти машины с адреса "00100";

г) Второй оператор этого же типа (после него нет операторов,
которые превратятся в слова рабочей программы), указывает,
c какой команды ("НАЧАЛО") следует после трансляции начать
выполнение рабочей программы.

3.3. Общая схема работы системы

Вся система Автокод может быть схематически разбита на три
основных части:

I. Редактор.
2. Транслятор.
3. Интерпретатор.

Первые  две  части  занимаются  построением  рабочей  программы  и
работают практически всегда, а интерпретатор работает при выполнении
рабочей программы в тех случаях, когда программист отлаживает программу
и задает "режим отладки" (прокрутки).

Обычно работа с автокод-программой протекает следующим образом:

I. Автокод-программа попадает к редактору и он определяет, нужно
ли считывать основной текст программы с магнитной ленты (постановочной),
нужно ли после редактирования выдавать текст на перфокарты или же
записывать его на магнитную ленту, нужна ли распечатка программы и т.д.
Затем проверяется, нужно ли вносить в программу исправления. После
выполнения всех этих действий программа готова к трансляции.

Действия, выполняемые редактирующей частью, управляются
специальными операторами режима, исправлений и отладки, располо-
женными перед основной программой.

2. Затем  идет  трансляция  программы,  и  на  барабане  готовится
рабочая программа.

3. После окончания работы транслирующей части, если не было
обнаружено ошибок в Автокод-программе, рабочая программа либо
помещается в ОЗУ и начинает уже работать совершенно автономно от
системы, либо, если был задан режим отладки, управление передает
ся интерпретирующей части системы, осуществляющей прокрутку с выдачей
очень детальной информации о прохождении рабочей программы. Если в
Автокод-программе были обнаружены ошибки, то после окончания работы
транслятора производится печать информации об ошибках и задача с
решения снимается.

Таким образом, полная Автокод-программа может состоять из
следующих групп операторов:

1. Оператора, определяющего режим печати системы Автокод БЭСМ-6.

2. Операторов режима, определяющих характер работы всей
системы: работы с лентами, перфокартами и режимы отладки программы.

3. Операторов исправлений, позволяющих внести изменения в
следующий за ними текст автокод-программы.

4. Собственно программы, состоящей из операторов, управляющих работой
транслятора, и операторов, которые после перевода войдут в рабочую программу.

Любая из этих групп операторов может отсутствовать, но их
порядок должен обязательно быть таким, как указано.


4. Операторы и управляющие операторы.

Операторы – единицы информации, каждая из которых будет
переведена в слово рабочей программы. В соответствии с общепринятой
структурой программы их можно делить на операторы, представляющие
командам, и операторы, представляющие разнообразные виды констант.
Операторы, представляющие команды, определяются служебным словом
"К;", операторов же, представляющих константы (или рабочие ячейки),
есть несколько типов в соответствии с разными вариантами представления. Есть операторы типа
десятичное число (служебное слово – "Ч;"), восьмеричное число ("С;"),
буквенно-цифровая константа ("А;" и "Т;"), сложная (логическая)
константа ("Л;")

Каждый из операторов этих типов может быть помечен, т.е. перед
выбранную информацию он рассматривает как оператор (учитывая, конечно,
что перед ним может стоять служебное слово и метка).
От этого принципа есть отклонения, но чаще всего процесс проходит
именно так.

Далее будут последовательно описаны все типы представления
констант, а затем операторы, представляющие команды.

4.1. Представление констант

Любой из этих типов операторов может быть помечен и снабжен
примечанием.

4.1.I. Пример.

Перед всеми операторами стоит служебное слово "Ч;", хотя если бы
эти операторы шли в программе подряд, то достаточно было бы лишь
первого.

    Ч; 12.345,
    Ч; 12,
    Ч; 345,
    Ч; 345 10 -3,
    Ч; 10 5,

4.1.2.

и вопросы, связанные с использованием того или иного типа, будут
рассматривать такой оператор как несколько операторов, и это необходимо
учитывать при внесении исправлений (более подробно см. раздел 6).

Содержимым  элемента  в  соответствии  с  признаками  может  быть
последовательность двоичных разрядов, восьмеричных цифр, буквенно-
цифровых символов (длина последовательности в этом случае указывается

г
Знак "  / ", написанный после элемента типа К или Д, указывает,
что следующий элемент записывается на поле последнего, заменяя часть
его информации. Выходить за указанное поле этот элемент не может.

Каждая из команд состоит из трех частей:

а) номера индексного регистра – восьмеричного номера (одна или
две цифры),

б) кода операции, состоящего или из двухбуквенного символического
обозначения операции или из восьмеричного кода операции, почти
совпадающего  с  машинным.  В  последнем  случае  код  операции
состоит  из буквы "Э", за которой идут две или три восьмеричные
особого вида, но о них позже). Эта ссылка может быть либо явной – указывается
фактический адрес ячейки, где будет находиться в рабочей программе нужная
информация (это уже абсолютный адрес), либо

г) отрицательный символический адрес – переменная или
переменная с индексом, перед которой стоит знак минус. Значение такого
символического адреса – представление в дополнительном коде значения
данной переменной,

д)  символический адрес может быть алгебраической суммой
нескольких символических адресов описанных типов а), б), в) и г). Но в
этом случае есть некое существенное ограничение: если раньше мы говорили,
что идентификатор, входящий в символический адрес, должен быть описан, но
не говорили "где" (т.е. он мог быть описан уже после его употребления в
адресе), то в этом случае все идентификаторы, входящие в слагаемые суммы, кроме

Примеры.

    -АЛЬФА(15) + ВЕТА(5)

    714 + ГАММА(9)

Кроме этих пяти типов адресов, допускается еще использование и
двух весьма специальных адресов:

а) Константы  сдвига  –  восьмеричного  целого  со  знаком  n.  (n<=100 8),
заключенного между символами "/" и
Такой адрес является константой сдвига или константой, аналогичной порядку.
Его удобно употреблять в командах СД, КС, КВ. При трансляции он будет заменен на
адрес 100 ± n,

б) Списка признаков режимов работы машины, заключенного в
круглые скобки. Адрес такого типа употребляют в командах РА, ВР. Список
состоит из набора признаков (в любом порядке), объединенных знаком "+".
Используются следующие признаки:

    О – блокировка округления,
    Н – блокировка нормализации,
    П – блокировка прерывания по переполнению,
    Л – установка признака "логическая группа" ,
    У – установка признака "группа умножения" ,
    С – установка признака "группа сложения" ,

с выбором кодировки буквенно-цифровой информации.

4.4.1. Оператор установки начала рабочей программы.

Оператор или группа операторов такого типа определяется служебным словом "Н;". Здесь
необходимо сказать несколько слов о самом методе размещения рабочей
программы в памяти. В отличие от многих аналогичных систем, выдающих
рабочую программу или модуль загрузки, обладающих свойством
перемещаемости по памяти, система Автокод БЭСМ-6 жестко настраивает
рабочую программу на работу в фиксированной области памяти. Это
объясняется тем, что система двух типов адресов не позволяет свободно
перемещать программу в памяти, не налагая обременительных ограничений
на программирование.

Если нет специальных указаний, то транслятор составляет рабочую
программу, начиная с адреса 00010. В трансляторе есть специальный
счетчик, указывающий в какое место оперативной памяти следует помещать очередной
оператор. В начале трансляции этот счетчик имеет значение 00010. После
обработки очередного оператора, попадающего в рабочую программу,
счетчик увеличивается на единицу.

Оператор начала программы позволяет программисту управлять
размещением своей программы в памяти. Сам оператор содержит только один
символический адрес, этот адрес к моменту выполнения оператора должен
уже иметь значение. Это значение символического адреса будет присвоено
упомянутому счетчику, и идущие следом операторы будут уже располагаться
в памяти, начиная с нового значения счетчика. Например, если в
программе в начале встретится оператор:

    Н; 100,

то рабочая программа будет формироваться, начиная с адреса 00100.

Оператор начала может использоваться для резервирования в
программе массивов рабочих ячеек: если программист внимательно следит
за абсолютными адресами размещения его программы, то это можно
сделать  просто  передвижением  счетчика  с  помощью  оператора  начала
с абсолютным адресом. Например, так:

    К;  КОНЕЦ : СА В = ПБ НАЧАЛО ,
    Н;  200 ,
    К;  НАЧАЛО : СА С = 01 СД/1/ ,

Если программист знает, что слово с меткой "КОНЕЦ" будет
помещено  в  ячейку  с  адресом  00077,  то,  написав  оператор  "Н;
0200",  он присвоит  счетчику  значение  00200,  т.е.  слово  с  меткой  "НАЧАЛО"
будет помещено  в  ячейку  о  адресом  00200  и  в  программе  останется
рабочий массив в 100 8 ячеек. Однако этот способ не всегда удобен хотя бы потому,
что необходимо следить за фактическими адресами. Поэтому чаще
используется другой способ. Он основывается на том, что оператор начала


новое значение (00100) будет присвоено идентификатору "МАССИВ", после
этого  оператор  начала  поставит  в  счетчик  значение  символического адреса
"МАССИВ (100)" т.е. 00200. Достоинством этого метода является то, что
нет необходимости следить за абсолютными адресами рабочей программы, кроме
того, есть возможность дать резервируемому массиву символическое имя.

В программе может стоять и несколько операторов начала подряд,
обычно этим пользуются при резервировании нескольких массивов. Если нам
нужно, например, разбить массив с меткой "МАССИВ" на два массива с
именами "МАМА" и "ПАПА", то программа может выглядеть так:

    К;  КОНЕЦ : СА В = ПБ НАЧАЛО ,
    Н;  МАМА: МАМА (40) ,
    ПАПА: ПАПА (40) ,
    К;  НАЧАЛО : СА С = 01 СД/1/ ,

В этом примере использована и еще одна особенность языка Автокод

4.4.1. Блоки и глобальные идентификаторы

Собственно программа, написанная на Автокоде, имеет блочную
структуру, аналогичную структуре Алгола. Это означает, что вся
программа введено понятие генерального идентификатора, т.е. идентификатора не
подлежащего локализации и действительного в любом блоке программы.
Идентификатор будет описан как генеральный, если в момент его описания
тора. К моменту описания символический адрес (если это не абсолютный
адрес) должен иметь значение. Практически это означает, что все его
составляющие должны быть описаны "выше" данного оператора описания.

В операторах описаний можно описывать и глобальные иден-

0 - указывает, что требуется автокодовская кодировка,

2 – указывает, что требуется стандартная кодировка "со
склеиванием",

4 - указывает, что требуется стандартная кодировка "без
склеивания".

Перед этой цифрой может стоять цифра 0 или 1. Нуль указывает, что
концевой символ текста (":х'') кодируется и заносится в Т- константу
как последний символ. Единица указывает, что заносить в текст концевой
символ не нужно.

Автокодовская и стандартная кодировка буквенно-цифровой
информации дана в приложении 2. Добавления "со склеиванием" и "без
склеивания" связаны с тем, что в качестве служебных сигналов,
употребляемых при вводе и выводе информации, в системе
математического обеспечения БЭСМ-6 используются некоторые комбинации
двух символов. Такие пары символов обнаруживаются
стандартными программами ввода информации и в машину попадают уже
как один 8-разрядный код ("со склейкой"), это и заставляет осуществлять
такую склейку и в константах Автокода. Однако часто это не всегда
бывает удобно, и поэтому введен режим кодировки "без склеивания", в этом
случае все служебные комбинации символов кроме " :х " представляются в
константах как два символа. Комбинация " :х " всегда кодируется как
один символ.

Для более полного ознакомления с вопросами кодировки и ввода
информации следует познакомиться с главой VI "Инструкции по
программированию". Здесь следует лишь сказать, что при печати буквенно-
цифровой информации можно пользоваться либо автокодовской кодировкой,
либо стандартной "со склеиванием". Экстракод печати (экстракод Э064)
понимает как ту, так и другую (Т=0 или Т=4).

5. Операторы режима

Операторы режима управляют общим процессом прохождения задачи
через систему Автокод БЭСМ-6. Мы их будем описывать в том порядке, в
каком они могут стоять в начале автокод-программы.

5.1. Операторы запрета печати и обмена

Если нет специальных указаний, то после окончания трансляции
будет выдан текст автокод программы и рабочей программы (с примечаниями
или без них, это зависит от оператора отладки). Если выдача программы
не нужна (она занимает много времени), то, поставив оператор запрета
печати,

ной ленте. Самый лучший способ сделать это – отперфорировать текст,
хранящийся на ленте. Все эти работы могут быть выполнены с помощью
оператора обмена. Он состоит из буквы Л, двух восьмеричных цифр и
заканчивается запятой. В качестве первой цифры можно использовать
такие:

    0 – означает, что работа с магнитной лентой не производится;

    1 – означает, что текст программы после внесения в него

Пример.

    Л 35 ,

Это означает, что текст нужно считать с ленты, внести в него
исправления, записать на ленту на место старого текста и выдать на карты по 5
операторов на карту.

Лента, на которую идет запись, является постановочной лентой
программиста. Система обращается к ней как к "нулевой" ленте третьего

являющихся отображением 4-разрядной двоичной шкалы. Следом за шкалой
через запятую стоят указания об интервалах номеров команд, подлежащих
прокрутке.

В общем случае оператор отладки имеет такой вид:

    O<шкала>, N (А1:А2,

    В1:В2 ............. ),
    В (А1:А2,
    В1:В2, ............ ),
    А (A1:А2,
    В1:В2 ............. ),
    Е (А1:А2,
    В1:В2 ............. )!

Буквами "N", "В", "А", "Е" указываются типы интервалов прокрутки.

никак не связана с печатью, задаваемой интервалами.

Задавать интервалы команд для отладки можно только указывая их
символические адреса, но так как обычные символические адреса не всегда
точно определяют место команды (например, в разных блоках есть
несколько

печать информации,

работа типа Е- при попадании команды в этот интервал прокрутка и
решение задачи прекращается, и она снимается с решения.

Все интервалы одинакового типа объединяется в одну группу
(между собою они отделяется знаком и заключается в круглые скобки.

Перед скобками становится буква ("В", "А", или "Е"), определяющая тип
работы. Таким образом, в операторе отладки может стоять до 4 групп
интервалов, между собою они отделяются знаком ",". Заканчивается
оператор знаком "!".

Любая из групп интервалов или все четыре группы могут от-
сутствовать, но две цифры, задающие шкалу, должны быть.

Примеры:

    О 01, N(1 – НАЧАЛО : 1 – М), В(1 – М : 1 – КОНЕЦ)!
    О 17!
    J

Последний  оператор  указывает,  что  нужно  выводить  все,  что
возможно.

Если в программе стоит оператор отладки, то распечатка программы будет

В этом случае будет распечатано 100 8 операторов программы, начиная с
оператора с меткой "М", расположенного после первого служебного слова
"В;".

5.3. Операторы исправлений

Ecли в процессе отладки программы возникает необходимость
изменить часть текста программы, то это можно сделать либо заменой
соответствующих перфокарт, либо воспользоваться операторами

Будет  стёрт  оператор,  следующий  за  оператором  с  меткой  "М",  и
на его место будет подставлен новый оператор.

Внимание!
Если полный символический адрес есть просто

начиная с места, где была зафиксирована первая ошибка.
В местах обнаружения ошибок печатается слово "ОШИБКА" и номер этой ошибки.
Список номеров и самих ошибок приведен в Приложении 4.

Система построена так, что она пытается обнаружить максимальное
число ошибок. Любая из ошибок означает, что после трансляции задача не
пойдет на решение и будет снята.

Следует учитывать, что есть такие ошибки, которые фиксируется, но
распечатки программы при этом не производится. Например, это
происходит, при неверном заголовке исправления.
Для того, чтобы получить в этом случае текст программы, следует
воспользоваться программой "распечатки перфокарт".

После паспорта задачи и после карты стандартного начала прокладывается
по несколько пустых перфокарт.
Более подробно с информацией, входящей в паспорт задачи, можно
познакомиться в главе 5 (ст. 261) "Инструкции по программированию".
Однако, так как в паспорт задачи при работе с Автокодом входят как
информация, характеризующая саму задачу (например, указание о
постановочных лентах), так и систему Автокод, то следует дать некоторые
добавочные пояснения.

а) Требуемое число листов ОЗУ определяется как максимум из
числа листов, требующихся транслятору (14 8), требующихся самой рабочей

символов и, кроме того, требуется еще три листа дополнительно!

б) Если ваша программа требует выдачи на ПК, ПЛ, ТТ или если вы
указали в операторе обмена такую работу, то это должно быть указано в
паспорте.

в) Если вы задали в операторе обмена работу с МЛ, то эта лента
должна быть включена в общее число лент, требующихся в программе и,
кроме того, должна быть указана как постановочная (номер "30").

г) Число заказываемых трактов МБ определяется как максимум из
удвоенного числа трактов (листов), требующихся для размещения
программы, числа трактов, заказываемых собственно вашей программой и
числа трактов (плюс 1), необходимых для размещения текста. Первые два
вы знаете точно, а последние нужно оценить так же, как это делалось при
определении требуемого числа листов.

д) В качестве адреса входа в программу записывается адрес
обращения к транслятору – 04240. Этот адрес связан со стандартной
картой начала и, вообще говоря, может быть изменен, если изменить эту карту.

е) При работе с автокодом всегда заказывают листы, начиная с нулевого.

ж) Шифр задачи должен быть четным и отличным от нуля. Общий
вид паспорта задачи при работе с Автокодом приведен в Приложении 6.

7. Стандартная программа стыковки

В некоторых случаях появляется необходимость объединить
программу, написанную на машинном языке, с программой, написан-
ной на языке Автокода. Это можно сделать с помощью специальной
стандартной программы "стыковка". Её номер в библиотеке – 0003. Для
работы с этой программой требуется знание общих принципов работы
библиотечных программ и умение работать на машинном языке. Это
предусматривает довольно подробное знакомство с "Инструкцией по
программированию". Вообще говоря, программа стыковки обеспечит вам
только размещение в ОЗУ как машинной программы, так и рабочей
программы, полученной после трансляции; установление взаимных ссылок
является заботой программиста. Управление стыковкой идет из машинной
программы, т.е. она уже работает и обращается к стандартной программе.
Процесс стыковки идет следующим образом:

1) Вводится машинная программа и сразу начинает выполняться. В
ней есть часть, управляющая стыковкой.

2) Командами, находящимися в этой части, обеспечивается
считывание в ОЗУ текста автокод-программы с ленты или перфокарт. (В
последнем случае, перед текстом не должно быть паспорта и карты
стандартного начала, а должен стоять признак АО).
(Машинную программу и текст автокод-программы можно ввести в память
одновременно, тогда этот пункт не выполняется)

3) Затем через экстракод Э066 происходит обращение к программе
стыковки.

4) После работы этой программы в памяти машины будет находиться
машинная и полученная рабочая программа и управление будет передано на
команды, следующие за командами обращения к СП.
При работе с программой стыковки следует учитывать, что текст
автокод-программы должен быть записан с начала листа ОЗУ.
Программе стыковки задаются таким параметры:

1) в информационном слове экстракода в 7-12 разрядах указывается
номер начального листа машинной программы, а в 1-6 рр. номер послед
него листа.

2) в ячейке 0002 таким же образом задается интервал листов, где
находится текст автокод-программы. (Если текст автокод-программы введен
с устройств ввода, то ячейка 0002 сформирована без вашего участия).

3) в 13-ом разряде первого из указанных слов задается признак
выполнения стыковки – 1.

4) Сама программа "стыковки" должна помещаться вне указанных
интервалов листов. Программа стыковки может быть включена в работу и
другими способами (например, обращение к ней можно вводить как
автономную часть), однако, все их перечислить не представляется
возможным, и, если вы знакомы с принципами прохождения и ввода
"машинных" программ, то вы их "изобретете" легко сами.

Приложение I.

На рисунке приведен вид бланка для написания Автокод-
программы. На нем заранее напечатаны некоторые из символов. Если в
соответствующих полях бланка нет никаких надписей, то эти символы
не перфорируются.

АВТОКОД БЭСМ-6
Исполнитель
 __________

ОРГАНИЗАЦИЯ
 _____

НАЗВАНИЕ РАБОТЫ
Лист _____

Приложение 2. Алфавит входного языка Автокода и его внутренние представления.

Для записи программ используются следующие символы: цифры

    - 0,1,2,3,4,5,6,7,8,9

Таблица символов и их код.

IMG

Кодировка по ГОСТ"у указана без восьмого (контрольного)
разряда.  Автокод-программа  перфорируется  на  устройстве  УПП-2,  где
есть полный набор всех приведенных символов.

Приложение 3.

Список команд машины БЭСМ-6 с символическими и
восьмеричными кодами операции, используемыми в Автокоде

Команды с коротким адресом

IMG

Команды с полным (длинным) адресом.

IMG

Приложение 4

Список ошибок, выявляемых транслятором.
Ниже приводится список ошибок, которые может обнаружить
система Автокод БЭСМ-6, и их номера, которые будут выданы при
распечатке.

00 - "запрещенная" команда, фиксируемая при прокрутке
 1 - в адресе использован запрещенный символ
 2 - в команде использовано неверное название операции
 3 - число цифр в цифровой константе больше 16 10
 4 - в словаре использован запрещенный знак
 5 - цифра 8 или 9, или буква стоит в зепрещенном месте
 6 - в программе не описан данный идентификатор
 7 - неверный индекс в символическом адресе
10 - этот длинный адрес используется в команде 1-ой структуры
11 - после левой команды нет знака "="
12 - в символическом адресе нет закрывающей скобки
13 - неверный индекс в символическом адресе
14 - в символическом адресе нет закрывающей скобки
15 - символический адрес, используемый в управляющем операторе, еще не описан.
16 - неопределенность из-за отсутствия служебного слова
17 - элемент описания не содержит идентификатора
20 - ошибка в логической константе
21 - после описаний нет служебного слова
22 - использовано не существующее служебное слово
23 - после алфавитно-цифровой константы нет знака
24 - в командном слове нет знака ","
25 - в данном блоке использованы две одинаковые метки
26 - номер индекс-регистра больше I7 8
27 - неверное название операции
30 - неверное название операции
31 - неверное название операции
32 - длинный адрес в команде 1-ой структуры
33 - неверное название операции
34 - запрещенный символ в цифровой константе
33 - порядок числа больше 18
36 - число "В;" больше числа "Е;"
37 - в описании употреблен запрещенный знак
40 - в истинном адресе больше 5 восьмеричных цифр
41 - ошибка в исправлении
43 - ошибка в символическом адресе заголовка исправления
44 - ошибка в символическом адресе заголовка исправления
45 - ошибка в символическом адресе заголовка исправления
46 - ошибка в адресе исправления описания
47 - исправление требует стереть слишком много операторов
30 - ошибка в названии метки заголовка исправления
31 - неверный индекс в символическом адресе заголовка исправления
52 - идентификатор начинается с цифры
53 - следствие некоторых ошибок, зафиксированных при трансляции
54 - помечена меткой правая команда
55 - в самом конце автокод-программы нет знака "!"
60 - в операторе прокрутки нет шкалы
71 - неверное информационное слово у экстракода
72 - неверное задание символических адресов в операторе прокрутки
74 - неверное задание символических адресов в операторе прокрутки

Приложение 5.

Стандартные карты Автокода.
